1.
[Original predicate]
(((rt_input.obsDistance_0 > rt_state.zone_1) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 >= 6) and (rt_input.obsDistance_1 > 4) and !(rt_input.obsDistance_3 > 2) and (rt_input.obsDistance_0 > 4)) or ((rt_input.obsDistance_0 > rt_state.zone_1) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 >= 6) and !(rt_input.obsDistance_1 > 4) and (1 == rt_state.zone_1) and !(rt_state.speed_status == Midium_speed)) or ((rt_input.obsDistance_0 > rt_state.zone_1) and (4 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 >= 6) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_1 == rt_input.obsDistance_2) and !(rt_input.obsDistance_0 > 7)) or ((rt_input.obsDistance_0 > rt_state.zone_1) and (4 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 >= 6) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_1 > 4) and !(3 == rt_input.obsDistance_0) and !(rt_input.obsDistance_3 == rt_state.zone_1)) or ((rt_input.obsDistance_0 > rt_state.zone_1) and (4 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 >= 6) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 4) and !(rt_input.obsDistance_3 > 1)) or ((rt_input.obsDistance_0 > rt_state.zone_1) and !(4 >= rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_1) and (rt_state.speed_status == Stop) and (rt_input.obsDistance_0 > rt_input.obsDistance_1) and (2 >= rt_input.obsDistance_1) and (1 >= rt_state.zone_0)) or ((rt_input.obsDistance_0 > rt_state.zone_1) and !(4 >= rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_1) and (rt_state.speed_status == Stop) and (rt_input.obsDistance_0 > rt_input.obsDistance_1) and !(2 >= rt_input.obsDistance_1)) or ((rt_input.obsDistance_0 > rt_state.zone_1) and !(4 >= rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Stop) and (1 >= rt_state.zone_0) and (7 > rt_input.obsDistance_0) and (rt_input.obsDistance_3 >= 23) and (rt_input.obsDistance_2 > rt_input.obsDistance_0)) or ((rt_input.obsDistance_0 > rt_state.zone_1) and !(4 >= rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Stop) and (1 >= rt_state.zone_0) and !(7 > rt_input.obsDistance_0)) or ((rt_input.obsDistance_0 > rt_state.zone_1) and !(4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_1) and !(rt_state.zone_0 == rt_state.zone_1) and (rt_input.obsDistance_1 >= 7) and !((rt_input.obsDistance_1 - rt_input.obsDistance_3) <= 1) and (rt_input.obsDistance_3 >= 11)) or ((rt_input.obsDistance_0 > rt_state.zone_1) and !(4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_1) and !(rt_state.zone_0 == rt_state.zone_1) and !(rt_input.obsDistance_1 >= 7)) or (!(rt_input.obsDistance_0 > rt_state.zone_1) and (2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_3 > rt_input.obsDistance_2)) or (!(rt_input.obsDistance_0 > rt_state.zone_1) and (2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_3 > rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > rt_state.zone_1)) or (!(rt_input.obsDistance_0 > rt_state.zone_1) and !(2 >= rt_input.obsDistance_1)))

[Original predicate size] 79

[Final output]
( or (and (> 3 rt_input.obsDistance_3) (and (> rt_input.obsDistance_0 rt_state.zone_1) (and (> rt_input.obsDistance_2 5) (and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_0 rt_state.zone_1) (> rt_input.obsDistance_0 4)))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and (> 5 rt_input.obsDistance_3) (and (and (> rt_input.obsDistance_0 rt_state.zone_1) (= 1 rt_state.zone_1)) (and (not (= rt_state.speed_status Midium_speed)) (and (> rt_input.obsDistance_2 5) (and (> 5 rt_input.obsDistance_1) (> rt_input.obsDistance_0 rt_state.zone_1))))))) ( or (and (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (> 5 rt_input.obsDistance_3)) (and (> rt_input.obsDistance_0 rt_state.zone_1) (and ( and (= rt_input.obsDistance_1 rt_input.obsDistance_2) ( and (> 6 rt_input.obsDistance_2) (>= rt_input.obsDistance_2 rt_input.obsDistance_3))) (and (= rt_input.obsDistance_1 rt_input.obsDistance_2) ( and (> rt_input.obsDistance_0 rt_state.zone_1) (> 8 rt_input.obsDistance_0)))))) ( or (and ( and (not (= rt_state.zone_1 rt_input.obsDistance_3)) (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 5 rt_input.obsDistance_3))) (and ( and (> rt_input.obsDistance_0 rt_state.zone_1) (not (= rt_state.zone_1 rt_input.obsDistance_3))) (and ( and (> 6 rt_input.obsDistance_2) (> rt_input.obsDistance_3 rt_input.obsDistance_2)) (and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_0 rt_state.zone_1) (not (= 3 rt_input.obsDistance_0))))))) ( or (and (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 2 rt_input.obsDistance_3)) (and (> rt_input.obsDistance_0 rt_state.zone_1) (and ( and (> 6 rt_input.obsDistance_2) (> rt_input.obsDistance_3 rt_input.obsDistance_2)) (and (> 5 rt_input.obsDistance_1) (> rt_input.obsDistance_0 rt_state.zone_1))))) ( or (and (> rt_input.obsDistance_3 4) (and (> rt_input.obsDistance_0 rt_state.zone_1) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (> 2 rt_state.zone_0) (and (and (> 3 rt_input.obsDistance_1) (> rt_input.obsDistance_0 rt_input.obsDistance_1)) ( and (> rt_input.obsDistance_0 rt_state.zone_1) (> rt_input.obsDistance_0 rt_input.obsDistance_1)))))))) ( or (and (> rt_input.obsDistance_3 4) (and (> rt_input.obsDistance_0 rt_state.zone_1) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and ( and (> rt_input.obsDistance_1 2) (and (> 5 rt_input.obsDistance_1) (> rt_input.obsDistance_0 rt_input.obsDistance_1))) ( and (> rt_input.obsDistance_0 rt_state.zone_1) (> rt_input.obsDistance_0 rt_input.obsDistance_1))))))) ( or (and ( and (> rt_input.obsDistance_3 4) ( >= rt_input.obsDistance_3 23 ) ) (and (> rt_input.obsDistance_0 rt_state.zone_1) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and (> 2 rt_state.zone_0) (and (> rt_input.obsDistance_2 rt_input.obsDistance_0) (and (> 5 rt_input.obsDistance_1) ( and (> rt_input.obsDistance_2 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 rt_state.zone_1) (> 7 rt_input.obsDistance_0)))))))))) ( or (and (> rt_input.obsDistance_3 4) (and (> rt_input.obsDistance_0 rt_state.zone_1) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and (> 2 rt_state.zone_0) (and (> 5 rt_input.obsDistance_1) ( and (> rt_input.obsDistance_0 rt_state.zone_1) (> rt_input.obsDistance_0 6)))))))) ( or (and ( and (> (- rt_input.obsDistance_3 9) 1) ( and (> rt_input.obsDistance_3 4) (> (+ -1 rt_input.obsDistance_1) rt_input.obsDistance_3))) (and ( and (> rt_input.obsDistance_0 rt_state.zone_1) (not (= rt_state.zone_0 rt_state.zone_1))) (and (not (= rt_state.zone_0 rt_state.zone_1)) (and ( and (> (+ -1 rt_input.obsDistance_1) rt_input.obsDistance_3) (> rt_input.obsDistance_1 6)) (> rt_input.obsDistance_0 rt_state.zone_1))))) ( or (and (> rt_input.obsDistance_3 4) (and ( and (> rt_input.obsDistance_0 rt_state.zone_1) (not (= rt_state.zone_0 rt_state.zone_1))) (and (not (= rt_state.zone_0 rt_state.zone_1)) (and ( and (> rt_input.obsDistance_1 4) (> 7 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 rt_state.zone_1))))) ( or (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (and (>= rt_state.zone_1 rt_input.obsDistance_0) (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (and (> 3 rt_input.obsDistance_1) (>= rt_state.zone_1 rt_input.obsDistance_0))))) ( or (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (and (>= rt_state.zone_1 rt_input.obsDistance_0) (>= rt_state.zone_1 rt_input.obsDistance_2)) (and ( and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (>= rt_state.zone_1 rt_input.obsDistance_2)) (and (> 3 rt_input.obsDistance_1) (>= rt_state.zone_1 rt_input.obsDistance_0))))) (and (>= rt_state.zone_1 rt_input.obsDistance_0) (and (> rt_input.obsDistance_1 2) (>= rt_state.zone_1 rt_input.obsDistance_0))) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 108

[Total time]
Total Conversion Time : 0 days, 0 hours, 6 minutes, 19 seconds


2.
[Original predicate]
(((2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_0 > 2)) or ((2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and (1 > rt_input.obsDistance_2) and (7 > rt_input.obsDistance_3) and (7 == rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and (1 > rt_input.obsDistance_2) and !(7 > rt_input.obsDistance_3) and !(4 == rt_input.obsDistance_1)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and !(1 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and (12 > rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and !(1 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and (4 == rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and !(1 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and !(4 == rt_input.obsDistance_0) and !(4 >= rt_input.obsDistance_3) and (12 > rt_input.obsDistance_1) and (rt_input.obsDistance_1 > 4) and !(rt_input.obsDistance_2 >= 4)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and !(1 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2) and (4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 > rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and !(1 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2) and !(4 >= rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and !(1 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and (7 == rt_input.obsDistance_1)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and !(1 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and !(7 == rt_input.obsDistance_1) and !(rt_input.obsDistance_1 > 4) and !(7 >= rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and !(1 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_0) and !(4 >= rt_input.obsDistance_2) and (4 > rt_input.obsDistance_0) and !(1 == rt_state.zone_0)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and !(1 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_0) and !(4 >= rt_input.obsDistance_2) and !(4 > rt_input.obsDistance_0) and (1 >= rt_state.zone_1) and !(rt_state.speed_status == Slow_speed) and (7 > rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 4) and !(1 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_0) and !(4 >= rt_input.obsDistance_2) and !(4 > rt_input.obsDistance_0) and (1 >= rt_state.zone_1) and !(rt_state.speed_status == Slow_speed) and !(7 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_1) and !(7 >= rt_input.obsDistance_2) and (24 == rt_input.obsDistance_2) and (4 == rt_input.obsDistance_1)))

[Original predicate size] 125

[Final output]
( or (and (> 3 rt_input.obsDistance_1) (> rt_input.obsDistance_0 2)) ( or (and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (and ( and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (> rt_input.obsDistance_2 2)) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and (> 7 rt_input.obsDistance_3) (and (not (= rt_state.speed_status Midium_speed)) (and (> 1 rt_input.obsDistance_2) (= 7 rt_input.obsDistance_1))))) ( or (and (> rt_input.obsDistance_3 6) (and (> 1 rt_input.obsDistance_2) (> rt_input.obsDistance_1 4))) ( or (and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (and ( and ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 0)) (and (> 5 rt_input.obsDistance_2) (> rt_input.obsDistance_2 rt_input.obsDistance_3))) (and (> rt_input.obsDistance_1 3) ( and (> rt_input.obsDistance_0 2) (> (+ 9 3) rt_input.obsDistance_0))))) ( or (and ( and (>= rt_input.obsDistance_3 rt_input.obsDistance_2) (> rt_input.obsDistance_0 rt_input.obsDistance_3)) (and ( and ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 0)) ( and (> 5 rt_input.obsDistance_2) (>= rt_input.obsDistance_3 rt_input.obsDistance_2))) (and (> rt_input.obsDistance_1 3) ( and (= 4 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3)))))) ( or (and ( and (> rt_input.obsDistance_3 4) ( and (>= rt_input.obsDistance_3 rt_input.obsDistance_2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))) (and ( and ( and (> 5 rt_input.obsDistance_2) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)) (and (> rt_input.obsDistance_2 0) (> 4 rt_input.obsDistance_2))) (and ( and (> rt_input.obsDistance_1 3) ( and (> (+ 9 3) rt_input.obsDistance_1) (> rt_input.obsDistance_1 4))) ( and (not (= 4 rt_input.obsDistance_0)) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3)))))) ( or (and ( and (> rt_input.obsDistance_1 rt_input.obsDistance_3) (and (>= rt_input.obsDistance_3 rt_input.obsDistance_0) (>= rt_input.obsDistance_3 rt_input.obsDistance_2))) (and ( and ( and (> 5 rt_input.obsDistance_2) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)) (and (> rt_input.obsDistance_2 0) (> 3 rt_input.obsDistance_2))) (and ( and (> rt_input.obsDistance_1 rt_input.obsDistance_3) (> rt_input.obsDistance_1 3)) ( and (> 5 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (>= rt_input.obsDistance_3 rt_input.obsDistance_0)))))) ( or (and (and (>= rt_input.obsDistance_3 rt_input.obsDistance_0) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)) (and ( and ( and (> 5 rt_input.obsDistance_2) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)) (and (> rt_input.obsDistance_2 0) (> 3 rt_input.obsDistance_2))) (and (> rt_input.obsDistance_1 3) ( and (> rt_input.obsDistance_0 4) ( and (> rt_input.obsDistance_0 2) (>= rt_input.obsDistance_3 rt_input.obsDistance_0)))))) ( or (and (and (>= rt_input.obsDistance_3 rt_input.obsDistance_0) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)) (and ( and ( and (> 5 rt_input.obsDistance_2) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)) ( and (> rt_input.obsDistance_2 2) ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 0)))) (and (= 7 rt_input.obsDistance_1) ( and (> rt_input.obsDistance_0 2) (>= rt_input.obsDistance_3 rt_input.obsDistance_0))))) ( or (and (and (>= rt_input.obsDistance_3 rt_input.obsDistance_0) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)) (and ( and ( and (> 5 rt_input.obsDistance_2) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)) ( and (> rt_input.obsDistance_2 2) ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 0)))) (and (= 4 rt_input.obsDistance_1) ( and (> rt_input.obsDistance_0 7) ( and (> rt_input.obsDistance_0 2) (>= rt_input.obsDistance_3 rt_input.obsDistance_0)))))) ( or (and (not (= 1 rt_state.zone_0)) (and ( and (> rt_input.obsDistance_2 4) ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 0))) (and (> rt_input.obsDistance_1 3) (= 3 rt_input.obsDistance_0)))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and (> 7 rt_input.obsDistance_3) (and (> 2 rt_state.zone_1) (and (not (= rt_state.speed_status Slow_speed)) (and ( and (> rt_input.obsDistance_2 4) ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 0))) (and (> rt_input.obsDistance_1 3) (> rt_input.obsDistance_0 3))))))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and ( and (> rt_input.obsDistance_3 6) (>= rt_input.obsDistance_3 rt_input.obsDistance_0)) (and (> 2 rt_state.zone_1) (and (not (= rt_state.speed_status Slow_speed)) (and ( and (> rt_input.obsDistance_2 4) ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 0))) (and (> rt_input.obsDistance_1 3) ( and (>= rt_input.obsDistance_3 rt_input.obsDistance_0) (> rt_input.obsDistance_0 3)))))))) (and (= (+ (+ 9 9) 6) rt_input.obsDistance_2) (= 4 rt_input.obsDistance_1)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 117

[Total time]
Total Conversion Time : 0 days, 0 hours, 13 minutes, 0 seconds


3.
[Original predicate]
((!(1 >= rt_state.zone_1) and (6 > rt_input.obsDistance_0) and (rt_state.speed_status == Slow_speed) and (2 == rt_state.zone_0) and !(2 >= rt_input.obsDistance_2)) or (!(1 >= rt_state.zone_1) and !(6 > rt_input.obsDistance_0) and (2 >= rt_input.obsDistance_3) and (1 == rt_input.obsDistance_2)) or (!(1 >= rt_state.zone_1) and !(6 > rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2)))

[Original predicate size] 13

[Final output]
( or (and (= rt_state.speed_status Slow_speed) (and (> rt_state.zone_1 1) (and (= rt_state.speed_status Slow_speed) (and (= 2 rt_state.zone_0) (and (> rt_input.obsDistance_2 2) (> 6 rt_input.obsDistance_0)))))) ( or (and (> 3 rt_input.obsDistance_3) (and (> rt_state.zone_1 1) (and (= 1 rt_input.obsDistance_2) (> rt_input.obsDistance_0 5)))) (and (> rt_input.obsDistance_3 2) (and (> rt_state.zone_1 1) (and (> rt_input.obsDistance_2 2) (> rt_input.obsDistance_0 5)))) ) ) 

[Final predicate size] 14

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 8 seconds


4.
[Original predicate]
(((2 >= rt_input.obsDistance_1) and !(2 >= rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_1) and (2 >= rt_input.obsDistance_2) and (2 == rt_state.zone_1) and (rt_state.speed_status == Slow_speed) and (1 == rt_input.obsDistance_2) and !(1 >= rt_input.obsDistance_3) and !(6 > rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_1) and (2 >= rt_input.obsDistance_2) and (2 == rt_state.zone_1) and !(rt_state.speed_status == Slow_speed)))

[Original predicate size] 13

[Final output]
( or (and (> 3 rt_input.obsDistance_1) (> rt_input.obsDistance_0 2)) ( or (and (= rt_state.speed_status Slow_speed) (and (> rt_input.obsDistance_3 1) (and (= 2 rt_state.zone_1) (and (= rt_state.speed_status Slow_speed) (and (= 1 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 2) (> rt_input.obsDistance_0 5))))))) (and (not (= rt_state.speed_status Slow_speed)) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Slow_speed)) (and (> 3 rt_input.obsDistance_2) (> rt_input.obsDistance_1 2))))) ) ) 

[Final predicate size] 14

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 8 seconds


5.
[Original predicate]
(!(1 >= rt_state.zone_0) and !(1 >= rt_state.zone_1) and !(2 >= rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_1))

[Original predicate size] 5

[Final output]
(and (> rt_input.obsDistance_3 2) (and (> rt_state.zone_1 1) (and (> rt_state.zone_0 1) (and (> rt_input.obsDistance_2 2) (> rt_input.obsDistance_1 2))))) 

[Final predicate size] 5

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 3 seconds


6.
[Original predicate]
(((1 > rt_state.zone_0) and (1 > rt_state.zone_1) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3)) or ((1 > rt_state.zone_0) and !(1 > rt_state.zone_1)) or (!(1 > rt_state.zone_0) and (1 >= rt_input.obsDistance_3) and !(rt_state.speed_status == Slow_speed)))

[Original predicate size] 8

[Final output]
( or (and (>= rt_input.obsDistance_3 rt_input.obsDistance_2) (and (> 1 rt_state.zone_1) (and (> 1 rt_state.zone_0) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)))) ( or (and (> rt_state.zone_1 0) (> 1 rt_state.zone_0)) (and (not (= rt_state.speed_status Slow_speed)) (and (> 2 rt_input.obsDistance_3) (and (not (= rt_state.speed_status Slow_speed)) (> rt_state.zone_0 0)))) ) ) 

[Final predicate size] 10

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 5 seconds


7.
[Original predicate]
(((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (rt_input.obsDistance_3 > 4) and !(rt_input.obsDistance_1 > 4) and (rt_state.speed_status == Stop)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and (rt_state.speed_status == Slow_speed) and !(4 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and (rt_input.obsDistance_3 > rt_state.zone_1) and (rt_state.zone_1 >= rt_input.obsDistance_2)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and (rt_state.speed_status == Slow_speed) and !(4 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_3 > rt_state.zone_1) and !(4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 6) and (rt_input.obsDistance_1 == rt_input.obsDistance_2)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and (rt_state.speed_status == Slow_speed) and !(4 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_3 > rt_state.zone_1) and !(4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 6) and !(rt_input.obsDistance_1 == rt_input.obsDistance_2) and (rt_input.obsDistance_2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_0 >= 6)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and (rt_state.speed_status == Slow_speed) and !(4 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_3 > rt_state.zone_1) and !(4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 6) and !(rt_input.obsDistance_1 == rt_input.obsDistance_2) and (rt_input.obsDistance_2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_0 >= 6) and (rt_input.obsDistance_2 > rt_input.obsDistance_0)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and (rt_state.speed_status == Slow_speed) and !(4 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_3 > rt_state.zone_1) and !(4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 6) and !(rt_input.obsDistance_1 == rt_input.obsDistance_2) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_0) and (1 == (24 - rt_input.obsDistance_0))) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and (rt_state.speed_status == Slow_speed) and !(4 >= rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_3 > rt_state.zone_1) and !(4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 >= 6) and !(rt_input.obsDistance_1 == rt_input.obsDistance_2) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_0) and !(1 == (24 - rt_input.obsDistance_0)) and (1 == rt_input.obsDistance_3) and (7 == rt_input.obsDistance_1)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and (rt_state.speed_status == Slow_speed) and !(4 >= rt_input.obsDistance_1) and !(7 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_3 > rt_state.zone_0)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and !(rt_state.speed_status == Slow_speed) and (rt_input.obsDistance_1 > 4) and (rt_input.obsDistance_2 > rt_input.obsDistance_0) and !(rt_input.obsDistance_3 > 2)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and !(rt_state.speed_status == Slow_speed) and (rt_input.obsDistance_1 > 4) and !(rt_input.obsDistance_2 > rt_input.obsDistance_0) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 4) and !(rt_input.obsDistance_3 > rt_state.zone_0) and !(rt_input.obsDistance_1 == rt_input.obsDistance_2) and (rt_input.obsDistance_2 > 7)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and !(rt_state.speed_status == Slow_speed) and (rt_input.obsDistance_1 > 4) and !(rt_input.obsDistance_2 > rt_input.obsDistance_0) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 4) and !(rt_input.obsDistance_3 > rt_state.zone_0) and !(rt_input.obsDistance_1 == rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > 7) and (12 >= rt_input.obsDistance_1) and (24 > rt_input.obsDistance_0) and (12 > rt_input.obsDistance_1)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and !(rt_state.speed_status == Slow_speed) and (rt_input.obsDistance_1 > 4) and !(rt_input.obsDistance_2 > rt_input.obsDistance_0) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 4) and !(rt_input.obsDistance_3 > rt_state.zone_0) and !(rt_input.obsDistance_1 == rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > 7) and (12 >= rt_input.obsDistance_1) and (24 > rt_input.obsDistance_0) and !(12 > rt_input.obsDistance_1) and (rt_input.obsDistance_3 >= rt_state.zone_1)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and !(rt_state.speed_status == Slow_speed) and (rt_input.obsDistance_1 > 4) and !(rt_input.obsDistance_2 > rt_input.obsDistance_0) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_1 > 8)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and !(rt_state.speed_status == Slow_speed) and (rt_input.obsDistance_1 > 4) and !(rt_input.obsDistance_2 > rt_input.obsDistance_0) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 8) and !(rt_state.speed_status == Stop)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_3 > 4) and !(rt_state.speed_status == Slow_speed) and !(rt_input.obsDistance_1 > 4)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and (rt_input.obsDistance_1 > 4) and (7 == rt_input.obsDistance_2)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_0 > 4) and !(2 >= rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and !(rt_input.obsDistance_1 > 4)) or ((rt_input.obsDistance_0 > 2) and !(rt_input.obsDistance_0 > 4) and (rt_state.speed_status == Midium_speed) and (rt_input.obsDistance_1 >= 7) and (rt_input.obsDistance_2 > 12) and (7 > rt_input.obsDistance_3) and (rt_input.obsDistance_1 > 12) and !(rt_input.obsDistance_0 >= rt_input.obsDistance_3)) or ((rt_input.obsDistance_0 > 2) and !(rt_input.obsDistance_0 > 4) and (rt_state.speed_status == Midium_speed) and (rt_input.obsDistance_1 >= 7) and (rt_input.obsDistance_2 > 12) and (7 > rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 12)) or ((rt_input.obsDistance_0 > 2) and !(rt_input.obsDistance_0 > 4) and (rt_state.speed_status == Midium_speed) and (rt_input.obsDistance_1 >= 7) and !(rt_input.obsDistance_2 > 12) and (rt_input.obsDistance_3 > 12)) or ((rt_input.obsDistance_0 > 2) and !(rt_input.obsDistance_0 > 4) and (rt_state.speed_status == Midium_speed) and (rt_input.obsDistance_1 >= 7) and !(rt_input.obsDistance_2 > 12) and !(rt_input.obsDistance_3 > 12) and (12 == rt_input.obsDistance_2)) or (!(rt_input.obsDistance_0 > 2) and (2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_3 > rt_input.obsDistance_2)) or (!(rt_input.obsDistance_0 > 2) and (2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_3 > rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_2)) or (!(rt_input.obsDistance_0 > 2) and !(2 >= rt_input.obsDistance_1)))

[Original predicate size] 228

[Final output]
( or (and (> rt_input.obsDistance_3 4) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (= 2 rt_state.zone_0) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))))) ( or (and (= rt_state.speed_status Slow_speed) (and (and (> rt_input.obsDistance_3 rt_state.zone_1) (> 5 rt_input.obsDistance_3)) (and ( and (> rt_input.obsDistance_3 rt_state.zone_1) (>= rt_state.zone_1 rt_input.obsDistance_2)) (and (= rt_state.speed_status Slow_speed) (and (= 2 rt_state.zone_0) (and ( and (> 8 rt_input.obsDistance_2) (>= rt_state.zone_1 rt_input.obsDistance_2)) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))))))) ( or (and (= rt_state.speed_status Slow_speed) (and (and (>= rt_state.zone_1 rt_input.obsDistance_3) (> 5 rt_input.obsDistance_3)) (and (>= rt_state.zone_1 rt_input.obsDistance_3) (and (= rt_state.speed_status Slow_speed) (and (= 2 rt_state.zone_0) (and ( and (= rt_input.obsDistance_1 rt_input.obsDistance_2) ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 4))) (and (and (> rt_input.obsDistance_2 5) (= rt_input.obsDistance_1 rt_input.obsDistance_2)) (> rt_input.obsDistance_0 4)))))))) ( or (and (= rt_state.speed_status Slow_speed) (and (and (>= rt_state.zone_1 rt_input.obsDistance_3) (> 5 rt_input.obsDistance_3)) (and (>= rt_state.zone_1 rt_input.obsDistance_3) (and (= rt_state.speed_status Slow_speed) (and (= 2 rt_state.zone_0) (and ( and ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 4)) ( and (not (= rt_input.obsDistance_1 rt_input.obsDistance_2)) (>= rt_input.obsDistance_2 rt_input.obsDistance_0))) (and ( and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_1 5) (not (= rt_input.obsDistance_1 rt_input.obsDistance_2)))) ( and (> rt_input.obsDistance_0 4) ( and (>= rt_input.obsDistance_2 rt_input.obsDistance_0) (> rt_input.obsDistance_0 5)))))))))) ( or (and (= rt_state.speed_status Slow_speed) (and (and (>= rt_state.zone_1 rt_input.obsDistance_3) (> 5 rt_input.obsDistance_3)) (and (>= rt_state.zone_1 rt_input.obsDistance_3) (and (= rt_state.speed_status Slow_speed) (and (= 2 rt_state.zone_0) (and ( and ( and (not (= rt_input.obsDistance_1 rt_input.obsDistance_2)) (>= rt_input.obsDistance_2 rt_input.obsDistance_0)) ( and (> rt_input.obsDistance_2 rt_input.obsDistance_0) ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 4)))) (and ( and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_1 5) (not (= rt_input.obsDistance_1 rt_input.obsDistance_2)))) (and (> rt_input.obsDistance_2 rt_input.obsDistance_0) (= 5 rt_input.obsDistance_0))))))))) ( or (and (= rt_state.speed_status Slow_speed) (and (and (>= rt_state.zone_1 rt_input.obsDistance_3) (> 5 rt_input.obsDistance_3)) (and (>= rt_state.zone_1 rt_input.obsDistance_3) (and (= rt_state.speed_status Slow_speed) (and (= 2 rt_state.zone_0) (and ( and ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 4)) ( and (not (= rt_input.obsDistance_1 rt_input.obsDistance_2)) (> rt_input.obsDistance_0 rt_input.obsDistance_2))) (and ( and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_1 5) (not (= rt_input.obsDistance_1 rt_input.obsDistance_2)))) ( and (> rt_input.obsDistance_0 4) ( and (> rt_input.obsDistance_0 rt_input.obsDistance_2) ( = 1 ( - 24 rt_input.obsDistance_0 ) ) ))))))))) ( or (and (= rt_state.speed_status Slow_speed) (and (and (> rt_state.zone_1 0) (= 1 rt_input.obsDistance_3)) (and (>= rt_state.zone_1 rt_input.obsDistance_3) (and (= rt_state.speed_status Slow_speed) (and (= 2 rt_state.zone_0) (and ( and ( and (> 8 rt_input.obsDistance_2) (> rt_input.obsDistance_2 4)) ( and (not (= rt_input.obsDistance_1 rt_input.obsDistance_2)) (> rt_input.obsDistance_0 rt_input.obsDistance_2))) (and ( and ( and (> rt_input.obsDistance_1 5) (not (= rt_input.obsDistance_1 rt_input.obsDistance_2))) (= 7 rt_input.obsDistance_1)) ( and (> rt_input.obsDistance_0 4) ( and (> rt_input.obsDistance_0 rt_input.obsDistance_2) ( not ( = 1 ( - 24 rt_input.obsDistance_0 ) ) ) ))))))))) ( or (and (= rt_state.speed_status Slow_speed) (and (and (>= rt_state.zone_0 rt_input.obsDistance_3) (> 5 rt_input.obsDistance_3)) (and (= rt_state.speed_status Slow_speed) (and (and (> 3 rt_input.obsDistance_3) (= 2 rt_state.zone_0)) (and (> rt_input.obsDistance_2 7) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and (> 3 rt_input.obsDistance_3) (and (not (= rt_state.speed_status Slow_speed)) (and (= 2 rt_state.zone_0) (and (> rt_input.obsDistance_2 rt_input.obsDistance_0) (and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_2 rt_input.obsDistance_0) (> rt_input.obsDistance_0 4)))))))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and ( and (>= rt_state.zone_0 rt_input.obsDistance_3) (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (> 5 rt_input.obsDistance_3))) (and (not (= rt_state.speed_status Slow_speed)) (and (and (> 3 rt_input.obsDistance_3) (= 2 rt_state.zone_0)) (and ( and ( and (> rt_input.obsDistance_2 4) (not (= rt_input.obsDistance_1 rt_input.obsDistance_2))) ( and (> rt_input.obsDistance_2 7) ( and (>= rt_input.obsDistance_0 rt_input.obsDistance_2) (>= rt_input.obsDistance_2 rt_input.obsDistance_3)))) (and ( and (not (= rt_input.obsDistance_1 rt_input.obsDistance_2)) (> rt_input.obsDistance_1 4)) ( and (>= rt_input.obsDistance_0 rt_input.obsDistance_2) (> rt_input.obsDistance_0 4)))))))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and ( and (>= rt_state.zone_0 rt_input.obsDistance_3) (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (> 5 rt_input.obsDistance_3))) (and (not (= rt_state.speed_status Slow_speed)) (and (and (> 3 rt_input.obsDistance_3) (= 2 rt_state.zone_0)) (and ( and ( and (> rt_input.obsDistance_2 4) (not (= rt_input.obsDistance_1 rt_input.obsDistance_2))) ( and (> 8 rt_input.obsDistance_2) ( and (>= rt_input.obsDistance_0 rt_input.obsDistance_2) (>= rt_input.obsDistance_2 rt_input.obsDistance_3)))) (and ( and ( and (not (= rt_input.obsDistance_1 rt_input.obsDistance_2)) (> (+ 9 4) rt_input.obsDistance_1)) ( and (> (+ 9 3) rt_input.obsDistance_1) (> rt_input.obsDistance_1 4))) ( and (> rt_input.obsDistance_0 4) ( and (>= rt_input.obsDistance_0 rt_input.obsDistance_2) ( > 24 rt_input.obsDistance_0 ) )))))))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and ( and (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (> 5 rt_input.obsDistance_3)) ( and (>= rt_state.zone_0 rt_input.obsDistance_3) (>= rt_input.obsDistance_3 rt_state.zone_1))) (and (>= rt_input.obsDistance_3 rt_state.zone_1) (and (not (= rt_state.speed_status Slow_speed)) (and (and (> 3 rt_input.obsDistance_3) (= 2 rt_state.zone_0)) (and ( and ( and (> rt_input.obsDistance_2 4) (not (= rt_input.obsDistance_1 rt_input.obsDistance_2))) ( and (> 8 rt_input.obsDistance_2) ( and (>= rt_input.obsDistance_0 rt_input.obsDistance_2) (>= rt_input.obsDistance_2 rt_input.obsDistance_3)))) (and ( and ( and (not (= rt_input.obsDistance_1 rt_input.obsDistance_2)) (> (+ 9 4) rt_input.obsDistance_1)) (> (- rt_input.obsDistance_1 9) 2)) ( and (> rt_input.obsDistance_0 4) ( and (>= rt_input.obsDistance_0 rt_input.obsDistance_2) ( > 24 rt_input.obsDistance_0 ) ))))))))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 5 rt_input.obsDistance_3)) (and (not (= rt_state.speed_status Slow_speed)) (and (= 2 rt_state.zone_0) (and ( and (>= rt_input.obsDistance_0 rt_input.obsDistance_2) (> rt_input.obsDistance_3 rt_input.obsDistance_2)) (and (> rt_input.obsDistance_1 8) ( and (>= rt_input.obsDistance_0 rt_input.obsDistance_2) (> rt_input.obsDistance_0 4)))))))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 5 rt_input.obsDistance_3)) (and (not (= rt_state.speed_status Stop)) (and ( and (not (= rt_state.speed_status Slow_speed)) (not (= rt_state.speed_status Stop))) (and (= 2 rt_state.zone_0) (and ( and (>= rt_input.obsDistance_0 rt_input.obsDistance_2) (> rt_input.obsDistance_3 rt_input.obsDistance_2)) (and ( and (> 9 rt_input.obsDistance_1) (> rt_input.obsDistance_1 4)) ( and (>= rt_input.obsDistance_0 rt_input.obsDistance_2) (> rt_input.obsDistance_0 4))))))))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and (> 5 rt_input.obsDistance_3) (and (not (= rt_state.speed_status Slow_speed)) (and (= 2 rt_state.zone_0) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))))) ( or (and (not (= 2 rt_state.zone_0)) (and (= 7 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and (not (= 2 rt_state.zone_0)) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4))) ( or (and (= rt_state.speed_status Midium_speed) (and (and (> rt_input.obsDistance_3 rt_input.obsDistance_0) (> 7 rt_input.obsDistance_3)) (and (= rt_state.speed_status Midium_speed) (and (> (- rt_input.obsDistance_2 9) 3) (and (> (- rt_input.obsDistance_1 9) 3) ( and (> rt_input.obsDistance_3 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (> 5 rt_input.obsDistance_0)))))))) ( or (and (= rt_state.speed_status Midium_speed) (and (> 7 rt_input.obsDistance_3) (and (= rt_state.speed_status Midium_speed) (and (> (- rt_input.obsDistance_2 9) 3) (and ( and (> rt_input.obsDistance_1 6) (> (+ 9 4) rt_input.obsDistance_1)) ( and (> rt_input.obsDistance_0 2) (> 5 rt_input.obsDistance_0))))))) ( or (and (= rt_state.speed_status Midium_speed) (and (> (- rt_input.obsDistance_3 9) 3) (and (= rt_state.speed_status Midium_speed) (and (> (+ 9 4) rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 6) ( and (> rt_input.obsDistance_0 2) (> 5 rt_input.obsDistance_0))))))) ( or (and (= rt_state.speed_status Midium_speed) (and (> (+ 9 4) rt_input.obsDistance_3) (and (= rt_state.speed_status Midium_speed) (and (= (+ 9 3) rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 6) ( and (> rt_input.obsDistance_0 2) (> 5 rt_input.obsDistance_0))))))) ( or (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and ( and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (> 3 rt_input.obsDistance_2)) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) (and (> rt_input.obsDistance_1 2) (> 3 rt_input.obsDistance_0)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 246

[Total time]
Total Conversion Time : 0 days, 0 hours, 21 minutes, 55 seconds


8.
[Original predicate]
(((rt_input.obsDistance_1 > 2) and (4 >= rt_input.obsDistance_1) and (rt_state.speed_status == Midium_speed) and !(rt_input.obsDistance_3 >= 11) and (rt_input.obsDistance_0 > 12) and (8 == rt_input.obsDistance_3)) or ((rt_input.obsDistance_1 > 2) and (4 >= rt_input.obsDistance_1) and (rt_state.speed_status == Midium_speed) and !(rt_input.obsDistance_3 >= 11) and !(rt_input.obsDistance_0 > 12)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and (rt_state.speed_status == Midium_speed) and !(rt_input.obsDistance_2 > rt_state.zone_0) and (rt_input.obsDistance_3 > 12)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and (rt_state.speed_status == Midium_speed) and !(rt_input.obsDistance_2 > rt_state.zone_0) and !(rt_input.obsDistance_3 > 12) and (8 == rt_input.obsDistance_3)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (1 >= rt_state.zone_1) and (rt_input.obsDistance_0 > 4) and (4 > rt_input.obsDistance_2)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (1 >= rt_state.zone_1) and !(rt_input.obsDistance_0 > 4)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_3 >= rt_input.obsDistance_0) and !(1 >= rt_state.zone_1) and (rt_state.speed_status == Stop) and (4 >= rt_input.obsDistance_0)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_3 >= rt_input.obsDistance_0) and !(1 >= rt_state.zone_1) and (rt_state.speed_status == Stop) and !(4 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_2 > 2) and (rt_input.obsDistance_3 > 7)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_3 >= rt_input.obsDistance_0) and !(1 >= rt_state.zone_1) and !(rt_state.speed_status == Stop) and !(4 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_2 > rt_state.zone_0) and (rt_input.obsDistance_0 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 >= 6)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_3 >= rt_input.obsDistance_0) and !(1 >= rt_state.zone_1) and !(rt_state.speed_status == Stop) and !(4 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_2 > rt_state.zone_0) and !(rt_input.obsDistance_0 == rt_input.obsDistance_3)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and (rt_input.obsDistance_3 >= 7) and !(rt_input.obsDistance_2 > 2)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_3 >= 4) and (7 == rt_input.obsDistance_1) and !(rt_input.obsDistance_2 >= rt_state.zone_1) and (rt_input.obsDistance_0 == rt_input.obsDistance_1)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_3 >= 4) and !(7 == rt_input.obsDistance_1) and (2 == rt_state.zone_1) and (12 == rt_input.obsDistance_0)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_3 >= 4) and !(7 == rt_input.obsDistance_1) and (2 == rt_state.zone_1) and !(12 == rt_input.obsDistance_0) and (1 == rt_input.obsDistance_2)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_3 >= 4) and !(7 == rt_input.obsDistance_1) and (2 == rt_state.zone_1) and !(12 == rt_input.obsDistance_0) and !(1 == rt_input.obsDistance_2) and (1 == (24 - rt_input.obsDistance_1))) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_3 >= 4) and !(7 == rt_input.obsDistance_1) and (2 == rt_state.zone_1) and !(12 == rt_input.obsDistance_0) and !(1 == rt_input.obsDistance_2) and !(1 == (24 - rt_input.obsDistance_1)) and !(11 == rt_input.obsDistance_0) and !(rt_input.obsDistance_0 == rt_input.obsDistance_1) and (rt_input.obsDistance_0 > 7) and !(rt_input.obsDistance_1 >= rt_input.obsDistance_0) and (8 == rt_input.obsDistance_1) and !(rt_input.obsDistance_0 >= 12)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_3 >= 4) and !(7 == rt_input.obsDistance_1) and (2 == rt_state.zone_1) and !(12 == rt_input.obsDistance_0) and !(1 == rt_input.obsDistance_2) and !(1 == (24 - rt_input.obsDistance_1)) and !(11 == rt_input.obsDistance_0) and !(rt_input.obsDistance_0 == rt_input.obsDistance_1) and (rt_input.obsDistance_0 > 7) and !(rt_input.obsDistance_1 >= rt_input.obsDistance_0) and !(8 == rt_input.obsDistance_1)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_3 >= 4) and !(7 == rt_input.obsDistance_1) and (2 == rt_state.zone_1) and !(12 == rt_input.obsDistance_0) and !(1 == rt_input.obsDistance_2) and !(1 == (24 - rt_input.obsDistance_1)) and !(11 == rt_input.obsDistance_0) and !(rt_input.obsDistance_0 == rt_input.obsDistance_1) and !(rt_input.obsDistance_0 > 7) and (rt_input.obsDistance_1 > rt_input.obsDistance_0) and (rt_state.zone_0 > rt_input.obsDistance_2)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_3 >= 4) and !(7 == rt_input.obsDistance_1) and (2 == rt_state.zone_1) and !(12 == rt_input.obsDistance_0) and !(1 == rt_input.obsDistance_2) and !(1 == (24 - rt_input.obsDistance_1)) and !(11 == rt_input.obsDistance_0) and !(rt_input.obsDistance_0 == rt_input.obsDistance_1) and !(rt_input.obsDistance_0 > 7) and (rt_input.obsDistance_1 > rt_input.obsDistance_0) and !(rt_state.zone_0 > rt_input.obsDistance_2) and (12 >= rt_input.obsDistance_1)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and (2 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_3 >= 4) and !(rt_input.obsDistance_0 > 4) and (rt_state.speed_status == Stop)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and (2 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_3 >= 4) and !(rt_input.obsDistance_0 > 4) and !(rt_state.speed_status == Stop) and (1 >= rt_state.zone_1)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and !(2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > 4) and !(rt_input.obsDistance_3 > 2)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and !(2 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_0 > 4) and (1 == rt_state.zone_1)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= 7) and !(2 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_0 > 4) and !(1 == rt_state.zone_1) and (rt_state.speed_status == Stop)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and !(4 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_0 > 4) and (rt_state.speed_status == Slow_speed) and (7 == rt_input.obsDistance_1)) or ((rt_input.obsDistance_1 > 2) and !(4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Midium_speed) and !(2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_0) and !(4 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_0 > 4) and !(rt_state.speed_status == Slow_speed)) or (!(rt_input.obsDistance_1 > 2) and (2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_2)) or (!(rt_input.obsDistance_1 > 2) and !(2 >= rt_input.obsDistance_0)))

[Original predicate size] 304

[Final output]
( or (and (= rt_state.speed_status Midium_speed) (and (= 8 rt_input.obsDistance_3) (and (= rt_state.speed_status Midium_speed) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> (- rt_input.obsDistance_0 9) 3))))) ( or (and (= rt_state.speed_status Midium_speed) (and (> (+ 9 2) rt_input.obsDistance_3) (and (= rt_state.speed_status Midium_speed) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> (+ 9 4) rt_input.obsDistance_0))))) ( or (and (= rt_state.speed_status Midium_speed) (and (> (- rt_input.obsDistance_3 9) 3) (and (= rt_state.speed_status Midium_speed) (and (>= rt_state.zone_0 rt_input.obsDistance_2) (and (>= rt_state.zone_0 rt_input.obsDistance_2) (> rt_input.obsDistance_1 4)))))) ( or (and (= rt_state.speed_status Midium_speed) (and (= 8 rt_input.obsDistance_3) (and (= rt_state.speed_status Midium_speed) (and (>= rt_state.zone_0 rt_input.obsDistance_2) (and (>= rt_state.zone_0 rt_input.obsDistance_2) (> rt_input.obsDistance_1 4)))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and (>= rt_input.obsDistance_3 rt_input.obsDistance_0) (and (> 2 rt_state.zone_1) (and (not (= rt_state.speed_status Midium_speed)) (and (> 4 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_0 4) ( and (> rt_input.obsDistance_0 2) (>= rt_input.obsDistance_3 rt_input.obsDistance_0))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and (>= rt_input.obsDistance_3 rt_input.obsDistance_0) (and (> 2 rt_state.zone_1) (and (not (= rt_state.speed_status Midium_speed)) (and (> rt_input.obsDistance_1 4) ( and (> 5 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (>= rt_input.obsDistance_3 rt_input.obsDistance_0)))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and (>= rt_input.obsDistance_3 rt_input.obsDistance_0) (and (> rt_state.zone_1 1) (and (= rt_state.speed_status Stop) (and ( and (not (= rt_state.speed_status Midium_speed)) (= rt_state.speed_status Stop)) (and (> rt_input.obsDistance_1 4) ( and (> 5 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (>= rt_input.obsDistance_3 rt_input.obsDistance_0))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and (>= rt_input.obsDistance_3 rt_input.obsDistance_0) (> rt_input.obsDistance_3 7)) (and (> rt_state.zone_1 1) (and (= rt_state.speed_status Stop) (and ( and (not (= rt_state.speed_status Midium_speed)) (= rt_state.speed_status Stop)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_0 4) ( and (> rt_input.obsDistance_0 2) (>= rt_input.obsDistance_3 rt_input.obsDistance_0)))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and (= rt_input.obsDistance_0 rt_input.obsDistance_3) (and (> rt_state.zone_1 1) (and (not (= rt_state.speed_status Stop)) (and ( and (not (= rt_state.speed_status Midium_speed)) (not (= rt_state.speed_status Stop))) (and (>= rt_state.zone_0 rt_input.obsDistance_2) (and (>= rt_state.zone_0 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (and (> rt_input.obsDistance_3 5) (= rt_input.obsDistance_0 rt_input.obsDistance_3)))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and (> rt_input.obsDistance_3 rt_input.obsDistance_0) (and (> rt_state.zone_1 1) (and (not (= rt_state.speed_status Stop)) (and ( and (not (= rt_state.speed_status Midium_speed)) (not (= rt_state.speed_status Stop))) (and (>= rt_state.zone_0 rt_input.obsDistance_2) (and (>= rt_state.zone_0 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) ( and ( and (> rt_input.obsDistance_0 2) (>= rt_input.obsDistance_3 rt_input.obsDistance_0)) ( and (> rt_input.obsDistance_0 4) (not (= rt_input.obsDistance_0 rt_input.obsDistance_3)))))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and (> rt_input.obsDistance_3 6) ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3)))) (and (not (= rt_state.speed_status Midium_speed)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3))) ( and (> 7 rt_input.obsDistance_3) (> rt_input.obsDistance_3 3))) (and (> rt_state.zone_1 rt_input.obsDistance_2) (and (not (= rt_state.speed_status Midium_speed)) (and ( and (> rt_state.zone_1 rt_input.obsDistance_2) (> 3 rt_input.obsDistance_2)) (and (and (= 7 rt_input.obsDistance_1) (= rt_input.obsDistance_0 rt_input.obsDistance_1)) ( and (= rt_input.obsDistance_0 rt_input.obsDistance_1) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3))) ( and (> 7 rt_input.obsDistance_3) (> rt_input.obsDistance_3 3))) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Midium_speed)) (and (> 3 rt_input.obsDistance_2) (and ( and (not (= 7 rt_input.obsDistance_1)) (> rt_input.obsDistance_1 4)) ( and (= (+ 9 3) rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3))) ( and (> 7 rt_input.obsDistance_3) (> rt_input.obsDistance_3 3))) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Midium_speed)) (and (= 1 rt_input.obsDistance_2) (and ( and (not (= 7 rt_input.obsDistance_1)) (> rt_input.obsDistance_1 4)) ( and ( not ( = 12 rt_input.obsDistance_0 ) )  ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3))) ( and (> 7 rt_input.obsDistance_3) (> rt_input.obsDistance_3 3))) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Midium_speed)) (and (or (> 1 rt_input.obsDistance_2) (= 2 rt_input.obsDistance_2)) (and ( and (> rt_input.obsDistance_1 4) ( and (not (= 7 rt_input.obsDistance_1)) ( = 1 ( - 24 rt_input.obsDistance_1 ) ) )) ( and ( not ( = 12 rt_input.obsDistance_0 ) )  ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3))) ( and (> 7 rt_input.obsDistance_3) (> rt_input.obsDistance_3 3))) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Midium_speed)) (and (or (> 1 rt_input.obsDistance_2) (= 2 rt_input.obsDistance_2)) (and (and (> rt_input.obsDistance_0 rt_input.obsDistance_1) (= 8 rt_input.obsDistance_1)) ( and ( and ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3)) ( and ( not ( = 12 rt_input.obsDistance_0 ) )  ( not ( = 11 rt_input.obsDistance_0 ) ) )) ( and ( and (not (= rt_input.obsDistance_0 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 7)) ( and (> rt_input.obsDistance_0 rt_input.obsDistance_1) (> (+ 9 3) rt_input.obsDistance_0)))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3))) ( and (> 7 rt_input.obsDistance_3) (> rt_input.obsDistance_3 3))) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Midium_speed)) (and (or (> 1 rt_input.obsDistance_2) (= 2 rt_input.obsDistance_2)) (and ( and ( and (not (= 8 rt_input.obsDistance_1)) (> rt_input.obsDistance_1 4)) ( and ( and (not (= 7 rt_input.obsDistance_1)) ( not ( = 1 ( - 24 rt_input.obsDistance_1 ) ) ) ) (> rt_input.obsDistance_0 rt_input.obsDistance_1))) ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_1) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))) ( and ( and ( not ( = 12 rt_input.obsDistance_0 ) )  ( not ( = 11 rt_input.obsDistance_0 ) ) ) ( and (not (= rt_input.obsDistance_0 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 7)))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3))) ( and (> 7 rt_input.obsDistance_3) (> rt_input.obsDistance_3 3))) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Midium_speed)) (and (> rt_state.zone_0 rt_input.obsDistance_2) (and ( and (> 3 rt_input.obsDistance_2) ( and (not (= 1 rt_input.obsDistance_2)) (> rt_state.zone_0 rt_input.obsDistance_2))) (and ( and (> rt_input.obsDistance_1 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_1 4) ( and (not (= 7 rt_input.obsDistance_1)) ( not ( = 1 ( - 24 rt_input.obsDistance_1 ) ) ) ))) ( and ( and (> rt_input.obsDistance_1 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))) ( and ( and ( not ( = 12 rt_input.obsDistance_0 ) )  ( not ( = 11 rt_input.obsDistance_0 ) ) ) ( and (not (= rt_input.obsDistance_0 rt_input.obsDistance_1)) (> 8 rt_input.obsDistance_0))))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3))) ( and (> 7 rt_input.obsDistance_3) (> rt_input.obsDistance_3 3))) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Midium_speed)) (and (>= rt_input.obsDistance_2 rt_state.zone_0) (and ( and (> 3 rt_input.obsDistance_2) ( and (not (= 1 rt_input.obsDistance_2)) (>= rt_input.obsDistance_2 rt_state.zone_0))) (and ( and ( and (> (+ 9 4) rt_input.obsDistance_1) (> rt_input.obsDistance_1 4)) ( and ( and (not (= 7 rt_input.obsDistance_1)) ( not ( = 1 ( - 24 rt_input.obsDistance_1 ) ) ) ) (> rt_input.obsDistance_1 rt_input.obsDistance_0))) ( and ( and (> rt_input.obsDistance_1 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))) ( and ( and ( not ( = 12 rt_input.obsDistance_0 ) )  ( not ( = 11 rt_input.obsDistance_0 ) ) ) ( and (not (= rt_input.obsDistance_0 rt_input.obsDistance_1)) (> 8 rt_input.obsDistance_0))))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3))) (> 4 rt_input.obsDistance_3)) (and (= rt_state.speed_status Stop) (and ( and (not (= rt_state.speed_status Midium_speed)) (= rt_state.speed_status Stop)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) ( and (> 5 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3))) (> 4 rt_input.obsDistance_3)) (and (> 2 rt_state.zone_1) (and (not (= rt_state.speed_status Stop)) (and ( and (not (= rt_state.speed_status Midium_speed)) (not (= rt_state.speed_status Stop))) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) ( and (> 5 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3)))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3))) (> 3 rt_input.obsDistance_3)) (and (not (= rt_state.speed_status Midium_speed)) (and ( and (> 5 rt_input.obsDistance_2) (> rt_input.obsDistance_2 2)) (and (> rt_input.obsDistance_1 4) (and (> rt_input.obsDistance_0 4) (> rt_input.obsDistance_0 rt_input.obsDistance_3))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and (> 7 rt_input.obsDistance_3) ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3)))) (and (= 1 rt_state.zone_1) (and (not (= rt_state.speed_status Midium_speed)) (and ( and (> 5 rt_input.obsDistance_2) (> rt_input.obsDistance_2 2)) (and (> rt_input.obsDistance_1 4) ( and (> 5 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and ( and (> 7 rt_input.obsDistance_3) ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3)))) (and (not (= 1 rt_state.zone_1)) (and (= rt_state.speed_status Stop) (and ( and (not (= rt_state.speed_status Midium_speed)) (= rt_state.speed_status Stop)) (and ( and (> 5 rt_input.obsDistance_2) (> rt_input.obsDistance_2 2)) (and (> rt_input.obsDistance_1 4) ( and (> 5 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3)))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and (= rt_state.speed_status Slow_speed) (and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (and ( and (not (= rt_state.speed_status Midium_speed)) (= rt_state.speed_status Slow_speed)) (and (> rt_input.obsDistance_2 4) (and (= 7 rt_input.obsDistance_1) ( and (> 5 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))))))))) ( or (and (not (= rt_state.speed_status Midium_speed)) (and (not (= rt_state.speed_status Slow_speed)) (and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (and ( and (not (= rt_state.speed_status Midium_speed)) (not (= rt_state.speed_status Slow_speed))) (and (> rt_input.obsDistance_2 4) (and (> rt_input.obsDistance_1 4) ( and (> 5 rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3))))))))) ( or (and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (and ( and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (> rt_input.obsDistance_2 2)) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) (and (> 3 rt_input.obsDistance_1) (> rt_input.obsDistance_0 2)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 324

[Total time]
Total Conversion Time : 0 days, 0 hours, 35 minutes, 32 seconds


9.
[Original predicate]
(((1 >= rt_input.obsDistance_1) and (2 >= rt_input.obsDistance_0) and !(13 >= rt_input.obsDistance_2) and (13 > rt_input.obsDistance_3)) or ((1 >= rt_input.obsDistance_1) and !(2 >= rt_input.obsDistance_0)) or (!(1 >= rt_input.obsDistance_1) and (2 >= rt_input.obsDistance_2) and (2 == rt_state.zone_0) and !(7 > rt_input.obsDistance_3) and !(1 >= rt_state.zone_1)))

[Original predicate size] 11

[Final output]
( or (and (> (+ 9 4) rt_input.obsDistance_3) (and (> (- rt_input.obsDistance_2 9) 4) (and (> 2 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and (> 2 rt_input.obsDistance_1) (> rt_input.obsDistance_0 2)) (and (> rt_input.obsDistance_3 6) (and (> rt_state.zone_1 1) (and (= 2 rt_state.zone_0) (and (> 3 rt_input.obsDistance_2) (> rt_input.obsDistance_1 1))))) ) ) 

[Final predicate size] 11

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 8 seconds


10.
[Original predicate]
((!(rt_input.obsDistance_2*rt_state.zone_0 < 1) and (rt_input.obsDistance_1 >= 5) and ((rt_input.obsDistance_3 - rt_state.zone_0) <= 1) and (1 == (rt_input.obsDistance_3 - rt_state.zone_1)) and !((rt_input.obsDistance_2 - rt_state.zone_0) <= 1) and !(1 >= rt_state.zone_1)) or (!(rt_input.obsDistance_2*rt_state.zone_0 < 1) and (rt_input.obsDistance_1 >= 5) and ((rt_input.obsDistance_3 - rt_state.zone_0) <= 1) and !(1 == (rt_input.obsDistance_3 - rt_state.zone_1)) and (1 == (rt_input.obsDistance_0 - 19)) and ((rt_input.obsDistance_2 - rt_state.zone_1) <= 1)) or (!(rt_input.obsDistance_2*rt_state.zone_0 < 1) and (rt_input.obsDistance_1 >= 5) and !((rt_input.obsDistance_3 - rt_state.zone_0) <= 1) and (rt_input.obsDistance_2 > rt_state.zone_1) and (rt_input.obsDistance_0 >= 5)) or (!(rt_input.obsDistance_2*rt_state.zone_0 < 1) and !(rt_input.obsDistance_1 >= 5) and !(rt_input.obsDistance_2 >= 6) and (rt_state.speed_status == Midium_speed)))

[Original predicate size] 21

[Final output]
( or (and ( and (> (+ 2 rt_state.zone_0) rt_input.obsDistance_3) (= (+ 1 rt_state.zone_1) rt_input.obsDistance_3)) (and ( and (= (+ 1 rt_state.zone_1) rt_input.obsDistance_3) (> rt_state.zone_1 1)) (and (> rt_input.obsDistance_2*rt_state.zone_0 0) (and ( and (> (+ -1 rt_input.obsDistance_2) rt_state.zone_0) ( and (> rt_input.obsDistance_2*rt_state.zone_0 0) (> (+ 2 rt_state.zone_0) rt_input.obsDistance_3))) (and ( and (> rt_input.obsDistance_2*rt_state.zone_0 0) (> (+ -1 rt_input.obsDistance_2) rt_state.zone_0)) (> rt_input.obsDistance_1 4)))))) ( or (and ( and (> (+ 2 rt_state.zone_0) rt_input.obsDistance_3) ( not ( = 1 ( - rt_input.obsDistance_3 rt_state.zone_1 ) ) ) ) (and ( and ( not ( = 1 ( - rt_input.obsDistance_3 rt_state.zone_1 ) ) )  (> (+ 2 rt_state.zone_1) rt_input.obsDistance_2)) (and (> rt_input.obsDistance_2*rt_state.zone_0 0) (and ( and (> rt_input.obsDistance_2*rt_state.zone_0 0) (> (+ 2 rt_state.zone_0) rt_input.obsDistance_3)) (and ( and (> rt_input.obsDistance_2*rt_state.zone_0 0) (> (+ 2 rt_state.zone_1) rt_input.obsDistance_2)) (and (> rt_input.obsDistance_1 4) ( = 1 ( - rt_input.obsDistance_0 19 ) ) )))))) ( or (and (> (+ -1 rt_input.obsDistance_3) rt_state.zone_0) (and (> rt_input.obsDistance_2 rt_state.zone_1) (and (> rt_input.obsDistance_2*rt_state.zone_0 0) (and ( and (> rt_input.obsDistance_2*rt_state.zone_0 0) (> (+ -1 rt_input.obsDistance_3) rt_state.zone_0)) (and ( and (> rt_input.obsDistance_2*rt_state.zone_0 0) (> rt_input.obsDistance_2 rt_state.zone_1)) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))))) (and (= rt_state.speed_status Midium_speed) (and (> rt_input.obsDistance_2*rt_state.zone_0 0) (and (= rt_state.speed_status Midium_speed) (and ( and (> rt_input.obsDistance_2*rt_state.zone_0 0) (> 6 rt_input.obsDistance_2)) (> 5 rt_input.obsDistance_1))))) ) ) ) 

[Final predicate size] 37

[Total time]
Total Conversion Time : 0 days, 0 hours, 2 minutes, 56 seconds


11.
[Original predicate]
((!(1 >= rt_state.zone_0) and !(1 >= rt_state.zone_1) and (1 >= rt_input.obsDistance_2) and (rt_state.speed_status == Slow_speed) and (1 == rt_input.obsDistance_2)) or (!(1 >= rt_state.zone_0) and !(1 >= rt_state.zone_1) and !(1 >= rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_3) and (2 == rt_input.obsDistance_2)) or (!(1 >= rt_state.zone_0) and !(1 >= rt_state.zone_1) and !(1 >= rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_3) and !(2 == rt_input.obsDistance_2) and !(rt_state.speed_status == Slow_speed)) or (!(1 >= rt_state.zone_0) and !(1 >= rt_state.zone_1) and !(1 >= rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_3) and !(2 == rt_input.obsDistance_2)))

[Original predicate size] 21

[Final output]
( or (and (= rt_state.speed_status Slow_speed) (and (> rt_state.zone_1 1) (and (= rt_state.speed_status Slow_speed) (and (> rt_state.zone_0 1) (= 1 rt_input.obsDistance_2))))) ( or (and (> 3 rt_input.obsDistance_3) (and (> rt_state.zone_1 1) (and (> rt_state.zone_0 1) (= 2 rt_input.obsDistance_2)))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and (> 3 rt_input.obsDistance_3) (and (> rt_state.zone_1 1) (and (not (= rt_state.speed_status Slow_speed)) (and (> rt_state.zone_0 1) (> rt_input.obsDistance_2 2)))))) (and (> rt_input.obsDistance_3 2) (and (> rt_state.zone_1 1) (and (> rt_state.zone_0 1) (> rt_input.obsDistance_2 2)))) ) ) ) 

[Final predicate size] 19

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 12 seconds


12.
[Original predicate]
(((2 >= rt_input.obsDistance_0) and (2 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Slow_speed)) or ((2 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1)) or (!(2 >= rt_input.obsDistance_0) and (7 > rt_input.obsDistance_3) and (2 == rt_state.zone_0) and !(1 >= rt_state.zone_1) and (7 > rt_input.obsDistance_2) and (rt_state.speed_status == Fast_speed) and !(2 == rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_0) and (7 > rt_input.obsDistance_3) and (2 == rt_state.zone_0) and !(1 >= rt_state.zone_1) and !(7 > rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_3)))

[Original predicate size] 18

[Final output]
( or (and (not (= rt_state.speed_status Slow_speed)) (and (not (= rt_state.speed_status Slow_speed)) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and (> rt_input.obsDistance_1 2) (> 3 rt_input.obsDistance_0)) ( or (and ( and (> 7 rt_input.obsDistance_3) (not (= 2 rt_input.obsDistance_3))) (and (> rt_state.zone_1 1) (and (= rt_state.speed_status Fast_speed) (and (= rt_state.speed_status Fast_speed) (and (= 2 rt_state.zone_0) (and (> 7 rt_input.obsDistance_2) (> rt_input.obsDistance_0 2))))))) (and (> 3 rt_input.obsDistance_3) (and (> rt_state.zone_1 1) (and (= 2 rt_state.zone_0) (and (> rt_input.obsDistance_2 6) (> rt_input.obsDistance_0 2))))) ) ) ) 

[Final predicate size] 19

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 22 seconds


13.
[Original predicate]
((!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_1 > rt_state.zone_0) and (1 >= rt_state.zone_1) and (3 == rt_input.obsDistance_0)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_1 > rt_state.zone_0) and (1 >= rt_state.zone_1) and !(3 == rt_input.obsDistance_0) and (1 == (rt_input.obsDistance_0 - 3))) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_1 > rt_state.zone_0) and (1 >= rt_state.zone_1) and !(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_input.obsDistance_1 >= 7) and (1 == rt_input.obsDistance_3) and (1 == rt_input.obsDistance_2) and !(3 >= rt_input.obsDistance_0)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_1 > rt_state.zone_0) and (1 >= rt_state.zone_1) and !(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_input.obsDistance_1 >= 7) and (1 == rt_input.obsDistance_3) and !(1 == rt_input.obsDistance_2)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_1 > rt_state.zone_0) and (1 >= rt_state.zone_1) and !(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_input.obsDistance_1 >= 7) and !(1 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 >= 12) and (rt_input.obsDistance_3 > rt_input.obsDistance_1)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_1 > rt_state.zone_0) and (1 >= rt_state.zone_1) and !(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_input.obsDistance_1 >= 7) and !(1 == rt_input.obsDistance_3) and !(rt_input.obsDistance_0 >= 12) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_2) and (rt_input.obsDistance_2 > rt_input.obsDistance_1) and (7 >= rt_input.obsDistance_0)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_1 > rt_state.zone_0) and !(1 >= rt_state.zone_1) and (rt_state.speed_status == Stop) and (rt_input.obsDistance_0 <= 4) and !(rt_state.zone_1 >= rt_input.obsDistance_0)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_1 > rt_state.zone_0) and !(1 >= rt_state.zone_1) and (rt_state.speed_status == Stop) and !(rt_input.obsDistance_0 <= 4) and (rt_input.obsDistance_2 <= 4) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(rt_state.zone_0 >= rt_input.obsDistance_2) and (rt_state.zone_1 >= rt_input.obsDistance_3)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_1 > rt_state.zone_0) and !(1 >= rt_state.zone_1) and (rt_state.speed_status == Stop) and !(rt_input.obsDistance_0 <= 4) and (rt_input.obsDistance_2 <= 4) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and (rt_input.obsDistance_3 >= 7) and !(rt_input.obsDistance_2 > rt_state.zone_0)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_1 > rt_state.zone_0) and !(1 >= rt_state.zone_1) and !(rt_state.speed_status == Stop) and !(rt_input.obsDistance_0 <= 4) and (rt_input.obsDistance_2 <= 4) and !(3 == rt_input.obsDistance_3) and (rt_input.obsDistance_3 >= rt_input.obsDistance_2) and (rt_input.obsDistance_3 >= 6) and (rt_state.zone_0 >= rt_input.obsDistance_2)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_1 > rt_state.zone_0) and !(1 >= rt_state.zone_1) and !(rt_state.speed_status == Stop) and !(rt_input.obsDistance_0 <= 4) and (rt_input.obsDistance_2 <= 4) and !(3 == rt_input.obsDistance_3) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_2) and (rt_input.obsDistance_2 > rt_state.zone_0)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and !(rt_input.obsDistance_1 > rt_state.zone_0) and (rt_input.obsDistance_3 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > 2)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and !(rt_input.obsDistance_1 > rt_state.zone_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_2) and (rt_input.obsDistance_2 > 2)) or (!(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and !(rt_input.obsDistance_1 > rt_state.zone_0) and !(rt_input.obsDistance_3 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > 2) and (rt_input.obsDistance_0 > 2)))

[Original predicate size] 116

[Final output]
( or (and (> 2 rt_state.zone_1) (and (> rt_input.obsDistance_1 rt_state.zone_0) (and ( and (> rt_input.obsDistance_1 rt_state.zone_0) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) (= 3 rt_input.obsDistance_0)))) ( or (and (> 2 rt_state.zone_1) (and (> rt_input.obsDistance_1 rt_state.zone_0) (and ( and (> rt_input.obsDistance_1 rt_state.zone_0) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) (= 4 rt_input.obsDistance_0)))) ( or (and (= 1 rt_input.obsDistance_3) (and (> 2 rt_state.zone_1) (and (> rt_input.obsDistance_1 rt_state.zone_0) (and (= 1 rt_input.obsDistance_2) (and ( and ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))) ( and (> rt_input.obsDistance_1 rt_state.zone_0) (> 7 rt_input.obsDistance_1))) (> rt_input.obsDistance_0 4)))))) ( or (and (= 1 rt_input.obsDistance_3) (and (> 2 rt_state.zone_1) (and (> rt_input.obsDistance_1 rt_state.zone_0) (and (not (= 1 rt_input.obsDistance_2)) (and ( and ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))) ( and (> rt_input.obsDistance_1 rt_state.zone_0) (> 7 rt_input.obsDistance_1))) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0)))))))) ( or (and ( and (not (= 1 rt_input.obsDistance_3)) (> rt_input.obsDistance_3 rt_input.obsDistance_1)) (and (> 2 rt_state.zone_1) (and (> rt_input.obsDistance_1 rt_state.zone_0) (and ( and ( and (> rt_input.obsDistance_1 rt_state.zone_0) (> 7 rt_input.obsDistance_1)) ( and (> rt_input.obsDistance_3 rt_input.obsDistance_1) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))))) (> (- rt_input.obsDistance_0 9) 2))))) ( or (and ( and (not (= 1 rt_input.obsDistance_3)) (> rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (> 2 rt_state.zone_1) (and (> rt_input.obsDistance_1 rt_state.zone_0) (and (and (> rt_input.obsDistance_2 rt_input.obsDistance_1) (> rt_input.obsDistance_2 rt_input.obsDistance_3)) (and ( and ( and (> rt_input.obsDistance_1 rt_state.zone_0) (> 7 rt_input.obsDistance_1)) ( and (> rt_input.obsDistance_2 rt_input.obsDistance_1) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))))) ( and ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0))) (> 8 rt_input.obsDistance_0))))))) ( or (and ( and (> rt_state.zone_1 1) (> rt_input.obsDistance_0 rt_state.zone_1)) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (> rt_input.obsDistance_1 rt_state.zone_0) (and ( and (> rt_input.obsDistance_1 rt_state.zone_0) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) ( and (> 5 rt_input.obsDistance_0) (> rt_input.obsDistance_0 rt_state.zone_1))))))) ( or (and (and (>= rt_state.zone_1 rt_input.obsDistance_3) (> rt_input.obsDistance_2 rt_input.obsDistance_3)) (and ( and (> rt_state.zone_1 1) (>= rt_state.zone_1 rt_input.obsDistance_3)) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (and (> rt_input.obsDistance_1 rt_state.zone_0) (> rt_input.obsDistance_2 rt_state.zone_0)) (and ( and (> rt_input.obsDistance_2 rt_state.zone_0) ( and (> 5 rt_input.obsDistance_2) (> rt_input.obsDistance_2 rt_input.obsDistance_3))) (and ( and (> rt_input.obsDistance_1 rt_state.zone_0) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) (> rt_input.obsDistance_0 4)))))))) ( or (and ( and (>= rt_input.obsDistance_3 rt_input.obsDistance_2) (> rt_input.obsDistance_3 6)) (and (> rt_state.zone_1 1) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and ( and (> rt_input.obsDistance_1 rt_state.zone_0) (>= rt_state.zone_0 rt_input.obsDistance_2)) (and ( and (>= rt_state.zone_0 rt_input.obsDistance_2) ( and (> 5 rt_input.obsDistance_2) (>= rt_input.obsDistance_3 rt_input.obsDistance_2))) (and ( and (> rt_input.obsDistance_1 rt_state.zone_0) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) (> rt_input.obsDistance_0 4)))))))) ( or (and ( and (> rt_input.obsDistance_3 5) ( and (not (= 3 rt_input.obsDistance_3)) (>= rt_input.obsDistance_3 rt_input.obsDistance_2))) (and (> rt_state.zone_1 1) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and ( and (> rt_input.obsDistance_1 rt_state.zone_0) (>= rt_state.zone_0 rt_input.obsDistance_2)) (and ( and (>= rt_state.zone_0 rt_input.obsDistance_2) ( and (> 5 rt_input.obsDistance_2) (>= rt_input.obsDistance_3 rt_input.obsDistance_2))) (and ( and (> rt_input.obsDistance_1 rt_state.zone_0) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) (> rt_input.obsDistance_0 4)))))))) ( or (and ( and (not (= 3 rt_input.obsDistance_3)) (> rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (> rt_state.zone_1 1) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and (and (> rt_input.obsDistance_1 rt_state.zone_0) (> rt_input.obsDistance_2 rt_state.zone_0)) (and ( and (> rt_input.obsDistance_2 rt_state.zone_0) ( and (> 5 rt_input.obsDistance_2) (> rt_input.obsDistance_2 rt_input.obsDistance_3))) (and ( and (> rt_input.obsDistance_1 rt_state.zone_0) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) (> rt_input.obsDistance_0 4)))))))) ( or (and (>= rt_input.obsDistance_3 rt_input.obsDistance_2) (and (>= rt_state.zone_0 rt_input.obsDistance_1) (and (>= rt_input.obsDistance_3 rt_input.obsDistance_2) (and ( and (>= rt_state.zone_0 rt_input.obsDistance_1) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) (> rt_input.obsDistance_0 2))))) ( or (and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (and (>= rt_state.zone_0 rt_input.obsDistance_1) (and ( and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (> rt_input.obsDistance_2 2)) ( and (>= rt_state.zone_0 rt_input.obsDistance_1) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))))))) (and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (and (>= rt_state.zone_0 rt_input.obsDistance_1) (and (and (> 3 rt_input.obsDistance_2) (> rt_input.obsDistance_2 rt_input.obsDistance_3)) (and ( and (>= rt_state.zone_0 rt_input.obsDistance_1) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) (> rt_input.obsDistance_0 2))))) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 145

[Total time]
Total Conversion Time : 0 days, 0 hours, 14 minutes, 7 seconds

14.
[Original predicate]
((!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and (rt_state.speed_status == Stop) and (3 == rt_input.obsDistance_1)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and (rt_state.speed_status == Stop) and !(3 == rt_input.obsDistance_1) and (1 == (rt_input.obsDistance_1 - 3))) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and (rt_state.speed_status == Stop) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_0 > rt_state.zone_1) and (rt_input.obsDistance_2 >= 18) and (2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > 19)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and (rt_state.speed_status == Stop) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_0 > rt_state.zone_1) and !(rt_input.obsDistance_2 >= 18) and (rt_input.obsDistance_3 <= 4) and (rt_input.obsDistance_3 > rt_input.obsDistance_2) and (rt_input.obsDistance_2 == rt_state.zone_0)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and (rt_state.speed_status == Stop) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_0 > rt_state.zone_1) and !(rt_input.obsDistance_2 >= 18) and (rt_input.obsDistance_3 <= 4) and (rt_input.obsDistance_3 > rt_input.obsDistance_2) and !(rt_input.obsDistance_2 == rt_state.zone_0) and (12 == rt_input.obsDistance_0) and !(1 > rt_input.obsDistance_2)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and (rt_state.speed_status == Stop) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and (rt_input.obsDistance_0 > rt_state.zone_1) and !(rt_input.obsDistance_2 >= 18) and (rt_input.obsDistance_3 <= 4) and !(rt_input.obsDistance_3 > rt_input.obsDistance_2) and (rt_input.obsDistance_2 >= 6) and (rt_state.zone_0 >= rt_input.obsDistance_3)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and (rt_state.speed_status == Stop) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and !(rt_input.obsDistance_0 > rt_state.zone_1) and ((rt_input.obsDistance_1 - rt_input.obsDistance_2) >= -1) and (rt_input.obsDistance_3 == rt_state.zone_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_2)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and (rt_state.speed_status == Stop) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and !(rt_input.obsDistance_0 > rt_state.zone_1) and ((rt_input.obsDistance_1 - rt_input.obsDistance_2) >= -1) and !(rt_input.obsDistance_3 == rt_state.zone_0)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and (rt_state.speed_status == Stop) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and !(rt_input.obsDistance_0 > rt_state.zone_1) and !((rt_input.obsDistance_1 - rt_input.obsDistance_2) >= -1) and (rt_input.obsDistance_3 > rt_input.obsDistance_2)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and (rt_state.speed_status == Stop) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and !(rt_input.obsDistance_0 > rt_state.zone_1) and !((rt_input.obsDistance_1 - rt_input.obsDistance_2) >= -1) and !(rt_input.obsDistance_3 > rt_input.obsDistance_2) and (rt_input.obsDistance_2 > 2) and (7 == rt_input.obsDistance_1)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and (rt_state.speed_status == Stop) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and !(rt_input.obsDistance_0 > rt_state.zone_1) and !((rt_input.obsDistance_1 - rt_input.obsDistance_2) >= -1) and !(rt_input.obsDistance_3 > rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > 2)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_state.speed_status == Stop) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > 2) and !(rt_input.obsDistance_1 <= 4) and (rt_input.obsDistance_3 <= 4) and (rt_input.obsDistance_2 >= 6) and (2 >= rt_input.obsDistance_3)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_state.speed_status == Stop) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > 2) and !(rt_input.obsDistance_1 <= 4) and (rt_input.obsDistance_3 <= 4) and !(rt_input.obsDistance_2 >= 6) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_3 > 2) and !(1 == (rt_input.obsDistance_2 - rt_state.zone_0))) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_state.speed_status == Stop) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_2 > rt_state.zone_1) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and !(rt_state.zone_1 >= rt_input.obsDistance_1)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_state.speed_status == Stop) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_2 > rt_state.zone_1) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_3)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_state.speed_status == Stop) and (2 == rt_state.zone_0) and !(rt_input.obsDistance_0 > 2) and !(rt_input.obsDistance_2 > rt_state.zone_1)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_state.speed_status == Stop) and !(2 == rt_state.zone_0) and (3 == rt_input.obsDistance_1)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_state.speed_status == Stop) and !(2 == rt_state.zone_0) and !(3 == rt_input.obsDistance_1) and (1 == (rt_input.obsDistance_1 - 3))) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_state.speed_status == Stop) and !(2 == rt_state.zone_0) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and ((rt_input.obsDistance_2 - rt_state.zone_0) <= 1) and (3 >= rt_input.obsDistance_0)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_state.speed_status == Stop) and !(2 == rt_state.zone_0) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and !((rt_input.obsDistance_2 - rt_state.zone_0) <= 1) and (rt_input.obsDistance_3 > rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_0)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_state.speed_status == Stop) and !(2 == rt_state.zone_0) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and !((rt_input.obsDistance_2 - rt_state.zone_0) <= 1) and !(rt_input.obsDistance_3 > rt_input.obsDistance_2) and !(3 >= rt_input.obsDistance_1) and (rt_input.obsDistance_0 > 2) and (2 == rt_input.obsDistance_3) and (rt_input.obsDistance_2 >= 6)) or (!(3 == rt_input.obsDistance_0) and !(1 == (rt_input.obsDistance_0 - 3)) and !(rt_state.speed_status == Stop) and !(2 == rt_state.zone_0) and !(3 == rt_input.obsDistance_1) and !(1 == (rt_input.obsDistance_1 - 3)) and !((rt_input.obsDistance_2 - rt_state.zone_0) <= 1) and !(rt_input.obsDistance_3 > rt_input.obsDistance_2) and !(3 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_0 > 2)))

[Original predicate size] 186

[Final output]
( or (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (= 3 rt_input.obsDistance_1) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0)))))) ( or (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (= 4 rt_input.obsDistance_1) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0)))))) ( or (and (> 3 rt_input.obsDistance_3) (and (> rt_input.obsDistance_0 rt_state.zone_1) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (> (- rt_input.obsDistance_2 9) 8) (and ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))) ( and ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0))) ( and (> rt_input.obsDistance_0 rt_state.zone_1) ( not ( > rt_input.obsDistance_0 19 ) ) )))))))) ( or (and (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 5 rt_input.obsDistance_3)) (and (> rt_input.obsDistance_0 rt_state.zone_1) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (= rt_input.obsDistance_2 rt_state.zone_0) (and ( and (= rt_input.obsDistance_2 rt_state.zone_0) ( and (> (+ 9 9) rt_input.obsDistance_2) (> rt_input.obsDistance_3 rt_input.obsDistance_2))) (and ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))) ( and (> rt_input.obsDistance_0 rt_state.zone_1) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0))))))))))) ( or (and (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 5 rt_input.obsDistance_3)) (and (> rt_input.obsDistance_0 rt_state.zone_1) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (not (= rt_input.obsDistance_2 rt_state.zone_0)) (and ( and ( and (> (+ 9 9) rt_input.obsDistance_2) (> rt_input.obsDistance_3 rt_input.obsDistance_2)) ( and (not (= rt_input.obsDistance_2 rt_state.zone_0)) (> rt_input.obsDistance_2 0))) (and ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))) ( and ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0))) ( and (> rt_input.obsDistance_0 rt_state.zone_1) (= (+ 9 3) rt_input.obsDistance_0)))))))))) ( or (and ( and (>= rt_state.zone_0 rt_input.obsDistance_3) ( and (> 5 rt_input.obsDistance_3) (>= rt_input.obsDistance_2 rt_input.obsDistance_3))) (and (> rt_input.obsDistance_0 rt_state.zone_1) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (>= rt_state.zone_0 rt_input.obsDistance_3) (and ( and (> rt_input.obsDistance_2 5) ( and (> (+ 9 9) rt_input.obsDistance_2) (>= rt_input.obsDistance_2 rt_input.obsDistance_3))) (and ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))) ( and (> rt_input.obsDistance_0 rt_state.zone_1) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0))))))))))) ( or (and (= rt_state.zone_0 rt_input.obsDistance_3) (and (>= rt_state.zone_1 rt_input.obsDistance_0) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (= rt_state.zone_0 rt_input.obsDistance_3) (and (>= rt_input.obsDistance_1 rt_input.obsDistance_2) (and ( and ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))) (>= rt_input.obsDistance_1 rt_input.obsDistance_2)) ( and (>= rt_state.zone_1 rt_input.obsDistance_0) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0))))))))))) ( or (and (not (= rt_state.zone_0 rt_input.obsDistance_3)) (and (>= rt_state.zone_1 rt_input.obsDistance_0) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and (not (= rt_state.zone_0 rt_input.obsDistance_3)) (and (> (+ 2 rt_input.obsDistance_1) rt_input.obsDistance_2) (and ( and (> (+ 2 rt_input.obsDistance_1) rt_input.obsDistance_2) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) ( and (>= rt_state.zone_1 rt_input.obsDistance_0) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0))))))))))) ( or (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (and (>= rt_state.zone_1 rt_input.obsDistance_0) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and ( and (> (+ -1 rt_input.obsDistance_2) rt_input.obsDistance_1) (> rt_input.obsDistance_3 rt_input.obsDistance_2)) (and ( and (> (+ -1 rt_input.obsDistance_2) rt_input.obsDistance_1) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) ( and (>= rt_state.zone_1 rt_input.obsDistance_0) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0)))))))))) ( or (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (>= rt_state.zone_1 rt_input.obsDistance_0) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and ( and (> rt_input.obsDistance_2 2) ( and (> (+ -1 rt_input.obsDistance_2) rt_input.obsDistance_1) (>= rt_input.obsDistance_2 rt_input.obsDistance_3))) (and (and (> rt_input.obsDistance_2 8) (= 7 rt_input.obsDistance_1)) ( and (>= rt_state.zone_1 rt_input.obsDistance_0) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0)))))))))) ( or (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (>= rt_state.zone_1 rt_input.obsDistance_0) (and (= rt_state.speed_status Stop) (and (= rt_state.speed_status Stop) (and ( and (> 3 rt_input.obsDistance_2) ( and (> (+ -1 rt_input.obsDistance_2) rt_input.obsDistance_1) (>= rt_input.obsDistance_2 rt_input.obsDistance_3))) (and ( and (> (+ -1 rt_input.obsDistance_2) rt_input.obsDistance_1) ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1)))) ( and (>= rt_state.zone_1 rt_input.obsDistance_0) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0)))))))))) ( or (and (> 3 rt_input.obsDistance_3) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and (= 2 rt_state.zone_0) (and (> rt_input.obsDistance_2 5) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))))) ( or (and ( and (> rt_input.obsDistance_3 2) (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 5 rt_input.obsDistance_3))) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and ( and (= 2 rt_state.zone_0) ( not ( = 1 ( - rt_input.obsDistance_2 rt_state.zone_0 ) ) ) ) (and ( and ( not ( = 1 ( - rt_input.obsDistance_2 rt_state.zone_0 ) ) )  ( and (> 6 rt_input.obsDistance_2) (> rt_input.obsDistance_3 rt_input.obsDistance_2))) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))))) ( or (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (and (> rt_input.obsDistance_1 rt_state.zone_1) (> rt_input.obsDistance_2 rt_state.zone_1)) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and (= 2 rt_state.zone_0) (and ( and (> rt_input.obsDistance_2 rt_state.zone_1) (>= rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (> rt_input.obsDistance_1 rt_state.zone_1) (> 3 rt_input.obsDistance_0)))))))) ( or (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_2 rt_state.zone_1) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and (= 2 rt_state.zone_0) (and (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> rt_input.obsDistance_2 rt_state.zone_1)) (> 3 rt_input.obsDistance_0))))))) ( or (and (>= rt_state.zone_1 rt_input.obsDistance_2) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and (= 2 rt_state.zone_0) (and (>= rt_state.zone_1 rt_input.obsDistance_2) (> 3 rt_input.obsDistance_0)))))) ( or (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and (not (= 2 rt_state.zone_0)) (and (= 3 rt_input.obsDistance_1) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0))))))) ( or (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and (not (= 2 rt_state.zone_0)) (and (= 4 rt_input.obsDistance_1) ( and (not (= 3 rt_input.obsDistance_0)) (not (= 4 rt_input.obsDistance_0))))))) ( or (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and ( and (not (= 2 rt_state.zone_0)) (> (+ 2 rt_state.zone_0) rt_input.obsDistance_2)) (and (> (+ 2 rt_state.zone_0) rt_input.obsDistance_2) (and ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))) (> 3 rt_input.obsDistance_0)))))) ( or (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and ( and (not (= 2 rt_state.zone_0)) (> (+ -1 rt_input.obsDistance_2) rt_state.zone_0)) (and ( and (> (+ -1 rt_input.obsDistance_2) rt_state.zone_0) (> rt_input.obsDistance_3 rt_input.obsDistance_2)) (and ( and (not (= 3 rt_input.obsDistance_1)) (not (= 4 rt_input.obsDistance_1))) (> 3 rt_input.obsDistance_0))))))) ( or (and (and (> rt_input.obsDistance_2 1) (= 2 rt_input.obsDistance_3)) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and ( and (not (= 2 rt_state.zone_0)) (> (+ -1 rt_input.obsDistance_2) rt_state.zone_0)) (and ( and (> rt_input.obsDistance_2 5) ( and (> (+ -1 rt_input.obsDistance_2) rt_state.zone_0) (>= rt_input.obsDistance_2 rt_input.obsDistance_3))) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))))) (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (not (= rt_state.speed_status Stop)) (and (not (= rt_state.speed_status Stop)) (and ( and (not (= 2 rt_state.zone_0)) (> (+ -1 rt_input.obsDistance_2) rt_state.zone_0)) (and ( and (> (+ -1 rt_input.obsDistance_2) rt_state.zone_0) (>= rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (> rt_input.obsDistance_1 4) (> 3 rt_input.obsDistance_0))))))) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 220

[Total time]
Total Conversion Time : 0 days, 0 hours, 18 minutes, 13 seconds


15.
[Original predicate]
((!(1 >= rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and (14 > rt_input.obsDistance_1) and !(rt_state.speed_status == Fast_speed) and (2 == rt_state.zone_1) and (19 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_1) and !(14 > rt_input.obsDistance_3)) or (!(1 >= rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and (14 > rt_input.obsDistance_1) and !(rt_state.speed_status == Fast_speed) and (2 == rt_state.zone_1) and !(19 > rt_input.obsDistance_2)) or (!(1 >= rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and !(14 > rt_input.obsDistance_1)))

[Original predicate size] 20

[Final output]
( or (and (> (- rt_input.obsDistance_3 9) 4) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Fast_speed)) (and (not (= rt_state.speed_status Fast_speed)) (and (> rt_state.zone_0 1) (and ( and (> rt_input.obsDistance_2 2) (>= (+ 9 9) rt_input.obsDistance_2)) ( and (> (+ 9 5) rt_input.obsDistance_1) (> rt_input.obsDistance_1 2)))))))) ( or (and (> rt_input.obsDistance_3 2) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Fast_speed)) (and (not (= rt_state.speed_status Fast_speed)) (and (> rt_state.zone_0 1) (and (> (- rt_input.obsDistance_2 9) 9) (> (+ 9 5) rt_input.obsDistance_1))))))) (and (> rt_input.obsDistance_3 2) (and (> rt_state.zone_0 1) (and (> rt_input.obsDistance_2 2) (> (- rt_input.obsDistance_1 9) 4)))) ) ) 

[Final predicate size] 20

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 40 seconds


16.
[Original predicate]
(((1 == rt_input.obsDistance_3) and (rt_state.speed_status == Fast_speed)) or ((1 == rt_input.obsDistance_3) and !(rt_state.speed_status == Fast_speed) and !(8 > rt_input.obsDistance_2) and !(1 >= rt_state.zone_0) and (2 == rt_state.zone_1)))

[Original predicate size] 7

[Final output]
( or (and (= 1 rt_input.obsDistance_3) (and (= rt_state.speed_status Fast_speed) (= rt_state.speed_status Fast_speed))) (and (= 1 rt_input.obsDistance_3) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Fast_speed)) (and (not (= rt_state.speed_status Fast_speed)) (and (> rt_state.zone_0 1) (> rt_input.obsDistance_2 7)))))) ) 

[Final predicate size] 9

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 5 seconds


17.
[Original predicate]
((2 == rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and (2 == rt_state.zone_1) and !(9 > rt_input.obsDistance_0) and !(rt_state.speed_status == Fast_speed))

[Original predicate size] 6

[Final output]
(and (> rt_input.obsDistance_3 2) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Fast_speed)) (and (not (= rt_state.speed_status Fast_speed)) (and (= 2 rt_state.zone_0) (and (> rt_input.obsDistance_2 2) (> rt_input.obsDistance_0 8))))))) 

[Final predicate size] 7

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 4 seconds


18.
[Original predicate]
((!(1 >= rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and (14 > rt_input.obsDistance_1) and !(rt_state.speed_status == Fast_speed) and (2 == rt_state.zone_1) and (19 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_1) and !(14 > rt_input.obsDistance_3)) or (!(1 >= rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and (14 > rt_input.obsDistance_1) and !(rt_state.speed_status == Fast_speed) and (2 == rt_state.zone_1) and !(19 > rt_input.obsDistance_2)) or (!(1 >= rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and !(14 > rt_input.obsDistance_1)))

[Original predicate size] 20

[Final output]
( or (and (> (- rt_input.obsDistance_3 9) 4) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Fast_speed)) (and (not (= rt_state.speed_status Fast_speed)) (and (> rt_state.zone_0 1) (and ( and (> rt_input.obsDistance_2 2) (>= (+ 9 9) rt_input.obsDistance_2)) ( and (> (+ 9 5) rt_input.obsDistance_1) (> rt_input.obsDistance_1 2)))))))) ( or (and (> rt_input.obsDistance_3 2) (and (= 2 rt_state.zone_1) (and (not (= rt_state.speed_status Fast_speed)) (and (not (= rt_state.speed_status Fast_speed)) (and (> rt_state.zone_0 1) (and (> (- rt_input.obsDistance_2 9) 9) (> (+ 9 5) rt_input.obsDistance_1))))))) (and (> rt_input.obsDistance_3 2) (and (> rt_state.zone_0 1) (and (> rt_input.obsDistance_2 2) (> (- rt_input.obsDistance_1 9) 4)))) ) ) 

[Final predicate size] 20

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 40 seconds



