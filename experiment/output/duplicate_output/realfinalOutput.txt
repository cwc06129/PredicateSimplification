1.
[Original predicate]
((!(rt_input.number > 7) and (rt_input.number > 1) and !(4 == rt_input.number) and (rt_input.number >= 6) and !(7 > rt_input.number)) or (!(rt_input.number > 7) and (rt_input.number > 1) and !(4 == rt_input.number) and !(rt_input.number >= 6)))

[Original predicate size] 9

[Final output]
( or (= 7 rt_input.number) (and (or (> 4 rt_input.number) (= 5 rt_input.number)) (> rt_input.number 1)) ) 

[Final predicate size] 4

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 18 seconds


2.
[Original predicate]
(((2 >= rt_input.n1) and !(1 == (4 - rt_input.n2)) and (4 >= rt_input.n2)) or ((2 >= rt_input.n1) and !(1 == (4 - rt_input.n2)) and !(4 >= rt_input.n2) and (rt_input.n2 >= 8)) or ((2 >= rt_input.n1) and !(1 == (4 - rt_input.n2)) and !(4 >= rt_input.n2) and !(rt_input.n2 >= 8) and (6 == rt_input.n2)) or (!(2 >= rt_input.n1) and (6 == rt_input.n1) and !(rt_input.n1 == rt_input.n2) and !(1 == (4 - rt_input.n2)) and (9 > rt_input.n2)) or (!(2 >= rt_input.n1) and !(6 == rt_input.n1) and (6 == rt_input.n2) and !(4 > rt_input.n1) and !(9 == rt_input.n1)) or (!(2 >= rt_input.n1) and !(6 == rt_input.n1) and !(6 == rt_input.n2) and (2 >= rt_input.n2) and (1 == (9 - rt_input.n1))) or (!(2 >= rt_input.n1) and !(6 == rt_input.n1) and !(6 == rt_input.n2) and (2 >= rt_input.n2) and !(1 == (9 - rt_input.n1)) and (4 == rt_input.n1)))

[Original predicate size] 33

[Final output]
( or (and (or (> 3 rt_input.n2) (= 4 rt_input.n2)) (> 3 rt_input.n1)) ( or (and (> rt_input.n2 7) (> 3 rt_input.n1)) ( or (and (= 6 rt_input.n2) (> 3 rt_input.n1)) ( or (and ( and (> 9 rt_input.n2) (not (or (= 3 rt_input.n2) (= rt_input.n1 rt_input.n2)))) (and (not (= rt_input.n1 rt_input.n2)) (= 6 rt_input.n1))) ( or (and (= 6 rt_input.n2) ( and (and (not (= 6 rt_input.n1)) (> rt_input.n1 2)) (and (not (= 9 rt_input.n1)) (> rt_input.n1 3)))) ( or (and (> 3 rt_input.n2) (= 8 rt_input.n1)) (and (> 3 rt_input.n2) (= 4 rt_input.n1)) ) ) ) ) ) ) 

[Final predicate size] 21

[Total time]
Total Conversion Time : 0 days, 0 hours, 1 minutes, 10 seconds


3.
[Original predicate]
(((4 == rt_input.n1) and (4 == rt_input.n2)) or ((4 == rt_input.n1) and !(4 == rt_input.n2) and (rt_input.n2 >= 8)) or (!(4 == rt_input.n1) and (4 == rt_input.n2) and (rt_input.n1 >= 8)))

[Original predicate size] 8

[Final output]
( or (and (= 4 rt_input.n2) (= 4 rt_input.n1)) ( or (and (> rt_input.n2 7) (= 4 rt_input.n1)) (and (= 4 rt_input.n2) (> rt_input.n1 7)) ) ) 

[Final predicate size] 6

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 3 seconds


4.
[Original predicate]
(((9 == rt_input.n1) and (6 >= rt_input.n2) and (6 > rt_input.n2) and (4 >= rt_input.n2)) or ((9 == rt_input.n1) and (6 >= rt_input.n2) and !(6 > rt_input.n2)) or (!(9 == rt_input.n1) and (9 == rt_input.n2) and (6 >= rt_input.n1)) or (!(9 == rt_input.n1) and !(9 == rt_input.n2) and (6 >= rt_input.n1) and (6 >= rt_input.n2) and !(2 >= rt_input.n2) and !(4 == rt_input.n2) and !(2 >= rt_input.n1) and (4 > rt_input.n1) and (4 >= rt_input.n2)) or (!(9 == rt_input.n1) and !(9 == rt_input.n2) and (6 >= rt_input.n1) and (6 >= rt_input.n2) and !(2 >= rt_input.n2) and !(4 == rt_input.n2) and !(2 >= rt_input.n1) and (4 > rt_input.n1) and !(4 >= rt_input.n2) and !(6 > rt_input.n2)) or (!(9 == rt_input.n1) and !(9 == rt_input.n2) and (6 >= rt_input.n1) and (6 >= rt_input.n2) and !(2 >= rt_input.n2) and !(4 == rt_input.n2) and !(2 >= rt_input.n1) and !(4 > rt_input.n1) and (6 == rt_input.n1) and (4 >= rt_input.n2)))

[Original predicate size] 39

[Final output]
( or (and (> 5 rt_input.n2) (= 9 rt_input.n1)) ( or (and (= 6 rt_input.n2) (= 9 rt_input.n1)) ( or (and (= 9 rt_input.n2) (> 7 rt_input.n1)) ( or (and (= 3 rt_input.n2) (= 3 rt_input.n1)) ( or (and (= 6 rt_input.n2) (= 3 rt_input.n1)) (and (= 3 rt_input.n2) (= 6 rt_input.n1)) ) ) ) ) ) 

[Final predicate size] 12

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 33 seconds


5.
[Original predicate]
(!(9 > rt_input.n2) and !(9 > rt_input.n1))

[Original predicate size] 2

[Final output]
(and (> rt_input.n2 8) (> rt_input.n1 8)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


6.
[Original predicate]
((rt_input.n1 == rt_input.n2) and !(6 >= rt_input.n2) and !(rt_input.n1 >= 8))

[Original predicate size] 3

[Final output]
(and (and (> rt_input.n2 6) (= rt_input.n1 rt_input.n2)) (and (> 8 rt_input.n2) (= rt_input.n1 rt_input.n2))) 

[Final predicate size] 4

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 5 seconds


7.
[Original predicate]
((rt_input.n1 == rt_input.n2) and (rt_input.n1 >= 8) and (9 > rt_input.n1))

[Original predicate size] 3

[Final output]
(and (= rt_input.n1 rt_input.n2) (and (= 8 rt_input.n2) (= rt_input.n1 rt_input.n2))) 

[Final predicate size] 3

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 4 seconds


8.
[Original predicate]
((6 == rt_input.n1) and !(4 >= rt_input.n2) and (6 >= rt_input.n2))

[Original predicate size] 3

[Final output]
(and (and (> rt_input.n2 4) (> 7 rt_input.n2)) (= 6 rt_input.n1)) 

[Final predicate size] 3

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 4 seconds


9.
[Original predicate]
((6 > rt_input.n1) and !(4 >= rt_input.n1) and (6 > rt_input.n2) and !(4 >= rt_input.n2))

[Original predicate size] 4

[Final output]
(and (= 5 rt_input.n2) (= 5 rt_input.n1)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


10.
[Original predicate]
(((6 == rt_input.a) and (6 > rt_input.c) and !(6 > rt_input.b)) or ((6 == rt_input.a) and !(6 > rt_input.c) and (6 >= rt_input.b)) or ((6 == rt_input.a) and !(6 > rt_input.c) and !(6 >= rt_input.b) and (6 >= rt_input.c)) or (!(6 == rt_input.a) and (6 == rt_input.b) and (6 >= rt_input.a) and !(6 > rt_input.c)) or (!(6 == rt_input.a) and (6 == rt_input.b) and !(6 >= rt_input.a) and (6 >= rt_input.c)) or (!(6 == rt_input.a) and !(6 == rt_input.b) and !(6 > rt_input.c) and (6 >= rt_input.c) and (4 >= rt_input.b) and !(6 >= rt_input.a)) or (!(6 == rt_input.a) and !(6 == rt_input.b) and !(6 > rt_input.c) and (6 >= rt_input.c) and !(4 >= rt_input.b) and (6 >= rt_input.a) and !(6 >= rt_input.b)) or (!(6 == rt_input.a) and !(6 == rt_input.b) and !(6 > rt_input.c) and (6 >= rt_input.c) and !(4 >= rt_input.b) and !(6 >= rt_input.a) and (6 > rt_input.b)))

[Original predicate size] 38

[Final output]
( or (and (> 6 rt_input.c) (and (= 6 rt_input.a) (> rt_input.b 5))) ( or (and (> rt_input.c 5) (and (= 6 rt_input.a) (> 7 rt_input.b))) ( or (and (= 6 rt_input.c) (and (= 6 rt_input.a) (> rt_input.b 6))) ( or (and (> rt_input.c 5) (and (> 6 rt_input.a) (= 6 rt_input.b))) ( or (and (> 7 rt_input.c) (and (> rt_input.a 6) (= 6 rt_input.b))) ( or (and (= 6 rt_input.c) (and (> rt_input.a 6) (> 5 rt_input.b))) ( or (and (= 6 rt_input.c) (and (> 6 rt_input.a) (> rt_input.b 6))) (and (= 6 rt_input.c) (and (> rt_input.a 6) (= 5 rt_input.b))) ) ) ) ) ) ) ) 

[Final predicate size] 24

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 21 seconds


11.
[Original predicate]
(((4 >= rt_input.a) and !(4 >= rt_input.c) and !(4 >= rt_input.b) and (6 > rt_input.b)) or ((4 >= rt_input.a) and !(4 >= rt_input.c) and !(4 >= rt_input.b) and !(6 > rt_input.b) and (6 > rt_input.c)) or (!(4 >= rt_input.a) and (6 > rt_input.a) and (4 > rt_input.b) and !(4 >= rt_input.c)) or (!(4 >= rt_input.a) and (6 > rt_input.a) and !(4 > rt_input.b) and (6 > rt_input.c) and (4 >= rt_input.b) and !(4 >= rt_input.c)) or (!(4 >= rt_input.a) and (6 > rt_input.a) and !(4 > rt_input.b) and (6 > rt_input.c) and !(4 >= rt_input.b)) or (!(4 >= rt_input.a) and (6 > rt_input.a) and !(4 > rt_input.b) and !(6 > rt_input.c) and (6 > rt_input.b)) or (!(4 >= rt_input.a) and !(6 > rt_input.a) and (6 > rt_input.b) and (6 > rt_input.c) and (4 >= rt_input.c) and !(4 >= rt_input.b)) or (!(4 >= rt_input.a) and !(6 > rt_input.a) and (6 > rt_input.b) and (6 > rt_input.c) and !(4 >= rt_input.c)))

[Original predicate size] 40

[Final output]
( or (and (> rt_input.c 4) (and (> 5 rt_input.a) (= 5 rt_input.b))) ( or (and (= 5 rt_input.c) (and (> 5 rt_input.a) (> rt_input.b 5))) ( or (and (> rt_input.c 4) (and (= 5 rt_input.a) (> 4 rt_input.b))) ( or (and (= 5 rt_input.c) (and (= 5 rt_input.a) (= 4 rt_input.b))) ( or (and (> 6 rt_input.c) (and (= 5 rt_input.a) (> rt_input.b 4))) ( or (and (> rt_input.c 5) (and (= 5 rt_input.a) (and (> rt_input.b 3) (> 6 rt_input.b)))) ( or (and (> 5 rt_input.c) (and (> rt_input.a 5) (= 5 rt_input.b))) (and (= 5 rt_input.c) (and (> rt_input.a 5) (> 6 rt_input.b))) ) ) ) ) ) ) ) 

[Final predicate size] 25

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 20 seconds


12.
[Original predicate]
(((2 >= rt_input.a) and (2 == rt_input.a) and (2 >= rt_input.c) and (1 >= rt_input.b) and !(1 >= rt_input.c)) or ((2 >= rt_input.a) and (2 == rt_input.a) and (2 >= rt_input.c) and !(1 >= rt_input.b)) or ((2 >= rt_input.a) and (2 == rt_input.a) and !(2 >= rt_input.c) and (2 >= rt_input.b)) or ((2 >= rt_input.a) and !(2 == rt_input.a) and (2 == rt_input.b) and !(1 >= rt_input.c)) or ((2 >= rt_input.a) and !(2 == rt_input.a) and !(2 == rt_input.b) and (2 >= rt_input.c) and !(1 >= rt_input.c) and !(2 >= rt_input.b)) or (!(2 >= rt_input.a) and (2 >= rt_input.b) and (2 >= rt_input.c) and (2 == rt_input.b)) or (!(2 >= rt_input.a) and (2 >= rt_input.b) and (2 >= rt_input.c) and !(2 == rt_input.b) and !(1 >= rt_input.c)))

[Original predicate size] 32

[Final output]
( or (and (= 2 rt_input.c) (and (= 2 rt_input.a) (> 2 rt_input.b))) ( or (and (> 3 rt_input.c) (and (= 2 rt_input.a) (> rt_input.b 1))) ( or (and (> rt_input.c 2) (and (= 2 rt_input.a) (> 3 rt_input.b))) ( or (and (> rt_input.c 1) (and (> 2 rt_input.a) (= 2 rt_input.b))) ( or (and (= 2 rt_input.c) (and (> 2 rt_input.a) (> rt_input.b 2))) ( or (and (> 3 rt_input.c) (and (> rt_input.a 2) (= 2 rt_input.b))) (and (= 2 rt_input.c) (and (> rt_input.a 2) (> 2 rt_input.b))) ) ) ) ) ) ) 

[Final predicate size] 21

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 14 seconds


13.
[Original predicate]
(((4 > rt_input.c) and (2 >= rt_input.c) and !(2 >= rt_input.a) and (4 > rt_input.a) and !(2 >= rt_input.b)) or ((4 > rt_input.c) and (2 >= rt_input.c) and !(2 >= rt_input.a) and !(4 > rt_input.a) and (4 > rt_input.b) and !(2 >= rt_input.b)) or ((4 > rt_input.c) and !(2 >= rt_input.c) and (4 > rt_input.b) and (2 >= rt_input.a) and !(2 >= rt_input.b)) or ((4 > rt_input.c) and !(2 >= rt_input.c) and (4 > rt_input.b) and !(2 >= rt_input.a)) or ((4 > rt_input.c) and !(2 >= rt_input.c) and !(4 > rt_input.b) and (4 > rt_input.a)) or (!(4 > rt_input.c) and (4 > rt_input.b) and (4 > rt_input.a) and (2 >= rt_input.b) and !(2 >= rt_input.a)) or (!(4 > rt_input.c) and (4 > rt_input.b) and (4 > rt_input.a) and !(2 >= rt_input.b)))

[Original predicate size] 33

[Final output]
( or (and (> 3 rt_input.c) (and (= 3 rt_input.a) (> rt_input.b 2))) ( or (and (> 3 rt_input.c) (and (> rt_input.a 3) (= 3 rt_input.b))) ( or (and (= 3 rt_input.c) (and (> 3 rt_input.a) (= 3 rt_input.b))) ( or (and (= 3 rt_input.c) (and (> rt_input.a 2) (> 4 rt_input.b))) ( or (and (= 3 rt_input.c) (and (> 4 rt_input.a) (> rt_input.b 3))) ( or (and (> rt_input.c 3) (and (= 3 rt_input.a) (> 3 rt_input.b))) (and (> rt_input.c 3) (and (> 4 rt_input.a) (= 3 rt_input.b))) ) ) ) ) ) ) 

[Final predicate size] 21

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 14 seconds


14.
[Original predicate]
(((8 > rt_input.b) and !(8 > rt_input.a) and !(8 > rt_input.c) and (8 >= rt_input.c)) or ((8 > rt_input.b) and !(8 > rt_input.a) and !(8 > rt_input.c) and !(8 >= rt_input.c) and (8 == rt_input.a)) or (!(8 > rt_input.b) and (8 == rt_input.a) and (8 >= rt_input.c)) or (!(8 > rt_input.b) and (8 == rt_input.a) and !(8 >= rt_input.c) and (8 >= rt_input.b)) or (!(8 > rt_input.b) and !(8 == rt_input.a) and (8 > rt_input.c) and !(8 > rt_input.a) and (8 >= rt_input.b)) or (!(8 > rt_input.b) and !(8 == rt_input.a) and !(8 > rt_input.c) and (8 >= rt_input.c) and (8 >= rt_input.a)) or (!(8 > rt_input.b) and !(8 == rt_input.a) and !(8 > rt_input.c) and (8 >= rt_input.c) and !(8 >= rt_input.a) and (8 >= rt_input.b)) or (!(8 > rt_input.b) and !(8 == rt_input.a) and !(8 > rt_input.c) and !(8 >= rt_input.c) and (8 == rt_input.b) and (8 >= rt_input.a)))

[Original predicate size] 38

[Final output]
( or (and (= 8 rt_input.c) (and (> rt_input.a 7) (> 8 rt_input.b))) ( or (and (> rt_input.c 8) (and (= 8 rt_input.a) (> 8 rt_input.b))) ( or (and (> 9 rt_input.c) (and (= 8 rt_input.a) (> rt_input.b 7))) ( or (and (> rt_input.c 8) (and (= 8 rt_input.a) (= 8 rt_input.b))) ( or (and (> 8 rt_input.c) (and (> rt_input.a 8) (= 8 rt_input.b))) ( or (and (= 8 rt_input.c) (and (> 8 rt_input.a) (> rt_input.b 7))) ( or (and (= 8 rt_input.c) (and (> rt_input.a 8) (= 8 rt_input.b))) (and (> rt_input.c 8) (and (> 8 rt_input.a) (= 8 rt_input.b))) ) ) ) ) ) ) ) 

[Final predicate size] 24

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 17 seconds


15.
[Original predicate]
(((6 >= rt_input.c) and !(6 >= rt_input.b) and !(6 >= rt_input.a) and (8 > rt_input.a)) or ((6 >= rt_input.c) and !(6 >= rt_input.b) and !(6 >= rt_input.a) and !(8 > rt_input.a) and (8 > rt_input.b)) or (!(6 >= rt_input.c) and (8 > rt_input.c) and (6 >= rt_input.b) and !(6 >= rt_input.a)) or (!(6 >= rt_input.c) and (8 > rt_input.c) and !(6 >= rt_input.b) and (8 > rt_input.a)) or (!(6 >= rt_input.c) and (8 > rt_input.c) and !(6 >= rt_input.b) and !(8 > rt_input.a) and (8 > rt_input.b)) or (!(6 >= rt_input.c) and !(8 > rt_input.c) and (8 > rt_input.b) and (6 >= rt_input.b) and !(6 >= rt_input.a) and (8 > rt_input.a)) or (!(6 >= rt_input.c) and !(8 > rt_input.c) and (8 > rt_input.b) and !(6 >= rt_input.b) and (8 > rt_input.a)))

[Original predicate size] 33

[Final output]
( or (and (> 7 rt_input.c) (and (= 7 rt_input.a) (> rt_input.b 6))) ( or (and (> 7 rt_input.c) (and (> rt_input.a 7) (= 7 rt_input.b))) ( or (and (= 7 rt_input.c) (and (> rt_input.a 6) (> 7 rt_input.b))) ( or (and (= 7 rt_input.c) (and (> 8 rt_input.a) (> rt_input.b 6))) ( or (and (= 7 rt_input.c) (and (> rt_input.a 7) (= 7 rt_input.b))) ( or (and (> rt_input.c 7) (and (= 7 rt_input.a) (> 7 rt_input.b))) (and (> rt_input.c 7) (and (> 8 rt_input.a) (= 7 rt_input.b))) ) ) ) ) ) ) 

[Final predicate size] 21

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 14 seconds


16.
[Original predicate]
(((4 == rt_input.b) and (4 == rt_input.a)) or ((4 == rt_input.b) and !(4 == rt_input.a) and (4 >= rt_input.c) and (4 > rt_input.a) and !(4 > rt_input.c)) or ((4 == rt_input.b) and !(4 == rt_input.a) and (4 >= rt_input.c) and !(4 > rt_input.a)) or ((4 == rt_input.b) and !(4 == rt_input.a) and !(4 >= rt_input.c) and (4 >= rt_input.a)) or (!(4 == rt_input.b) and (4 == rt_input.a) and (4 >= rt_input.c) and (4 >= rt_input.b) and !(4 > rt_input.c)) or (!(4 == rt_input.b) and (4 == rt_input.a) and (4 >= rt_input.c) and !(4 >= rt_input.b)) or (!(4 == rt_input.b) and (4 == rt_input.a) and !(4 >= rt_input.c) and (4 > rt_input.b)) or (!(4 == rt_input.b) and !(4 == rt_input.a) and (4 >= rt_input.c) and !(4 > rt_input.c) and (4 > rt_input.a) and !(4 > rt_input.b)) or (!(4 == rt_input.b) and !(4 == rt_input.a) and (4 >= rt_input.c) and !(4 > rt_input.c) and !(4 > rt_input.a) and (4 > rt_input.b)))

[Original predicate size] 40

[Final output]
( or (and (= 4 rt_input.a) (= 4 rt_input.b)) ( or (and (= 4 rt_input.c) (and (> 4 rt_input.a) (= 4 rt_input.b))) ( or (and (> 5 rt_input.c) (and (> rt_input.a 4) (= 4 rt_input.b))) ( or (and (> rt_input.c 4) (and (> 4 rt_input.a) (= 4 rt_input.b))) ( or (and (= 4 rt_input.c) (and (= 4 rt_input.a) (> 4 rt_input.b))) ( or (and (> 5 rt_input.c) (and (= 4 rt_input.a) (> rt_input.b 4))) ( or (and (> rt_input.c 4) (and (= 4 rt_input.a) (> 4 rt_input.b))) ( or (and (= 4 rt_input.c) (and (> 4 rt_input.a) (> rt_input.b 4))) (and (= 4 rt_input.c) (and (> rt_input.a 4) (> 4 rt_input.b))) ) ) ) ) ) ) ) ) 

[Final predicate size] 26

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 17 seconds


17.
[Original predicate]
(((1 >= rt_input.c) and (1 >= rt_input.b) and (1 > rt_input.c) and !(1 > rt_input.b) and !(1 > rt_input.a)) or ((1 >= rt_input.c) and (1 >= rt_input.b) and !(1 > rt_input.c) and (1 > rt_input.a) and !(1 > rt_input.b)) or ((1 >= rt_input.c) and (1 >= rt_input.b) and !(1 > rt_input.c) and !(1 > rt_input.a)) or ((1 >= rt_input.c) and !(1 >= rt_input.b) and (1 >= rt_input.a) and (1 > rt_input.c) and (1 == rt_input.a)) or ((1 >= rt_input.c) and !(1 >= rt_input.b) and (1 >= rt_input.a) and !(1 > rt_input.c)) or (!(1 >= rt_input.c) and (1 >= rt_input.b) and (1 >= rt_input.a) and (1 == rt_input.b)) or (!(1 >= rt_input.c) and (1 >= rt_input.b) and (1 >= rt_input.a) and !(1 == rt_input.b) and !(1 > rt_input.a)))

[Original predicate size] 32

[Final output]
( or (and (> 1 rt_input.c) (and (> rt_input.a 0) (= 1 rt_input.b))) ( or (and (= 1 rt_input.c) (and (> 1 rt_input.a) (= 1 rt_input.b))) ( or (and (= 1 rt_input.c) (and (> rt_input.a 0) (> 2 rt_input.b))) ( or (and (> 1 rt_input.c) (and (= 1 rt_input.a) (> rt_input.b 1))) ( or (and (= 1 rt_input.c) (and (> 2 rt_input.a) (> rt_input.b 1))) ( or (and (> rt_input.c 1) (and (> 2 rt_input.a) (= 1 rt_input.b))) (and (> rt_input.c 1) (and (= 1 rt_input.a) (> 1 rt_input.b))) ) ) ) ) ) ) 

[Final predicate size] 21

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 14 seconds


18.
[Original predicate]
(((8 >= rt_input.a) and !(8 >= rt_input.b) and !(8 >= rt_input.c)) or (!(8 >= rt_input.a) and (8 >= rt_input.b) and !(8 >= rt_input.c)) or (!(8 >= rt_input.a) and !(8 >= rt_input.b)))

[Original predicate size] 8

[Final output]
( or (and (> rt_input.c 8) (and (> 9 rt_input.a) (> rt_input.b 8))) ( or (and (> rt_input.c 8) (and (> rt_input.a 8) (> 9 rt_input.b))) (and (> rt_input.a 8) (> rt_input.b 8)) ) ) 

[Final predicate size] 8

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 4 seconds


19.
[Original predicate]
(((2 >= rt_input.tb) and (rt_input.ta == rt_input.tc) and (rt_input.tb > rt_input.ta)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and ((rt_input.ta - rt_input.tc) <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and (rt_input.ta > rt_input.tb) and (rt_input.tc >= 5) and (rt_input.ta > 3) and (9 > rt_input.tc) and (rt_input.ta <= 6) and (5 >= rt_input.ta) and (5 > rt_input.ta) and !(5 >= rt_input.tc)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and ((rt_input.ta - rt_input.tc) <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and (rt_input.ta > rt_input.tb) and (rt_input.tc >= 5) and (rt_input.ta > 3) and (9 > rt_input.tc) and (rt_input.ta <= 6) and (5 >= rt_input.ta) and !(5 > rt_input.ta) and !(rt_input.tc <= 6)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and ((rt_input.ta - rt_input.tc) <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and (rt_input.ta > rt_input.tb) and (rt_input.tc >= 5) and (rt_input.ta > 3) and (9 > rt_input.tc) and (rt_input.ta <= 6) and !(5 >= rt_input.ta) and (rt_input.tc >= 8)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and ((rt_input.ta - rt_input.tc) <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and (rt_input.ta > rt_input.tb) and (rt_input.tc >= 5) and (rt_input.ta > 3) and !(9 > rt_input.tc)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and ((rt_input.ta - rt_input.tc) <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and (rt_input.ta > rt_input.tb) and (rt_input.tc >= 5) and !(rt_input.ta > 3)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and ((rt_input.ta - rt_input.tc) <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and !(rt_input.ta > rt_input.tb)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and ((rt_input.ta - rt_input.tc) <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and !(rt_input.ta > 1)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and ((rt_input.ta - rt_input.tc) <= 1) and !(2 == rt_input.tb)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and !((rt_input.ta - rt_input.tc) <= 1)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and (1 == (rt_input.tb - rt_input.ta)) and (1 >= rt_input.tc)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and (1 == (rt_input.ta - rt_input.tb)) and (1 >= rt_input.tc)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and (2 >= rt_input.tc)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and (rt_input.tb > 5) and !(1 == (9 - rt_input.ta)) and (1 == (rt_input.tb - 5))) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and (rt_input.tb > 5) and !(1 == (9 - rt_input.ta)) and !(1 == (rt_input.tb - 5)) and (rt_input.ta <= 6) and (9 == rt_input.tb)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and (rt_input.tb > 5) and !(1 == (9 - rt_input.ta)) and !(1 == (rt_input.tb - 5)) and (rt_input.ta <= 6) and !(9 == rt_input.tb) and (1 == (9 - rt_input.tb)) and (5 == rt_input.ta)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and !(rt_input.tb > 5) and (rt_input.ta >= 8)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and !(rt_input.tb > 5) and !(rt_input.ta >= 8) and (rt_input.ta > 5) and (3 == rt_input.tb)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and !(rt_input.tb > 5) and !(rt_input.ta >= 8) and (rt_input.ta > 5) and !(3 == rt_input.tb) and !(5 == rt_input.tb) and !(rt_input.ta <= 6)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(rt_input.ta >= 5) and (rt_input.tb <= 6) and !(3 == rt_input.tb) and (rt_input.tc >= rt_input.ta) and (5 >= rt_input.tb) and (2 >= rt_input.ta) and (1 >= rt_input.ta)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(rt_input.ta >= 5) and (rt_input.tb <= 6) and !(3 == rt_input.tb) and (rt_input.tc >= rt_input.ta) and (5 >= rt_input.tb) and (2 >= rt_input.ta) and !(1 >= rt_input.ta) and !(5 > rt_input.tb)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(rt_input.ta >= 5) and (rt_input.tb <= 6) and !(3 == rt_input.tb) and (rt_input.tc >= rt_input.ta) and !(5 >= rt_input.tb)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(rt_input.ta >= 5) and !(rt_input.tb <= 6)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and (rt_input.tc <= 6) and (rt_input.ta <= 6) and (rt_input.ta == rt_input.tb) and !(5 >= rt_input.tc) and (3 == rt_input.ta)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and (rt_input.tc <= 6) and !(rt_input.ta <= 6) and !(rt_input.tc > 5) and (rt_input.tb > 3) and !(5 == rt_input.tc) and (1 == (9 - rt_input.ta))) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and (rt_input.tc <= 6) and !(rt_input.ta <= 6) and !(rt_input.tc > 5) and !(rt_input.tb > 3) and (5 > rt_input.tc)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and (rt_input.tc <= 6) and !(rt_input.ta <= 6) and !(rt_input.tc > 5) and !(rt_input.tb > 3) and !(5 > rt_input.tc) and (rt_input.ta >= 8)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and (5 > rt_input.ta) and (rt_input.ta == rt_input.tb) and (rt_input.tc >= 8)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and (5 > rt_input.ta) and (rt_input.ta == rt_input.tb) and !(rt_input.tc >= 8) and (3 == rt_input.ta)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and (5 > rt_input.ta) and !(rt_input.ta == rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and !(5 > rt_input.ta) and (rt_input.ta <= 6) and (rt_input.tc >= 8) and (9 == rt_input.tc) and (1 == (5 - rt_input.tb)) and (5 == rt_input.ta)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and !(5 > rt_input.ta) and (rt_input.ta <= 6) and (rt_input.tc >= 8) and (9 == rt_input.tc) and !(1 == (5 - rt_input.tb))) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and !(5 > rt_input.ta) and (rt_input.ta <= 6) and (rt_input.tc >= 8) and !(9 == rt_input.tc) and !(rt_input.ta > 5) and (3 >= rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 > rt_input.ta) and (rt_input.tc > 5) and !(rt_input.tb > 3) and (rt_input.tc <= 6)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 > rt_input.ta) and !(rt_input.tc > 5)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and ((rt_input.tb - rt_input.tc) <= 1) and (rt_input.tc >= 8) and (rt_input.tb <= 6) and (3 == rt_input.ta) and (5 >= rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and ((rt_input.tb - rt_input.tc) <= 1) and (rt_input.tc >= 8) and (rt_input.tb <= 6) and (3 == rt_input.ta) and !(5 >= rt_input.tb) and !(1 == (9 - rt_input.tc))) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and ((rt_input.tb - rt_input.tc) <= 1) and (rt_input.tc >= 8) and (rt_input.tb <= 6) and !(3 == rt_input.ta) and !(9 > rt_input.tc) and (5 >= rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and !((rt_input.tb - rt_input.tc) <= 1) and (rt_input.tc <= 6) and (9 == rt_input.tb) and (rt_input.tc > 5) and !(rt_input.ta > 3)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and !((rt_input.tb - rt_input.tc) <= 1) and (rt_input.tc <= 6) and (9 == rt_input.tb) and !(rt_input.tc > 5)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and !((rt_input.tb - rt_input.tc) <= 1) and (rt_input.tc <= 6) and !(9 == rt_input.tb) and !(rt_input.tc > 5) and (rt_input.tb >= 8) and (rt_input.ta == rt_input.tc)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and !((rt_input.tb - rt_input.tc) <= 1) and (rt_input.tc <= 6) and !(9 == rt_input.tb) and !(rt_input.tc > 5) and (rt_input.tb >= 8) and !(rt_input.ta == rt_input.tc) and !(1 == (5 - rt_input.ta))) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and !((rt_input.tb - rt_input.tc) <= 1) and (rt_input.tc <= 6) and !(9 == rt_input.tb) and !(rt_input.tc > 5) and !(rt_input.tb >= 8) and !(rt_input.ta > 3) and (5 > rt_input.tc) and !(rt_input.tb <= 6)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and !(5 > rt_input.ta) and (5 > rt_input.tc) and (9 == rt_input.ta) and (5 == rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and !(5 > rt_input.ta) and (5 > rt_input.tc) and !(9 == rt_input.ta) and !(9 > rt_input.tb) and (5 == rt_input.ta)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and (1 >= rt_input.ta)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tb > rt_input.tc)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and !(rt_input.tb > rt_input.tc) and !(5 > rt_input.tc) and (3 >= rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and !(rt_input.tb > rt_input.tc) and !(5 > rt_input.tc) and !(3 >= rt_input.tb) and !(rt_input.tb >= 8) and !(5 >= rt_input.tc) and (rt_input.tb >= 5) and !(rt_input.tc <= 6) and (rt_input.tb > 5) and (9 == rt_input.tc)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and !(rt_input.tb > rt_input.tc) and !(5 > rt_input.tc) and !(3 >= rt_input.tb) and !(rt_input.tb >= 8) and !(5 >= rt_input.tc) and (rt_input.tb >= 5) and !(rt_input.tc <= 6) and (rt_input.tb > 5) and !(9 == rt_input.tc) and (rt_input.tb <= 6) and (rt_input.tc >= 8)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and !(rt_input.tb > rt_input.tc) and !(5 > rt_input.tc) and !(3 >= rt_input.tb) and !(rt_input.tb >= 8) and !(5 >= rt_input.tc) and (rt_input.tb >= 5) and !(rt_input.tc <= 6) and !(rt_input.tb > 5)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and !(rt_input.tb > rt_input.tc) and !(5 > rt_input.tc) and !(3 >= rt_input.tb) and !(rt_input.tb >= 8) and !(5 >= rt_input.tc) and !(rt_input.tb >= 5)))

[Original predicate size] 560

[Final output]
( or (and (= rt_input.ta rt_input.tc) (and (and (> rt_input.tb rt_input.ta) (> 3 rt_input.tb)) (and (> rt_input.tb rt_input.tc) (= rt_input.ta rt_input.tc)))) ( or (and ( and (and (> rt_input.tc 2) (> rt_input.tc rt_input.ta)) (and (> rt_input.tc 5) (> 9 rt_input.tc))) (and (and (> rt_input.ta rt_input.tb) (= 2 rt_input.tb)) ( and ( and (and (> rt_input.ta 1) (> rt_input.ta rt_input.tb)) (and (> rt_input.ta 3) (> 7 rt_input.ta))) (and (> 5 rt_input.ta) (> rt_input.tc rt_input.ta))))) ( or (and ( and (and (> rt_input.tc 2) (> rt_input.tc rt_input.ta)) (and (> rt_input.tc 6) (> 9 rt_input.tc))) (and (and (> rt_input.ta rt_input.tb) (= 2 rt_input.tb)) ( and ( and (and (> rt_input.ta 1) (> rt_input.ta rt_input.tb)) (and (> rt_input.ta 3) (> 7 rt_input.ta))) (and (> rt_input.tc rt_input.ta) (= 5 rt_input.ta))))) ( or (and (and (> rt_input.tc rt_input.ta) (= 8 rt_input.tc)) (and (and (> rt_input.ta rt_input.tb) (= 2 rt_input.tb)) ( and ( and ( and (>= rt_input.tc rt_input.ta) (not (= 8 rt_input.ta))) (and (> rt_input.ta 1) (> rt_input.ta rt_input.tb))) ( and (and (> rt_input.ta 3) (> 7 rt_input.ta)) ( and (> rt_input.ta 5) ( and (not (= rt_input.ta rt_input.tc)) (> (+ 2 rt_input.tc) rt_input.ta))))))) ( or (and (and (> rt_input.tc 8) (> rt_input.tc rt_input.ta)) (and (and (> rt_input.ta rt_input.tb) (= 2 rt_input.tb)) ( and ( and (> rt_input.ta 3) ( and (not (= rt_input.ta rt_input.tc)) (> (+ 2 rt_input.tc) rt_input.ta))) ( and ( and (>= rt_input.tc rt_input.ta) (not (= 8 rt_input.ta))) (and (> rt_input.ta 1) (> rt_input.ta rt_input.tb)))))) ( or (and (and (> rt_input.tc 4) (> rt_input.tc rt_input.ta)) (and (and (> rt_input.ta rt_input.tb) (= 2 rt_input.tb)) ( and ( and (> 4 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (> (+ 2 rt_input.tc) rt_input.ta))) ( and ( and (>= rt_input.tc rt_input.ta) (not (= 8 rt_input.ta))) (and (> rt_input.ta 1) (> rt_input.ta rt_input.tb)))))) ( or (and (and (> rt_input.tc 3) (> rt_input.tc rt_input.ta)) (and (and (> 3 rt_input.ta) (= 2 rt_input.tb)) ( and (and (>= rt_input.tb rt_input.ta) (> rt_input.ta 1)) ( and ( and (not (= rt_input.ta rt_input.tc)) (> (+ 2 rt_input.tc) rt_input.ta)) ( and (>= rt_input.tc rt_input.ta) (not (= 8 rt_input.ta))))))) ( or (and (and (> rt_input.tc 2) (> rt_input.tc rt_input.ta)) (and (= 2 rt_input.tb) (and (> 2 rt_input.ta) (> rt_input.tc rt_input.ta)))) ( or (and ( and (not (= rt_input.ta rt_input.tc)) (> (+ 2 rt_input.tc) rt_input.ta)) (and (> 2 rt_input.tb) ( and (not (= rt_input.ta rt_input.tc)) (> (+ 2 rt_input.tc) rt_input.ta)))) ( or (and (> (+ -1 rt_input.ta) rt_input.tc) (and (> 3 rt_input.tb) (> (+ -1 rt_input.ta) rt_input.tc))) ( or (and (> 2 rt_input.tc) (and (and (= (+ 1 rt_input.ta) rt_input.tb) (> rt_input.ta 1)) (= (+ 1 rt_input.ta) rt_input.tb))) ( or (and (> 2 rt_input.tc) (and (and (= (+ -1 rt_input.ta) rt_input.tb) (> rt_input.tb 2)) (= (+ -1 rt_input.ta) rt_input.tb))) ( or (and (> 3 rt_input.tc) (and ( and ( and (> rt_input.tb 2) (not (= rt_input.ta rt_input.tb))) ( and (not (= (+ 1 rt_input.ta) rt_input.tb)) (not (= (+ -1 rt_input.ta) rt_input.tb)))) ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) ( and (not (= rt_input.ta rt_input.tb)) (not (= (+ 1 rt_input.ta) rt_input.tb)))))) ( or (and (= 3 rt_input.tc) (and ( and (= 6 rt_input.tb) ( and ( and (> rt_input.tb 2) (not (= rt_input.ta rt_input.tb))) ( and (not (= (+ 1 rt_input.ta) rt_input.tb)) (not (= (+ -1 rt_input.ta) rt_input.tb))))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (> rt_input.ta 4)) ( and (not (= 8 rt_input.ta)) ( and (not (= rt_input.ta rt_input.tb)) (not (= (+ 1 rt_input.ta) rt_input.tb))))))) ( or (and (= 3 rt_input.tc) (and ( and (and (not (= rt_input.ta rt_input.tb)) (= 9 rt_input.tb)) ( and ( and (not (= (+ 1 rt_input.ta) rt_input.tb)) (not (= (+ -1 rt_input.ta) rt_input.tb))) (> rt_input.tb 6))) ( and (> 7 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tb)) (not (= (+ 1 rt_input.ta) rt_input.tb))) ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (> rt_input.ta 4)))))) ( or (and (= 3 rt_input.tc) (and ( and ( and ( and (> rt_input.tb 2) (not (= rt_input.ta rt_input.tb))) ( and (not (= (+ 1 rt_input.ta) rt_input.tb)) (not (= (+ -1 rt_input.ta) rt_input.tb)))) (= 8 rt_input.tb)) ( and ( and (= 5 rt_input.ta) ( and (not (= rt_input.ta rt_input.tb)) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (> rt_input.ta 4)) (> 7 rt_input.ta))))) ( or (and (= 3 rt_input.tc) (and ( and ( and (not (= (+ 1 rt_input.ta) rt_input.tb)) (not (= (+ -1 rt_input.ta) rt_input.tb))) ( and (> 6 rt_input.tb) ( and (> rt_input.tb 2) (not (= rt_input.ta rt_input.tb))))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (> rt_input.ta 4)) ( and (> rt_input.ta 7) ( and (not (= rt_input.ta rt_input.tb)) (not (= (+ 1 rt_input.ta) rt_input.tb))))))) ( or (and (= 3 rt_input.tc) (and ( and (= 3 rt_input.tb) ( and ( and (> rt_input.tb 2) (not (= rt_input.ta rt_input.tb))) ( and (not (= (+ 1 rt_input.ta) rt_input.tb)) (not (= (+ -1 rt_input.ta) rt_input.tb))))) ( and (and (> rt_input.ta 5) (> 8 rt_input.ta)) ( and ( and (not (= rt_input.ta rt_input.tb)) (not (= (+ 1 rt_input.ta) rt_input.tb))) ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (> rt_input.ta 4)))))) ( or (and (= 3 rt_input.tc) (and ( and ( and (not (= 5 rt_input.tb)) ( and (> rt_input.tb 2) (not (= rt_input.ta rt_input.tb)))) ( and ( and (not (= (+ 1 rt_input.ta) rt_input.tb)) (not (= (+ -1 rt_input.ta) rt_input.tb))) (and (not (= 3 rt_input.tb)) (> 6 rt_input.tb)))) ( and ( and (> rt_input.ta 6) ( and (not (= rt_input.ta rt_input.tb)) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (> rt_input.ta 4)) (and (> rt_input.ta 5) (> 8 rt_input.ta)))))) ( or (and (and (> 4 rt_input.ta) (= 3 rt_input.tc)) (and ( and ( and (> 6 rt_input.tb) ( and (> rt_input.tb 2) (not (= rt_input.ta rt_input.tb)))) ( and ( and (not (= (+ 1 rt_input.ta) rt_input.tb)) (not (= (+ -1 rt_input.ta) rt_input.tb))) (and (not (= 3 rt_input.tb)) (> 7 rt_input.tb)))) ( and ( and (> 2 rt_input.ta) ( and (not (= rt_input.ta rt_input.tb)) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (> 5 rt_input.ta)) (and (>= rt_input.tc rt_input.ta) (> 3 rt_input.ta)))))) ( or (and (and (> 4 rt_input.ta) (= 3 rt_input.tc)) (and ( and ( and ( and (> rt_input.tb 2) (not (= rt_input.ta rt_input.tb))) ( and (not (= (+ 1 rt_input.ta) rt_input.tb)) (not (= (+ -1 rt_input.ta) rt_input.tb)))) (= 5 rt_input.tb)) ( and ( and (> rt_input.ta 1) ( and (not (= rt_input.ta rt_input.tb)) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (> 5 rt_input.ta)) (and (>= rt_input.tc rt_input.ta) (> 3 rt_input.ta)))))) ( or (and (and (> 4 rt_input.ta) (= 3 rt_input.tc)) (and ( and ( and (> rt_input.tb 5) ( and (> rt_input.tb 2) (not (= rt_input.ta rt_input.tb)))) ( and ( and (not (= (+ 1 rt_input.ta) rt_input.tb)) (not (= (+ -1 rt_input.ta) rt_input.tb))) (and (not (= 3 rt_input.tb)) (> 7 rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (> 5 rt_input.ta)) ( and (>= rt_input.tc rt_input.ta) ( and (not (= rt_input.ta rt_input.tb)) (not (= (+ 1 rt_input.ta) rt_input.tb))))))) ( or (and (= 3 rt_input.tc) (and ( and ( and (not (= (+ 1 rt_input.ta) rt_input.tb)) (not (= (+ -1 rt_input.ta) rt_input.tb))) ( and (> rt_input.tb 6) ( and (> rt_input.tb 2) (not (= rt_input.ta rt_input.tb))))) ( and ( and (not (= rt_input.ta rt_input.tb)) (not (= (+ 1 rt_input.ta) rt_input.tb))) ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (> 5 rt_input.ta))))) ( or (and ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 7 rt_input.tc)) ( and (> rt_input.tc 5) ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))))) (and ( and (= rt_input.ta rt_input.tb) (and (> rt_input.tb 2) (> 5 rt_input.tb))) ( and (and (not (= rt_input.ta rt_input.tc)) (= 3 rt_input.ta)) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 9 rt_input.ta)) (and (> 7 rt_input.tb) (= rt_input.ta rt_input.tb)))))) ( or (and ( and (> 5 rt_input.tc) ( and ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 7 rt_input.tc)))) (and (= 4 rt_input.tb) ( and (= 8 rt_input.ta) ( and ( and (> rt_input.ta 2) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 9 rt_input.ta)))))) ( or (and ( and (> 5 rt_input.tc) ( and ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 7 rt_input.tc)))) (and (= 3 rt_input.tb) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 9 rt_input.ta)) ( and (> rt_input.ta 6) ( and (> rt_input.ta 2) (not (= rt_input.ta rt_input.tc))))))) ( or (and ( and (= 5 rt_input.tc) ( and ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 7 rt_input.tc)))) (and (= 3 rt_input.tb) ( and (> rt_input.ta 7) ( and ( and (> rt_input.ta 2) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 9 rt_input.ta)))))) ( or (and ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> rt_input.tc 6)) ( and (> rt_input.tc 7) ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))))) (and ( and (= rt_input.ta rt_input.tb) (and (> rt_input.tb 2) (> 5 rt_input.tb))) ( and (and (> 5 rt_input.tb) (= rt_input.ta rt_input.tb)) ( and ( and (> rt_input.ta 2) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 9 rt_input.ta)))))) ( or (and ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> rt_input.tc 6)) ( and (> 8 rt_input.tc) ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))))) (and ( and (= rt_input.ta rt_input.tb) (and (> rt_input.tb 2) (> 5 rt_input.tb))) ( and (and (not (= rt_input.ta rt_input.tc)) (= 3 rt_input.ta)) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 9 rt_input.ta)) (and (> 5 rt_input.tb) (= rt_input.ta rt_input.tb)))))) ( or (and ( and ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> rt_input.tc 6))) (and ( and (not (= rt_input.ta rt_input.tb)) (and (> rt_input.tb 2) (> 5 rt_input.tb))) ( and ( and (> 5 rt_input.ta) (not (= rt_input.ta rt_input.tb))) ( and ( and (> rt_input.ta 2) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 9 rt_input.ta)))))) ( or (and ( and (= 9 rt_input.tc) ( and ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> rt_input.tc 6)))) (and (= 4 rt_input.tb) ( and (and (not (= rt_input.ta rt_input.tc)) (= 5 rt_input.ta)) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 9 rt_input.ta)) (and (> rt_input.ta 4) (> 7 rt_input.ta)))))) ( or (and ( and (= 9 rt_input.tc) ( and ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> rt_input.tc 6)))) (and (= 3 rt_input.tb) ( and (and (> rt_input.ta 4) (> 7 rt_input.ta)) ( and ( and (> rt_input.ta 2) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 9 rt_input.ta)))))) ( or (and ( and (or (> rt_input.tc 9) (= 8 rt_input.tc)) ( and ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> rt_input.tc 6)))) (and (= 3 rt_input.tb) ( and ( and (> 6 rt_input.ta) ( and (> rt_input.ta 2) (not (= rt_input.ta rt_input.tc)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 9 rt_input.ta)) (and (> rt_input.ta 4) (> 7 rt_input.ta)))))) ( or (and ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> rt_input.tc 5)) ( and (> 7 rt_input.tc) ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))))) (and (= 3 rt_input.tb) ( and ( and (> rt_input.ta 2) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> rt_input.ta 8))))) ( or (and ( and ( and (> rt_input.tc 3) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> 6 rt_input.tc))) (and (and (> rt_input.tb 2) (> 5 rt_input.tb)) ( and ( and (> rt_input.ta 2) (not (= rt_input.ta rt_input.tc))) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (> rt_input.ta 8))))) ( or (and ( and (> rt_input.tc 7) ( and (> rt_input.tc 3) (> (+ 2 rt_input.tc) rt_input.tb))) (and (and (> rt_input.tc 3) (= 5 rt_input.tb)) (= 3 rt_input.ta))) ( or (and (and (> (+ 2 rt_input.tc) rt_input.tb) (> rt_input.tc 8)) (and (and (> rt_input.tc 4) (= 6 rt_input.tb)) (= 3 rt_input.ta))) ( or (and (and (> (+ 2 rt_input.tc) rt_input.tb) (> rt_input.tc 8)) (and (and (> rt_input.tc 3) (= 5 rt_input.tb)) (= 4 rt_input.ta))) ( or (and (and (> rt_input.tb 7) (= 6 rt_input.tc)) (and (and (> 8 rt_input.tc) (= 9 rt_input.tb)) (= 3 rt_input.ta))) ( or (and ( and ( and (> rt_input.tc 3) (> (+ -1 rt_input.tb) rt_input.tc)) (> 6 rt_input.tc)) (and (and (> 8 rt_input.tc) (= 9 rt_input.tb)) (and (> rt_input.ta 2) (> 5 rt_input.ta)))) ( or (and ( and (> 6 rt_input.tc) ( and (= rt_input.ta rt_input.tc) ( and (> rt_input.tc 3) (> (+ -1 rt_input.tb) rt_input.tc)))) (and ( and ( and (> (+ -1 rt_input.tb) rt_input.tc) (not (= 9 rt_input.tb))) (> rt_input.tb 7)) ( and (= rt_input.ta rt_input.tc) (and (> rt_input.ta 2) (> 5 rt_input.ta))))) ( or (and ( and (> 6 rt_input.tc) ( and (not (= rt_input.ta rt_input.tc)) ( and (> rt_input.tc 3) (> (+ -1 rt_input.tb) rt_input.tc)))) (and ( and ( and (> (+ -1 rt_input.tb) rt_input.tc) (not (= 9 rt_input.tb))) (> rt_input.tb 7)) (and (not (= rt_input.ta rt_input.tc)) (= 3 rt_input.ta)))) ( or (and (and (> rt_input.tb 5) (= 4 rt_input.tc)) (and (and (> 6 rt_input.tc) (= 7 rt_input.tb)) (= 3 rt_input.ta))) ( or (and (= 4 rt_input.tc) (and (= 5 rt_input.tb) (= 9 rt_input.ta))) ( or (and (= 4 rt_input.tc) (and (> rt_input.tb 8) (= 5 rt_input.ta))) ( or (and ( and (> rt_input.tc 3) (not (= rt_input.tb rt_input.tc))) (and ( and (> rt_input.tb 2) (not (= rt_input.tb rt_input.tc))) (> 2 rt_input.ta))) ( or (and ( and ( and (> rt_input.tc 3) (not (= rt_input.tb rt_input.tc))) (> (+ -1 rt_input.tb) rt_input.tc)) (and ( and ( and (> rt_input.tb 2) (not (= rt_input.tb rt_input.tc))) (> (+ -1 rt_input.tb) rt_input.tc)) (= 2 rt_input.ta))) ( or (and (and (> rt_input.tc 4) (> rt_input.tc rt_input.tb)) (and (and (> rt_input.tc rt_input.tb) (= 3 rt_input.tb)) (= 2 rt_input.ta))) ( or (and (and (> rt_input.tc rt_input.tb) (= 9 rt_input.tc)) (and ( and (and (> rt_input.tb 2) (> rt_input.tc rt_input.tb)) (and (> rt_input.tb 5) (> 8 rt_input.tb))) (= 2 rt_input.ta))) ( or (and ( and (and (>= rt_input.tc rt_input.tb) (> rt_input.tc 5)) ( and ( and (> rt_input.tc 6) (not (= 9 rt_input.tc))) ( and (> rt_input.tc 7) ( and (> rt_input.tc 3) (not (= rt_input.tb rt_input.tc)))))) (and (and (> rt_input.tc rt_input.tb) (= 6 rt_input.tb)) (= 2 rt_input.ta))) ( or (and (and (> rt_input.tc 6) (> rt_input.tc rt_input.tb)) (and (and (> rt_input.tc rt_input.tb) (= 5 rt_input.tb)) (= 2 rt_input.ta))) (and (and (> rt_input.tc 5) (> rt_input.tc rt_input.tb)) (and (and (> rt_input.tc rt_input.tb) (= 4 rt_input.tb)) (= 2 rt_input.ta))) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 477

[Total time]
Total Conversion Time : 0 days, 1 hours, 27 minutes, 12 seconds


20.
[Original predicate]
(((rt_input.ta == rt_input.tc) and (rt_input.tc > rt_input.tb)) or ((rt_input.ta == rt_input.tc) and !(rt_input.tc > rt_input.tb) and !(rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and !(rt_input.tb >= 8) and (3 >= rt_input.ta) and !(1 >= rt_input.tc) and !(rt_input.tb > 5) and (2 >= rt_input.tc) and (3 == rt_input.tb)) or ((rt_input.ta == rt_input.tc) and !(rt_input.tc > rt_input.tb) and !(rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and !(rt_input.tb >= 8) and (3 >= rt_input.ta) and !(1 >= rt_input.tc) and !(rt_input.tb > 5) and !(2 >= rt_input.tc)) or ((rt_input.ta == rt_input.tc) and !(rt_input.tc > rt_input.tb) and !(rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and !(rt_input.tb >= 8) and !(3 >= rt_input.ta)) or ((rt_input.ta == rt_input.tc) and !(rt_input.tc > rt_input.tb) and !(rt_input.ta >= rt_input.tb) and !(5 > rt_input.tc)) or (!(rt_input.ta == rt_input.tc) and (rt_input.tb == rt_input.tc) and (rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and (2 >= rt_input.tc) and (3 == rt_input.ta) and !(1 >= rt_input.tb)) or (!(rt_input.ta == rt_input.tc) and (rt_input.tb == rt_input.tc) and (rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and !(2 >= rt_input.tc) and (5 >= rt_input.ta)) or (!(rt_input.ta == rt_input.tc) and (rt_input.tb == rt_input.tc) and (rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and !(2 >= rt_input.tc) and !(5 >= rt_input.ta) and !(3 >= rt_input.tb) and !(rt_input.ta >= 8)) or (!(rt_input.ta == rt_input.tc) and (rt_input.tb == rt_input.tc) and (rt_input.ta >= rt_input.tb) and !(5 > rt_input.tc)) or (!(rt_input.ta == rt_input.tc) and (rt_input.tb == rt_input.tc) and !(rt_input.ta >= rt_input.tb)) or (!(rt_input.ta == rt_input.tc) and !(rt_input.tb == rt_input.tc) and (rt_input.ta == rt_input.tb) and (rt_input.ta >= 5)) or (!(rt_input.ta == rt_input.tc) and !(rt_input.tb == rt_input.tc) and (rt_input.ta == rt_input.tb) and !(rt_input.ta >= 5) and (rt_input.tc >= rt_input.tb) and (rt_input.tb > 1) and !(rt_input.tc >= 8) and (rt_input.tb > 3)) or (!(rt_input.ta == rt_input.tc) and !(rt_input.tb == rt_input.tc) and (rt_input.ta == rt_input.tb) and !(rt_input.ta >= 5) and (rt_input.tc >= rt_input.tb) and (rt_input.tb > 1) and !(rt_input.tc >= 8) and !(rt_input.tb > 3) and !(rt_input.tc > 5) and (rt_input.tb > 2)) or (!(rt_input.ta == rt_input.tc) and !(rt_input.tb == rt_input.tc) and (rt_input.ta == rt_input.tb) and !(rt_input.ta >= 5) and (rt_input.tc >= rt_input.tb) and (rt_input.tb > 1) and !(rt_input.tc >= 8) and !(rt_input.tb > 3) and !(rt_input.tc > 5) and !(rt_input.tb > 2) and (3 == rt_input.tc)) or (!(rt_input.ta == rt_input.tc) and !(rt_input.tb == rt_input.tc) and (rt_input.ta == rt_input.tb) and !(rt_input.ta >= 5) and !(rt_input.tc >= rt_input.tb)))

[Original predicate size] 97

[Final output]
( or (and (and (> rt_input.tc rt_input.tb) (= rt_input.ta rt_input.tc)) (and (> rt_input.tc rt_input.tb) (= rt_input.ta rt_input.tc))) ( or (and ( and (and (> rt_input.tc 1) (> 5 rt_input.tc)) ( and (> 3 rt_input.tc) (and (>= rt_input.tb rt_input.tc) (= rt_input.ta rt_input.tc)))) (and ( and (> 6 rt_input.tb) ( and (= 3 rt_input.tb) (and (>= rt_input.tb rt_input.tc) (> rt_input.tb rt_input.ta)))) ( and (> 4 rt_input.ta) (and (> rt_input.tb rt_input.tc) (= rt_input.ta rt_input.tc))))) ( or (and ( and (and (> rt_input.tc 1) (> 5 rt_input.tc)) ( and (> rt_input.tc 2) (and (>= rt_input.tb rt_input.tc) (= rt_input.ta rt_input.tc)))) (and ( and (and (>= rt_input.tb rt_input.tc) (> rt_input.tb rt_input.ta)) (> 6 rt_input.tb)) ( and (> 4 rt_input.ta) (and (> rt_input.tb rt_input.tc) (= rt_input.ta rt_input.tc))))) ( or (and ( and (> 5 rt_input.tc) (and (>= rt_input.tb rt_input.tc) (= rt_input.ta rt_input.tc))) (and ( and (> 8 rt_input.tb) (and (>= rt_input.tb rt_input.tc) (> rt_input.tb rt_input.ta))) ( and (> rt_input.ta 3) (and (> rt_input.tb rt_input.tc) (= rt_input.ta rt_input.tc))))) ( or (and ( and (> rt_input.tc 4) (and (>= rt_input.tb rt_input.tc) (= rt_input.ta rt_input.tc))) (and (and (>= rt_input.tb rt_input.tc) (> rt_input.tb rt_input.ta)) (and (> rt_input.tb rt_input.tc) (= rt_input.ta rt_input.tc)))) ( or (and ( and (and (not (= rt_input.ta rt_input.tc)) (= rt_input.tb rt_input.tc)) (> 3 rt_input.tc)) (and ( and (> rt_input.tb 1) (and (>= rt_input.ta rt_input.tc) (= rt_input.tb rt_input.tc))) ( and (= 3 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (>= rt_input.ta rt_input.tb))))) ( or (and ( and (and (not (= rt_input.ta rt_input.tc)) (= rt_input.tb rt_input.tc)) (and (> rt_input.tc 2) (> 5 rt_input.tc))) (and (and (>= rt_input.ta rt_input.tc) (= rt_input.tb rt_input.tc)) ( and (> 6 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (>= rt_input.ta rt_input.tb))))) ( or (and ( and (and (not (= rt_input.ta rt_input.tc)) (= rt_input.tb rt_input.tc)) (and (> rt_input.tc 2) (> 5 rt_input.tc))) (and ( and (> rt_input.tb 3) (and (>= rt_input.ta rt_input.tc) (= rt_input.tb rt_input.tc))) ( and ( and (not (= rt_input.ta rt_input.tc)) (>= rt_input.ta rt_input.tb)) (and (> rt_input.ta 5) (> 8 rt_input.ta))))) ( or (and ( and (> rt_input.tc 4) (and (not (= rt_input.ta rt_input.tc)) (= rt_input.tb rt_input.tc))) (and (and (>= rt_input.ta rt_input.tc) (= rt_input.tb rt_input.tc)) ( and (not (= rt_input.ta rt_input.tc)) (>= rt_input.ta rt_input.tb)))) ( or (and (and (not (= rt_input.ta rt_input.tc)) (= rt_input.tb rt_input.tc)) (and (and (> rt_input.tc rt_input.ta) (= rt_input.tb rt_input.tc)) ( and (not (= rt_input.ta rt_input.tc)) (> rt_input.tb rt_input.ta)))) ( or (and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.tb rt_input.tc))) (and ( and (not (= rt_input.tb rt_input.tc)) (= rt_input.ta rt_input.tb)) ( and (> rt_input.ta 4) ( and (not (= rt_input.ta rt_input.tc)) (= rt_input.ta rt_input.tb))))) ( or (and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.tb rt_input.tc))) (and (>= rt_input.tc rt_input.tb) (> 8 rt_input.tc))) (and ( and (and (>= rt_input.tc rt_input.tb) (> rt_input.tb 1)) ( and (> rt_input.tb 3) ( and (not (= rt_input.tb rt_input.tc)) (= rt_input.ta rt_input.tb)))) ( and (> 5 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (= rt_input.ta rt_input.tb))))) ( or (and ( and (and (>= rt_input.tc rt_input.tb) (> 8 rt_input.tc)) ( and (> 6 rt_input.tc) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.tb rt_input.tc))))) (and ( and (= 3 rt_input.tb) ( and ( and (not (= rt_input.tb rt_input.tc)) (= rt_input.ta rt_input.tb)) (and (>= rt_input.tc rt_input.tb) (> rt_input.tb 1)))) ( and (> 5 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (= rt_input.ta rt_input.tb))))) ( or (and ( and (= 3 rt_input.tc) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.tb rt_input.tc))) (and (>= rt_input.tc rt_input.tb) (> 8 rt_input.tc)))) (and ( and (> 3 rt_input.tb) ( and ( and (not (= rt_input.tb rt_input.tc)) (= rt_input.ta rt_input.tb)) (and (>= rt_input.tc rt_input.tb) (> rt_input.tb 1)))) ( and (> 5 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (= rt_input.ta rt_input.tb))))) (and (and (not (= rt_input.ta rt_input.tc)) (> rt_input.tb rt_input.tc)) (and (and (> rt_input.tb rt_input.tc) (= rt_input.ta rt_input.tb)) ( and (> 5 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (= rt_input.ta rt_input.tb))))) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 137

[Total time]
Total Conversion Time : 0 days, 0 hours, 18 minutes, 1 seconds


21.
[Original predicate]
((!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and ((rt_input.ta - rt_input.tc) <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and (1 == (9 - rt_input.ta))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and ((rt_input.ta - rt_input.tc) <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and !(1 == (9 - rt_input.ta)) and (5 > rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and ((rt_input.ta - rt_input.tc) <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and !(1 == (9 - rt_input.ta)) and !(5 > rt_input.tc) and !(3 >= rt_input.ta) and (9 > rt_input.tc) and (rt_input.ta <= 6) and (5 >= rt_input.ta) and (5 > rt_input.ta) and (5 == rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and ((rt_input.ta - rt_input.tc) <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and !(1 == (9 - rt_input.ta)) and !(5 > rt_input.tc) and !(3 >= rt_input.ta) and (9 > rt_input.tc) and (rt_input.ta <= 6) and (5 >= rt_input.ta) and !(5 > rt_input.ta) and (rt_input.tc <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and ((rt_input.ta - rt_input.tc) <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and !(1 == (9 - rt_input.ta)) and !(5 > rt_input.tc) and !(3 >= rt_input.ta) and (9 > rt_input.tc) and (rt_input.ta <= 6) and !(5 >= rt_input.ta) and !(rt_input.tc >= 8)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and ((rt_input.ta - rt_input.tc) <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and !(1 == (9 - rt_input.ta)) and !(5 > rt_input.tc) and !(3 >= rt_input.ta) and (9 > rt_input.tc) and !(rt_input.ta <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and ((rt_input.ta - rt_input.tc) <= 1) and (rt_input.tb > 1) and !(rt_input.tc > rt_input.ta)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and (1 == (rt_input.tb - rt_input.tc))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and (rt_input.tb >= 8)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and !(rt_input.tb >= 8) and (rt_input.tc >= 5) and !(3 == rt_input.tb) and (rt_input.tc > 5) and (rt_input.tb >= 5) and (rt_input.tc <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and !(rt_input.tb >= 8) and (rt_input.tc >= 5) and !(3 == rt_input.tb) and (rt_input.tc > 5) and (rt_input.tb >= 5) and !(rt_input.tc <= 6) and !(5 == rt_input.tb) and (9 > rt_input.tc) and (rt_input.tb <= 6) and !(rt_input.tc >= 8)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and !(rt_input.tb >= 8) and (rt_input.tc >= 5) and !(3 == rt_input.tb) and (rt_input.tc > 5) and (rt_input.tb >= 5) and !(rt_input.tc <= 6) and !(5 == rt_input.tb) and (9 > rt_input.tc) and !(rt_input.tb <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and !(rt_input.tb >= 8) and (rt_input.tc >= 5) and !(3 == rt_input.tb) and !(rt_input.tc > 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and !(rt_input.tb >= 8) and !(rt_input.tc >= 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and (rt_input.ta >= 5) and (5 > rt_input.tc) and (9 == rt_input.ta) and !(5 == rt_input.tb)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and (rt_input.ta >= 5) and (5 > rt_input.tc) and !(9 == rt_input.ta) and (rt_input.ta > 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and (rt_input.ta >= 5) and (5 > rt_input.tc) and !(9 == rt_input.ta) and !(rt_input.ta > 5) and !(9 == rt_input.tb)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and (rt_input.ta >= 5) and !(5 > rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and (1 == (rt_input.tb - rt_input.tc))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and (5 >= rt_input.tc) and (9 > rt_input.tb) and (rt_input.ta > 3)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and (5 >= rt_input.tc) and (9 > rt_input.tb) and !(rt_input.ta > 3) and !(rt_input.tb >= 8) and (5 > rt_input.tc) and (rt_input.tb <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and (5 >= rt_input.tc) and (9 > rt_input.tb) and !(rt_input.ta > 3) and !(rt_input.tb >= 8) and !(5 > rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and (1 == (9 - rt_input.tb))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and (9 == rt_input.tc) and (rt_input.tb <= 6) and !(3 == rt_input.ta) and (1 == (rt_input.tb - 5))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and (9 == rt_input.tc) and !(rt_input.tb <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and !(9 == rt_input.tc) and (3 >= rt_input.ta) and (1 == (rt_input.tb - 5))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and !(9 == rt_input.tc) and (3 >= rt_input.ta) and !(1 == (rt_input.tb - 5)) and (9 == rt_input.tb) and !(rt_input.tc <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and !(9 == rt_input.tc) and (3 >= rt_input.ta) and !(1 == (rt_input.tb - 5)) and !(9 == rt_input.tb) and (rt_input.tc >= 8) and !(5 >= rt_input.tb)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and !(9 == rt_input.tc) and (3 >= rt_input.ta) and !(1 == (rt_input.tb - 5)) and !(9 == rt_input.tb) and !(rt_input.tc >= 8)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and !(9 == rt_input.tc) and !(3 >= rt_input.ta)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and (1 == (rt_input.ta - rt_input.tc))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and (9 == rt_input.ta) and !(5 >= rt_input.tc) and (rt_input.tb > 3)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and (9 == rt_input.ta) and !(5 >= rt_input.tc) and !(rt_input.tb > 3) and !(rt_input.tc <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and (5 >= rt_input.ta) and (rt_input.tc <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and (5 >= rt_input.ta) and !(rt_input.tc <= 6) and !(5 > rt_input.ta) and (rt_input.tc >= 8) and !(3 >= rt_input.tb) and (9 > rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and (5 >= rt_input.ta) and !(rt_input.tc <= 6) and !(5 > rt_input.ta) and !(rt_input.tc >= 8)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and !(5 >= rt_input.ta) and (rt_input.tb > 3)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and !(5 >= rt_input.ta) and !(rt_input.tb > 3) and (rt_input.tc > 5) and (rt_input.ta <= 6) and (9 > rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and !(5 >= rt_input.ta) and !(rt_input.tb > 3) and (rt_input.tc > 5) and !(rt_input.ta <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and !(5 >= rt_input.ta) and !(rt_input.tb > 3) and !(rt_input.tc > 5) and !(rt_input.ta >= 8) and (rt_input.tc >= 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and !(5 >= rt_input.ta) and !(rt_input.tb > 3) and !(rt_input.tc > 5) and !(rt_input.ta >= 8) and !(rt_input.tc >= 5) and (1 == (rt_input.ta - 5))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and (1 == (rt_input.tb - rt_input.ta)) and (rt_input.tc > 1)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and (1 == (rt_input.ta - rt_input.tb)) and !(1 >= rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (1 == (rt_input.ta - 5)) and !(9 == rt_input.tb)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and (5 >= rt_input.tb) and !(rt_input.ta >= 8) and (5 > rt_input.ta) and !(rt_input.tb >= 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and (5 >= rt_input.tb) and !(rt_input.ta >= 8) and !(5 > rt_input.ta) and !(5 > rt_input.tb)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and !(5 >= rt_input.tb) and (rt_input.ta > 5) and (9 > rt_input.ta)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and !(5 >= rt_input.tb) and (rt_input.ta > 5) and !(9 > rt_input.ta) and !(1 == (rt_input.tb - 5))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and !(5 >= rt_input.tb) and !(rt_input.ta > 5) and !(9 == rt_input.tb) and (rt_input.ta >= 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and !(5 >= rt_input.tb) and !(rt_input.ta > 5) and !(9 == rt_input.tb) and !(rt_input.ta >= 5) and (1 == (rt_input.tb - 5)) and !(2 >= rt_input.ta)))

[Original predicate size] 672

[Final output]
( or (and (and (not (= rt_input.tb rt_input.tc)) (> rt_input.tc rt_input.ta)) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.tb)) ( and (and (> rt_input.tc rt_input.ta) (= 8 rt_input.ta)) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (> (+ 2 rt_input.tc) rt_input.ta)))))) ( or (and ( and (> rt_input.tc rt_input.ta) ( and (> 5 rt_input.tc) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.tb)) ( and ( and (> rt_input.tc rt_input.ta) (not (= 8 rt_input.ta))) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (> (+ 2 rt_input.tc) rt_input.ta)))))) ( or (and ( and ( and (= 5 rt_input.tc) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc)))) ( and (> rt_input.tc rt_input.ta) (and (> rt_input.tc 4) (> 9 rt_input.tc)))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.tb)) ( and ( and ( and (> rt_input.tc rt_input.ta) (not (= 8 rt_input.ta))) (and (> rt_input.ta 3) (> 7 rt_input.ta))) ( and (> 5 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (> (+ 2 rt_input.tc) rt_input.ta))))))) ( or (and ( and ( and (> 7 rt_input.tc) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc)))) ( and (> rt_input.tc rt_input.ta) (and (> rt_input.tc 4) (> 9 rt_input.tc)))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.tb)) ( and ( and ( and (> rt_input.tc rt_input.ta) (not (= 8 rt_input.ta))) (and (> rt_input.ta 3) (> 7 rt_input.ta))) ( and (= 5 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (> (+ 2 rt_input.tc) rt_input.ta))))))) ( or (and ( and ( and (> 8 rt_input.tc) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc)))) ( and (> rt_input.tc rt_input.ta) (and (> rt_input.tc 4) (> 9 rt_input.tc)))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.tb)) ( and ( and ( and (> rt_input.ta 1) (> (+ 2 rt_input.tc) rt_input.ta)) ( and (> rt_input.tc rt_input.ta) (not (= 8 rt_input.ta)))) ( and (and (> rt_input.ta 3) (> 7 rt_input.ta)) ( and (> rt_input.ta 5) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb)))))))) ( or (and ( and (and (> rt_input.tc 4) (> 9 rt_input.tc)) (and (not (= rt_input.tb rt_input.tc)) (> rt_input.tc rt_input.ta))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.tb)) ( and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (> (+ 2 rt_input.tc) rt_input.ta))) ( and ( and (> rt_input.tc rt_input.ta) (not (= 8 rt_input.ta))) (> rt_input.ta 6))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> (+ 2 rt_input.tc) rt_input.ta) (>= rt_input.ta rt_input.tc))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.tb)) ( and ( and (> rt_input.ta 1) (> (+ 2 rt_input.tc) rt_input.ta)) (and (not (= rt_input.ta rt_input.tb)) (> rt_input.ta rt_input.tc))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (= (+ -1 rt_input.tb) rt_input.tc))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (= (+ -1 rt_input.tb) rt_input.tc))) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.ta)))) ( or (and ( and ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))) (and (not (= rt_input.ta rt_input.tc)) (> rt_input.tc rt_input.tb))) (and ( and (and (>= rt_input.tc rt_input.tb) (> rt_input.tb 7)) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (not (= (+ -1 rt_input.tb) rt_input.tc))))) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.ta)))) ( or (and ( and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc)))) (and (> 7 rt_input.tb) (= 6 rt_input.tc))) (and ( and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (not (= (+ -1 rt_input.tb) rt_input.tc)))) ( and ( and (>= rt_input.tc rt_input.tb) (> 8 rt_input.tb)) (> rt_input.tb 4))) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.ta)))) ( or (and ( and (and (>= rt_input.tc rt_input.tb) (> rt_input.tc 6)) ( and (> 8 rt_input.tc) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc)))))) (and ( and ( and ( and (>= rt_input.tc rt_input.tb) (> 8 rt_input.tb)) (> rt_input.tb 4)) ( and (or (> 5 rt_input.tb) (= 6 rt_input.tb)) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (not (= (+ -1 rt_input.tb) rt_input.tc)))))) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.ta)))) ( or (and ( and (and (>= rt_input.tc rt_input.tb) (> rt_input.tc 4)) ( and (> rt_input.tc 6) ( and (> 9 rt_input.tc) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc)))))) (and ( and ( and ( and (>= rt_input.tc rt_input.tb) (> 8 rt_input.tb)) (> rt_input.tb 4)) ( and (> rt_input.tb 6) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (not (= (+ -1 rt_input.tb) rt_input.tc)))))) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.ta)))) ( or (and ( and ( and (> 6 rt_input.tc) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc)))) (and (>= rt_input.tc rt_input.tb) (> rt_input.tc 4))) (and ( and ( and (not (= 3 rt_input.tb)) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb)))) ( and ( and (> rt_input.tb 2) (not (= (+ -1 rt_input.tb) rt_input.tc))) ( and (>= rt_input.tc rt_input.tb) (> 8 rt_input.tb)))) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.ta)))) ( or (and ( and (and (>= rt_input.tc rt_input.tb) (> 5 rt_input.tc)) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))))) (and ( and ( and (>= rt_input.tc rt_input.tb) (> 8 rt_input.tb)) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (not (= (+ -1 rt_input.tb) rt_input.tc))))) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (= 2 rt_input.ta)))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (= 4 rt_input.tc)) (and ( and (> rt_input.tb 4) ( and (not (= 5 rt_input.tb)) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and (= 9 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (= 4 rt_input.tc)) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.tb 4)) ( and ( and (> rt_input.ta 5) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb)))) ( and (> rt_input.ta 2) ( and (> rt_input.ta 4) (not (= 9 rt_input.ta))))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (= 4 rt_input.tc)) (and ( and (> rt_input.tb 4) ( and (not (= 9 rt_input.tb)) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and ( and (> 6 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb)))) ( and (> rt_input.ta 2) ( and (> rt_input.ta 4) (not (= 9 rt_input.ta))))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (> rt_input.tc 4)) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.tb 4)) ( and (> rt_input.ta 2) ( and (> rt_input.ta 4) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (= (+ -1 rt_input.tb) rt_input.tc))) (and ( and (> rt_input.tb 4) ( and (= (+ -1 rt_input.tb) rt_input.tc) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and (> rt_input.ta 2) ( and (> 5 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))))))) ( or (and ( and ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))) ( and (> 6 rt_input.tc) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))))) (and ( and ( and (not (= (+ -1 rt_input.tb) rt_input.tc)) (> 9 rt_input.tb)) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.tb 4))) ( and (= 4 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and (> 5 rt_input.tc) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))))) (and ( and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.tb 4)) ( and ( and (not (= (+ -1 rt_input.tb) rt_input.tc)) (> 9 rt_input.tb)) (> 7 rt_input.tb))) ( and (> 4 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and (= 5 rt_input.tc) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))))) (and ( and ( and (> 8 rt_input.tb) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb)))) ( and (> rt_input.tb 4) ( and (not (= (+ -1 rt_input.tb) rt_input.tc)) (> 9 rt_input.tb)))) ( and (> 4 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))) ( and (> rt_input.tc 5) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))))) (and ( and (and (not (= 7 rt_input.tc)) (= 8 rt_input.tb)) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.tb 4))) ( and (> rt_input.ta 2) ( and (> 5 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))))))) ( or (and ( and (= 9 rt_input.tc) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))))) (and ( and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.tb 4)) (and (not (= 5 rt_input.tc)) (= 6 rt_input.tb))) ( and (or (> 3 rt_input.ta) (= 4 rt_input.ta)) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and (= 9 rt_input.tc) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))))) (and ( and ( and (> rt_input.tb 6) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb)))) ( and (> rt_input.tb 4) ( and (not (= (+ -1 rt_input.tb) rt_input.tc)) (not (= 8 rt_input.tb))))) ( and (> rt_input.ta 2) ( and (> 5 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))))))) ( or (and ( and ( and (> rt_input.tc 5) (not (= 9 rt_input.tc))) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))))) (and ( and ( and (= 6 rt_input.tb) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb)))) ( and (> rt_input.tb 4) ( and (not (= (+ -1 rt_input.tb) rt_input.tc)) (not (= 8 rt_input.tb))))) ( and (> 4 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and ( and (> rt_input.tc 6) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc)))) ( and ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))) ( and (> rt_input.tc 5) (not (= 9 rt_input.tc))))) (and ( and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.tb 4)) (and (not (= 8 rt_input.tc)) (= 9 rt_input.tb))) ( and (> 4 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and ( and (> rt_input.tc 7) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc)))) ( and ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))) ( and (> rt_input.tc 5) (not (= 9 rt_input.tc))))) (and ( and ( and (> rt_input.tb 4) ( and (not (= (+ -1 rt_input.tb) rt_input.tc)) (not (= 8 rt_input.tb)))) ( and ( and (not (= 6 rt_input.tb)) (not (= 9 rt_input.tb))) ( and (> rt_input.tb 5) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb)))))) ( and (> 4 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and ( and (> 8 rt_input.tc) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc)))) ( and ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))) ( and (> rt_input.tc 5) (not (= 9 rt_input.tc))))) (and ( and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.tb 4)) ( and ( and (not (= (+ -1 rt_input.tb) rt_input.tc)) (not (= 8 rt_input.tb))) ( and (not (= 6 rt_input.tb)) (not (= 9 rt_input.tb))))) ( and (> 4 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and ( and (> rt_input.tc 5) (not (= 9 rt_input.tc))) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.tb) rt_input.tc))))) (and ( and ( and (not (= (+ -1 rt_input.tb) rt_input.tc)) (not (= 8 rt_input.tb))) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.tb 4))) ( and (= 4 rt_input.ta) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (= (+ -1 rt_input.ta) rt_input.tc))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (and (> rt_input.tb 2) (> 5 rt_input.tb))) ( and (> rt_input.ta 2) ( and (= (+ -1 rt_input.ta) rt_input.tc) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))))))) ( or (and ( and ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.ta) rt_input.tc))) ( and (> rt_input.tc 5) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))))) (and ( and (and (> rt_input.tb 2) (> 5 rt_input.tb)) ( and (> rt_input.tb 3) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and (and (not (= 8 rt_input.tc)) (= 9 rt_input.ta)) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and (> rt_input.tc 6) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.ta) rt_input.tc))))) (and ( and (and (> rt_input.tb 2) (> 5 rt_input.tb)) ( and (> 4 rt_input.tb) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and (and (not (= 8 rt_input.tc)) (= 9 rt_input.ta)) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2))))) ( or (and ( and ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.ta) rt_input.tc))) ( and (> 7 rt_input.tc) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (and (> rt_input.tb 2) (> 5 rt_input.tb))) ( and ( and (> 6 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb)))) ( and (> rt_input.ta 2) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (not (= 9 rt_input.ta))))))) ( or (and ( and ( and (> 9 rt_input.tc) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc)))) ( and ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.ta) rt_input.tc))) (> rt_input.tc 7))) (and ( and (and (> rt_input.tb 2) (> 5 rt_input.tb)) ( and (> rt_input.tb 3) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2)) (and (not (= 4 rt_input.tc)) (= 5 rt_input.ta))))) ( or (and ( and (= 7 rt_input.tc) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.ta) rt_input.tc))))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (and (> rt_input.tb 2) (> 5 rt_input.tb))) ( and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2)) (and (not (= 4 rt_input.tc)) (= 5 rt_input.ta))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.ta) rt_input.tc)))) (and ( and (and (> rt_input.tb 2) (> 5 rt_input.tb)) ( and (> rt_input.tb 3) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and ( and (> rt_input.ta 5) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb)))) ( and (> rt_input.ta 2) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (not (= 9 rt_input.ta))))))) ( or (and ( and (and (> rt_input.tc 5) (> 9 rt_input.tc)) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.ta) rt_input.tc))))) (and ( and (and (> rt_input.tb 2) (> 5 rt_input.tb)) ( and (> 4 rt_input.tb) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2)) (and (not (= 5 rt_input.tc)) (= 6 rt_input.ta))))) ( or (and ( and ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.ta) rt_input.tc))) ( and (> rt_input.tc 5) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))))) (and ( and (and (> rt_input.tb 2) (> 5 rt_input.tb)) ( and (> 4 rt_input.tb) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2)) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (not (= 9 rt_input.ta))) (> rt_input.ta 6))))) ( or (and ( and (= 5 rt_input.tc) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.ta) rt_input.tc))))) (and ( and (and (> rt_input.tb 2) (> 5 rt_input.tb)) ( and (> 4 rt_input.tb) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) (> rt_input.ta 2)) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (not (= 9 rt_input.ta))) (and (> rt_input.ta 5) (> 8 rt_input.ta)))))) ( or (and ( and (> 5 rt_input.tc) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) ( and (> rt_input.tc 3) (not (= (+ -1 rt_input.ta) rt_input.tc))))) (and ( and (and (> rt_input.tb 2) (> 5 rt_input.tb)) ( and (> 4 rt_input.tb) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and ( and (> rt_input.ta 2) ( and (not (= (+ -1 rt_input.ta) rt_input.tc)) (not (= 9 rt_input.ta)))) ( and (and (> rt_input.ta 5) (> 8 rt_input.ta)) ( and (= 6 rt_input.ta) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb)))))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (and (> rt_input.tc 1) (> 4 rt_input.tc))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (= (+ 1 rt_input.ta) rt_input.tb))) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (= (+ 1 rt_input.ta) rt_input.tb))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (and (> rt_input.tc 1) (> 4 rt_input.tc))) (and ( and ( and (> rt_input.tb 2) (not (= (+ 1 rt_input.ta) rt_input.tb))) ( and (= (+ -1 rt_input.ta) rt_input.tb) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))))) ( and ( and (> rt_input.ta 1) (not (= (+ 1 rt_input.ta) rt_input.tb))) ( and (= (+ -1 rt_input.ta) rt_input.tb) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (= 3 rt_input.tc)) (and ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 9 rt_input.tb))) ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (not (= (+ 1 rt_input.ta) rt_input.tb))))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (= 6 rt_input.ta)) ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (not (= (+ 1 rt_input.ta) rt_input.tb))))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (= 3 rt_input.tc)) (and ( and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 8 rt_input.tb))) (> 5 rt_input.tb))) ( and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 6 rt_input.ta))) (> 5 rt_input.ta))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (= 3 rt_input.tc)) (and ( and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (not (= (+ 1 rt_input.ta) rt_input.tb)))) (and (not (= 6 rt_input.ta)) (= 5 rt_input.tb))) ( and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 6 rt_input.ta))) (and (> rt_input.ta 4) (> 8 rt_input.ta)))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (= 3 rt_input.tc)) (and ( and ( and (> rt_input.tb 5) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb)))) ( and ( and (> rt_input.tb 2) (not (= (+ 1 rt_input.ta) rt_input.tb))) ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 8 rt_input.tb))))) ( and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 6 rt_input.ta))) (and (> rt_input.ta 5) (> 9 rt_input.ta)))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (= 3 rt_input.tc)) (and ( and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 8 rt_input.tb))) (> rt_input.tb 6))) ( and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 6 rt_input.ta))) (> rt_input.ta 8))))) ( or (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (= 3 rt_input.tc)) (and ( and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.tb 2) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 8 rt_input.tb))) ( and (> rt_input.tb 5) (not (= 9 rt_input.tb))))) ( and ( and ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb))) ( and (> rt_input.ta 1) (not (= (+ 1 rt_input.ta) rt_input.tb)))) ( and ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 6 rt_input.ta))) (= 5 rt_input.ta))))) (and ( and ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tc))) (= 3 rt_input.tc)) (and ( and ( and ( and (> rt_input.tb 2) (not (= (+ 1 rt_input.ta) rt_input.tb))) ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 8 rt_input.tb)))) ( and ( and (> rt_input.tb 5) (not (= 9 rt_input.tb))) ( and (= 6 rt_input.tb) ( and (not (= rt_input.tb rt_input.tc)) (not (= rt_input.ta rt_input.tb)))))) ( and ( and ( and (> rt_input.ta 1) (not (= (+ 1 rt_input.ta) rt_input.tb))) ( and (not (= (+ -1 rt_input.ta) rt_input.tb)) (not (= 6 rt_input.ta)))) ( and (> 5 rt_input.ta) ( and (> rt_input.ta 2) ( and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.ta rt_input.tb)))))))) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 756

[Total time]
Total Conversion Time : 0 days, 2 hours, 43 minutes, 45 seconds


22.
[Original predicate]
((rt_input.ta == rt_input.tb) and (rt_input.ta >= rt_input.tc) and !(rt_input.ta > rt_input.tc))

[Original predicate size] 3

[Final output]
(and (= rt_input.ta rt_input.tc) (and (= rt_input.ta rt_input.tb) (and (= rt_input.ta rt_input.tc) (= rt_input.tb rt_input.tc)))) 

[Final predicate size] 4

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 7 seconds


