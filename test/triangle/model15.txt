1.
[Original predicate]
((rt_input.triangleb >= rt_input.trianglec) and !(rt_input.triangleb > rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
( and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.triangleb)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 21 seconds


2.
[Original predicate]
((rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
(and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


3.
[Original predicate]
(((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec)))

[Original predicate size] 5

[Final output]
( or (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglea rt_input.trianglec)) (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglec rt_input.trianglea)) ) 

[Final predicate size] 4

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 2 seconds


4.
[Original predicate]
((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec))

[Original predicate size] 3

[Final output]
(and (= rt_input.trianglea rt_input.triangleb) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


5.
[Original predicate]
(!(rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
(and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


6.
[Original predicate]
((!(rt_input.trianglea == rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb) and (rt_input.triangleb > rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb) and !(rt_input.triangleb > rt_input.trianglec) and !(rt_input.triangleb >= rt_input.trianglec)))

[Original predicate size] 7

[Final output]
( or (and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.triangleb rt_input.trianglec)) (not (= rt_input.trianglec rt_input.trianglea))) (and (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglec rt_input.triangleb)) (not (= rt_input.trianglec rt_input.trianglea))) ) 

[Final predicate size] 6

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 44 seconds


7.
[Original predicate]
(!(rt_input.triangleb > rt_input.trianglec) and (rt_input.triangleb >= rt_input.trianglec) and !(rt_input.trianglea == rt_input.trianglec))

[Original predicate size] 3

[Final output]
(and (= rt_input.trianglec rt_input.triangleb) (not (= rt_input.trianglec rt_input.trianglea))) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


8.
[Original predicate]
((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.trianglec))

[Original predicate size] 3

[Final output]
(and (= rt_input.trianglea rt_input.triangleb) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


9.
[Original predicate]
((rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
(and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


10.
[Original predicate]
((!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea == rt_input.trianglec) and (rt_input.triangleb >= rt_input.trianglec) and (rt_input.triangleb > rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea == rt_input.trianglec) and !(rt_input.triangleb >= rt_input.trianglec)))

[Original predicate size] 7

[Final output]
( or (and (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.triangleb rt_input.trianglec)) (not (= rt_input.trianglec rt_input.trianglea))) (and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglec rt_input.triangleb)) (not (= rt_input.trianglec rt_input.trianglea))) ) 

[Final predicate size] 6

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 42 seconds


11.
[Original predicate]
(((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec)))

[Original predicate size] 5

[Final output]
( or (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglea rt_input.trianglec)) (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglec rt_input.trianglea)) ) 

[Final predicate size] 4

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 2 seconds


12.
[Original predicate]
((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec))

[Original predicate size] 3

[Final output]
(and (= rt_input.trianglea rt_input.triangleb) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


13.
[Original predicate]
((rt_input.triangleb >= rt_input.trianglec) and !(rt_input.triangleb > rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
( and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.triangleb)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 21 seconds


14.
[Original predicate]
((!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea == rt_input.trianglec) and (rt_input.triangleb >= rt_input.trianglec) and (rt_input.triangleb > rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea == rt_input.trianglec) and !(rt_input.triangleb >= rt_input.trianglec)))

[Original predicate size] 7

[Final output]
( or (and (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.triangleb rt_input.trianglec)) (not (= rt_input.trianglec rt_input.trianglea))) (and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglec rt_input.triangleb)) (not (= rt_input.trianglec rt_input.trianglea))) ) 

[Final predicate size] 6

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 42 seconds


15.
[Original predicate]
(((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec)))

[Original predicate size] 5

[Final output]
( or (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglea rt_input.trianglec)) (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglec rt_input.trianglea)) ) 

[Final predicate size] 4

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 2 seconds


16.
[Original predicate]
((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec))

[Original predicate size] 3

[Final output]
(and (= rt_input.trianglea rt_input.triangleb) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


17.
[Original predicate]
((rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
(and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


18.
[Original predicate]
((!(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and (2 == rt_input.trianglec) and !(2 == rt_input.triangleb)) or (!(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and !(2 == rt_input.trianglec) and (2 == rt_input.triangleb)) or (!(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and !(2 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(5 >= rt_input.trianglea) and !(4 == rt_input.triangleb) and (4 == rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and !(2 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(5 >= rt_input.trianglea) and !(4 == rt_input.triangleb) and !(4 == rt_input.trianglec) and !(9 == rt_input.trianglea) and (5 == rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and !(2 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(5 >= rt_input.trianglea) and !(4 == rt_input.triangleb) and !(4 == rt_input.trianglec) and !(9 == rt_input.trianglea) and !(5 == rt_input.trianglec) and (3 == rt_input.trianglec) and (1 >= rt_input.triangleb)) or (!(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and !(2 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(5 >= rt_input.trianglea) and !(4 == rt_input.triangleb) and !(4 == rt_input.trianglec) and !(9 == rt_input.trianglea) and !(5 == rt_input.trianglec) and !(3 == rt_input.trianglec) and (3 == rt_input.triangleb)) or (!(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea >= rt_input.triangleb)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea >= rt_input.triangleb) and (4 == rt_input.triangleb) and !(4 == rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea >= rt_input.triangleb) and !(4 == rt_input.triangleb) and (9 > rt_input.trianglec) and (5 >= rt_input.triangleb) and (5 >= rt_input.trianglec) and (4 == rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea >= rt_input.triangleb) and !(4 == rt_input.triangleb) and (9 > rt_input.trianglec) and (5 >= rt_input.triangleb) and (5 >= rt_input.trianglec) and !(4 == rt_input.trianglec) and (4 >= rt_input.triangleb) and (1 >= rt_input.trianglea) and (4 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea >= rt_input.triangleb) and !(4 == rt_input.triangleb) and (9 > rt_input.trianglec) and (5 >= rt_input.triangleb) and (5 >= rt_input.trianglec) and !(4 == rt_input.trianglec) and (4 >= rt_input.triangleb) and (1 >= rt_input.trianglea) and (4 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and (2 >= rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea >= rt_input.triangleb) and !(4 == rt_input.triangleb) and (9 > rt_input.trianglec) and (5 >= rt_input.triangleb) and (5 >= rt_input.trianglec) and !(4 == rt_input.trianglec) and (4 >= rt_input.triangleb) and (1 >= rt_input.trianglea) and !(4 >= rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea >= rt_input.triangleb) and !(4 == rt_input.triangleb) and (9 > rt_input.trianglec) and (5 >= rt_input.triangleb) and (5 >= rt_input.trianglec) and !(4 == rt_input.trianglec) and !(4 >= rt_input.triangleb) and (4 > rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea >= rt_input.triangleb) and !(4 == rt_input.triangleb) and (9 > rt_input.trianglec) and (5 >= rt_input.triangleb) and !(5 >= rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea >= rt_input.triangleb) and !(4 == rt_input.triangleb) and (9 > rt_input.trianglec) and !(5 >= rt_input.triangleb)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea >= rt_input.triangleb) and !(4 == rt_input.triangleb) and !(9 > rt_input.trianglec) and !(9 == rt_input.triangleb)))

[Original predicate size] 144

[Final output]
( or (and ( and (not (= 2 rt_input.triangleb)) (> rt_input.trianglea rt_input.triangleb)) (and (> rt_input.trianglea rt_input.trianglec) (= 2 rt_input.trianglec))) ( or (and (and (> rt_input.trianglea rt_input.triangleb) (= 2 rt_input.triangleb)) (and (> rt_input.trianglea rt_input.trianglec) (not (= 2 rt_input.trianglec)))) ( or (and ( and (> rt_input.trianglea rt_input.triangleb) ( and (not (= 2 rt_input.triangleb)) (not (= 4 rt_input.triangleb)))) (and (and (> rt_input.trianglea 5) (> rt_input.trianglea rt_input.trianglec)) (= 4 rt_input.trianglec))) ( or (and ( and (> rt_input.trianglea rt_input.triangleb) ( and (not (= 2 rt_input.triangleb)) (not (= 4 rt_input.triangleb)))) (and ( and (> rt_input.trianglea rt_input.trianglec) ( and (> rt_input.trianglea 5) (not (= 9 rt_input.trianglea)))) (= 5 rt_input.trianglec))) ( or (and (and (> 2 rt_input.triangleb) (> rt_input.trianglea rt_input.triangleb)) (and ( and (> rt_input.trianglea rt_input.trianglec) ( and (> rt_input.trianglea 5) (not (= 9 rt_input.trianglea)))) (= 3 rt_input.trianglec))) ( or (and (and (> rt_input.trianglea rt_input.triangleb) (= 3 rt_input.triangleb)) (and ( and (> rt_input.trianglea rt_input.trianglec) ( and (> rt_input.trianglea 5) (not (= 9 rt_input.trianglea)))) (or (> rt_input.trianglec 5) (> 2 rt_input.trianglec)))) ( or (and (> rt_input.triangleb rt_input.trianglea) (> rt_input.trianglea rt_input.trianglec)) ( or (and (> rt_input.trianglea rt_input.triangleb) (> rt_input.trianglec rt_input.trianglea)) ( or (and (and (> rt_input.triangleb rt_input.trianglea) (= 4 rt_input.triangleb)) (and (> rt_input.trianglec rt_input.trianglea) (not (= 4 rt_input.trianglec)))) ( or (and ( and (> rt_input.triangleb rt_input.trianglea) (or (> 4 rt_input.triangleb) (= 5 rt_input.triangleb))) (and (> rt_input.trianglec rt_input.trianglea) (= 4 rt_input.trianglec))) ( or (and (and (> rt_input.triangleb rt_input.trianglea) (> 3 rt_input.triangleb)) (and (and (> 2 rt_input.trianglea) (> rt_input.trianglec rt_input.trianglea)) (= 3 rt_input.trianglec))) ( or (and (and (> rt_input.triangleb rt_input.trianglea) (= 3 rt_input.triangleb)) (and (and (> 2 rt_input.trianglea) (> rt_input.trianglec rt_input.trianglea)) (> 3 rt_input.trianglec))) ( or (and (and (> rt_input.triangleb rt_input.trianglea) (> 4 rt_input.triangleb)) (and (and (> 2 rt_input.trianglea) (> rt_input.trianglec rt_input.trianglea)) (= 5 rt_input.trianglec))) ( or (and (and (> rt_input.triangleb rt_input.trianglea) (= 5 rt_input.triangleb)) (and (> rt_input.trianglec rt_input.trianglea) (> 4 rt_input.trianglec))) ( or (and ( and (> rt_input.triangleb rt_input.trianglea) (or (> 4 rt_input.triangleb) (= 5 rt_input.triangleb))) (and (> rt_input.trianglec rt_input.trianglea) (and (> rt_input.trianglec 5) (> 9 rt_input.trianglec)))) ( or (and (and (> rt_input.triangleb 5) (> rt_input.triangleb rt_input.trianglea)) (and (> rt_input.trianglec rt_input.trianglea) (> 9 rt_input.trianglec))) (and ( and (> rt_input.triangleb rt_input.trianglea) ( and (not (= 4 rt_input.triangleb)) (not (= 9 rt_input.triangleb)))) (and (> rt_input.trianglec rt_input.trianglea) (> rt_input.trianglec 8))) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 81

[Total time]
Total Conversion Time : 0 days, 0 hours, 6 minutes, 24 seconds


19.
[Original predicate]
(((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea > rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea > 4) and !(9 > rt_input.trianglec) and (9 > rt_input.triangleb)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea > 4) and (4 >= rt_input.trianglec) and (4 > rt_input.triangleb) and (4 > rt_input.trianglec) and !(3 == rt_input.trianglea) and !(1 >= rt_input.trianglec) and (1 >= rt_input.triangleb)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea > 4) and (4 >= rt_input.trianglec) and (4 > rt_input.triangleb) and (4 > rt_input.trianglec) and !(3 == rt_input.trianglea) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.triangleb) and !(2 == rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea > 4) and (4 >= rt_input.trianglec) and (4 > rt_input.triangleb) and !(4 > rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea > 4) and !(4 >= rt_input.trianglec)))

[Original predicate size] 36

[Final output]
( or (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglea rt_input.trianglec)) ( or (and (and (> 9 rt_input.triangleb) (= rt_input.trianglea rt_input.triangleb)) (and (and (>= rt_input.trianglec rt_input.trianglea) (> rt_input.trianglea 4)) (> rt_input.trianglec 8))) ( or (and (and (> 2 rt_input.triangleb) (= rt_input.trianglea rt_input.triangleb)) (and ( and (not (= 3 rt_input.trianglea)) (and (>= rt_input.trianglec rt_input.trianglea) (> 5 rt_input.trianglea))) (and (> rt_input.trianglec 1) (> 4 rt_input.trianglec)))) ( or (and ( and (> rt_input.triangleb 1) (and (> 4 rt_input.triangleb) (= rt_input.trianglea rt_input.triangleb))) (and ( and (not (= 3 rt_input.trianglea)) (and (>= rt_input.trianglec rt_input.trianglea) (> 5 rt_input.trianglea))) (= 3 rt_input.trianglec))) ( or (and (and (> 4 rt_input.triangleb) (= rt_input.trianglea rt_input.triangleb)) (and (and (>= rt_input.trianglec rt_input.trianglea) (> 5 rt_input.trianglea)) (= 4 rt_input.trianglec))) (and (= rt_input.trianglea rt_input.triangleb) (and (and (>= rt_input.trianglec rt_input.trianglea) (> 5 rt_input.trianglea)) (> rt_input.trianglec 4))) ) ) ) ) ) 

[Final predicate size] 30

[Total time]
Total Conversion Time : 0 days, 0 hours, 1 minutes, 32 seconds


20.
[Original predicate]
(((4 == rt_input.triangleb) and (4 == rt_input.trianglec) and !(4 == rt_input.trianglea)) or (!(4 == rt_input.triangleb) and !(4 == rt_input.trianglec) and (5 >= rt_input.trianglec) and (5 >= rt_input.triangleb) and (9 == rt_input.trianglea) and !(2 == rt_input.trianglec)) or (!(4 == rt_input.triangleb) and !(4 == rt_input.trianglec) and (5 >= rt_input.trianglec) and (5 >= rt_input.triangleb) and !(9 == rt_input.trianglea) and (2 == rt_input.trianglec) and (2 == rt_input.triangleb) and !(2 == rt_input.trianglea)) or (!(4 == rt_input.triangleb) and !(4 == rt_input.trianglec) and (5 >= rt_input.trianglec) and (5 >= rt_input.triangleb) and !(9 == rt_input.trianglea) and !(2 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(4 == rt_input.trianglea) and (4 >= rt_input.triangleb) and (4 >= rt_input.trianglec) and (5 == rt_input.trianglea)) or (!(4 == rt_input.triangleb) and !(4 == rt_input.trianglec) and (5 >= rt_input.trianglec) and (5 >= rt_input.triangleb) and !(9 == rt_input.trianglea) and !(2 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(4 == rt_input.trianglea) and (4 >= rt_input.triangleb) and (4 >= rt_input.trianglec) and !(5 == rt_input.trianglea) and (2 >= rt_input.triangleb) and (1 >= rt_input.trianglec) and !(1 >= rt_input.trianglea)) or (!(4 == rt_input.triangleb) and !(4 == rt_input.trianglec) and (5 >= rt_input.trianglec) and (5 >= rt_input.triangleb) and !(9 == rt_input.trianglea) and !(2 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(4 == rt_input.trianglea) and (4 >= rt_input.triangleb) and (4 >= rt_input.trianglec) and !(5 == rt_input.trianglea) and !(2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and (2 >= rt_input.trianglea)) or (!(4 == rt_input.triangleb) and !(4 == rt_input.trianglec) and (5 >= rt_input.trianglec) and (5 >= rt_input.triangleb) and !(9 == rt_input.trianglea) and !(2 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(4 == rt_input.trianglea) and (4 >= rt_input.triangleb) and (4 >= rt_input.trianglec) and !(5 == rt_input.trianglea) and !(2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(2 >= rt_input.trianglea) and !(4 > rt_input.trianglea)) or (!(4 == rt_input.triangleb) and !(4 == rt_input.trianglec) and (5 >= rt_input.trianglec) and (5 >= rt_input.triangleb) and !(9 == rt_input.trianglea) and !(2 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(4 == rt_input.trianglea) and !(4 >= rt_input.triangleb) and !(4 > rt_input.trianglec) and !(5 == rt_input.trianglea)) or (!(4 == rt_input.triangleb) and !(4 == rt_input.trianglec) and !(5 >= rt_input.trianglec) and !(9 > rt_input.triangleb) and (9 > rt_input.trianglea) and !(9 > rt_input.trianglec)))

[Original predicate size] 88

[Final output]
( or (and (= 4 rt_input.triangleb) (and (not (= 4 rt_input.trianglea)) (= 4 rt_input.trianglec))) ( or (and (or (> 4 rt_input.triangleb) (= 5 rt_input.triangleb)) (and (= 9 rt_input.trianglea) ( and (not (= 2 rt_input.trianglec)) (or (> 4 rt_input.trianglec) (= 5 rt_input.trianglec))))) ( or (and (= 2 rt_input.triangleb) (and ( and (not (= 9 rt_input.trianglea)) (not (= 2 rt_input.trianglea))) (= 2 rt_input.trianglec))) ( or (and (or (> 2 rt_input.triangleb) (= 3 rt_input.triangleb)) (and (= 5 rt_input.trianglea) (or (> 2 rt_input.trianglec) (= 3 rt_input.trianglec)))) ( or (and (> 2 rt_input.triangleb) (and ( and ( and (not (= 9 rt_input.trianglea)) (not (= 4 rt_input.trianglea))) ( and (not (= 5 rt_input.trianglea)) (> rt_input.trianglea 1))) (> 2 rt_input.trianglec))) ( or (and (= 3 rt_input.triangleb) (and (> 3 rt_input.trianglea) (= 3 rt_input.trianglec))) ( or (and (= 3 rt_input.triangleb) (and (and (not (= 9 rt_input.trianglea)) (> rt_input.trianglea 5)) (= 3 rt_input.trianglec))) ( or (and (= 5 rt_input.triangleb) (and ( and (not (= 5 rt_input.trianglea)) ( and (not (= 9 rt_input.trianglea)) (not (= 4 rt_input.trianglea)))) (= 5 rt_input.trianglec))) (and (> rt_input.triangleb 8) (and (> 9 rt_input.trianglea) (> rt_input.trianglec 8))) ) ) ) ) ) ) ) ) 

[Final predicate size] 39

[Total time]
Total Conversion Time : 0 days, 0 hours, 4 minutes, 17 seconds


