1.
[Original predicate]
((rt_input.triangleb >= rt_input.trianglec) and !(rt_input.triangleb > rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
( and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.triangleb)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 21 seconds


2.
[Original predicate]
((rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
(and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


3.
[Original predicate]
(((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec)))

[Original predicate size] 5

[Final output]
( or (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglea rt_input.trianglec)) (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglec rt_input.trianglea)) ) 

[Final predicate size] 4

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 2 seconds


4.
[Original predicate]
((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec))

[Original predicate size] 3

[Final output]
(and (= rt_input.trianglea rt_input.triangleb) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


5.
[Original predicate]
((rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
(and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


6.
[Original predicate]
((!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea == rt_input.trianglec) and (rt_input.triangleb >= rt_input.trianglec) and (rt_input.triangleb > rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea == rt_input.trianglec) and !(rt_input.triangleb >= rt_input.trianglec)))

[Original predicate size] 7

[Final output]
( or (and (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.triangleb rt_input.trianglec)) (not (= rt_input.trianglec rt_input.trianglea))) (and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglec rt_input.triangleb)) (not (= rt_input.trianglec rt_input.trianglea))) ) 

[Final predicate size] 6

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 42 seconds


7.
[Original predicate]
(((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec)))

[Original predicate size] 5

[Final output]
( or (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglea rt_input.trianglec)) (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglec rt_input.trianglea)) ) 

[Final predicate size] 4

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 2 seconds


8.
[Original predicate]
((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec))

[Original predicate size] 3

[Final output]
(and (= rt_input.trianglea rt_input.triangleb) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


9.
[Original predicate]
((rt_input.triangleb >= rt_input.trianglec) and !(rt_input.triangleb > rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
( and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.triangleb)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 21 seconds


10.
[Original predicate]
((!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea == rt_input.trianglec) and (rt_input.triangleb >= rt_input.trianglec) and (rt_input.triangleb > rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea == rt_input.trianglec) and !(rt_input.triangleb >= rt_input.trianglec)))

[Original predicate size] 7

[Final output]
( or (and (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.triangleb rt_input.trianglec)) (not (= rt_input.trianglec rt_input.trianglea))) (and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglec rt_input.triangleb)) (not (= rt_input.trianglec rt_input.trianglea))) ) 

[Final predicate size] 6

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 42 seconds


11.
[Original predicate]
(((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea >= rt_input.trianglec)))

[Original predicate size] 5

[Final output]
( or (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglea rt_input.trianglec)) (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglec rt_input.trianglea)) ) 

[Final predicate size] 4

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 2 seconds


12.
[Original predicate]
((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec))

[Original predicate size] 3

[Final output]
(and (= rt_input.trianglea rt_input.triangleb) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


13.
[Original predicate]
(!(rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
(and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


14.
[Original predicate]
((!(rt_input.trianglea == rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb) and (rt_input.triangleb > rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb) and !(rt_input.triangleb > rt_input.trianglec) and !(rt_input.triangleb >= rt_input.trianglec)))

[Original predicate size] 7

[Final output]
( or (and (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.triangleb rt_input.trianglec)) (not (= rt_input.trianglec rt_input.trianglea))) (and (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglec rt_input.triangleb)) (not (= rt_input.trianglec rt_input.trianglea))) ) 

[Final predicate size] 6

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 44 seconds


15.
[Original predicate]
(!(rt_input.triangleb > rt_input.trianglec) and (rt_input.triangleb >= rt_input.trianglec) and !(rt_input.trianglea == rt_input.trianglec))

[Original predicate size] 3

[Final output]
(and (= rt_input.trianglec rt_input.triangleb) (not (= rt_input.trianglec rt_input.trianglea))) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


16.
[Original predicate]
((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.trianglec))

[Original predicate size] 3

[Final output]
(and (= rt_input.trianglea rt_input.triangleb) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


17.
[Original predicate]
((rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
(and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


18.
[Original predicate]
((!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea == rt_input.trianglec) and (rt_input.triangleb >= rt_input.trianglec) and (rt_input.triangleb > rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea == rt_input.trianglec) and !(rt_input.triangleb >= rt_input.trianglec)))

[Original predicate size] 7

[Final output]
( or (and (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.triangleb rt_input.trianglec)) (not (= rt_input.trianglec rt_input.trianglea))) (and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglec rt_input.triangleb)) (not (= rt_input.trianglec rt_input.trianglea))) ) 

[Final predicate size] 6

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 41 seconds


19.
[Original predicate]
(((rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea > rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= 5) and (9 == rt_input.trianglec) and (9 > rt_input.triangleb)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea >= 5) and (5 > rt_input.trianglec) and (3 >= rt_input.triangleb) and (3 >= rt_input.trianglec) and !(1 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (rt_input.trianglea > 1) and !(2 >= rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea >= 5) and (5 > rt_input.trianglec) and (3 >= rt_input.triangleb) and (3 >= rt_input.trianglec) and !(1 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and !(rt_input.trianglea > 1)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea >= 5) and (5 > rt_input.trianglec) and (3 >= rt_input.triangleb) and !(3 >= rt_input.trianglec)) or ((rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and !(rt_input.trianglea >= 5) and !(5 > rt_input.trianglec)))

[Original predicate size] 36

[Final output]
( or (and (= rt_input.trianglea rt_input.triangleb) (> rt_input.trianglea rt_input.trianglec)) ( or (and (and (> 9 rt_input.triangleb) (= rt_input.trianglea rt_input.triangleb)) (and (and (>= rt_input.trianglec rt_input.trianglea) (> rt_input.trianglea 4)) (= 9 rt_input.trianglec))) ( or (and (and (> 3 rt_input.triangleb) (= rt_input.trianglea rt_input.triangleb)) (and ( and (> rt_input.trianglea 1) (and (>= rt_input.trianglec rt_input.trianglea) (> 5 rt_input.trianglea))) (= 3 rt_input.trianglec))) ( or (and (and (> 3 rt_input.triangleb) (= rt_input.trianglea rt_input.triangleb)) (and (and (>= rt_input.trianglec rt_input.trianglea) (> 2 rt_input.trianglea)) (and (> rt_input.trianglec 1) (> 4 rt_input.trianglec)))) ( or (and (and (> 4 rt_input.triangleb) (= rt_input.trianglea rt_input.triangleb)) (and (and (>= rt_input.trianglec rt_input.trianglea) (> 5 rt_input.trianglea)) (= 4 rt_input.trianglec))) (and (= rt_input.trianglea rt_input.triangleb) (and (and (>= rt_input.trianglec rt_input.trianglea) (> 5 rt_input.trianglea)) (> rt_input.trianglec 4))) ) ) ) ) ) 

[Final predicate size] 28

[Total time]
Total Conversion Time : 0 days, 0 hours, 1 minutes, 10 seconds


20.
[Original predicate]
((rt_input.triangleb >= rt_input.trianglec) and !(rt_input.triangleb > rt_input.trianglec) and !(rt_input.trianglea == rt_input.trianglec))

[Original predicate size] 3

[Final output]
(and (= rt_input.trianglec rt_input.triangleb) (not (= rt_input.trianglec rt_input.trianglea))) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


