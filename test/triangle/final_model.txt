1.
[Original predicate]
(!(rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
(and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


2.
[Original predicate]
(!(rt_input.trianglea > rt_input.triangleb) and (rt_input.trianglea >= rt_input.triangleb) and !(1 > rt_output.result))

[Original predicate size] 3

[Final output]
(and (> rt_output.result 0) (= rt_input.trianglea rt_input.triangleb)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


3.
[Original predicate]
(1 > rt_output.result)

[Original predicate size] 1

[Final output]
(> 1 rt_output.result) 

[Final predicate size] 1

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 0 seconds


4.
[Original predicate]
((!(3 == rt_output.result) and !(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea > rt_input.trianglec) and (2 == rt_output.result) and (5 > rt_input.triangleb) and (5 > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and (2 == rt_input.trianglea)) or (!(3 == rt_output.result) and !(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea > rt_input.trianglec) and (2 == rt_output.result) and (5 > rt_input.triangleb) and (5 > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and !(2 == rt_input.trianglea) and (1 >= rt_input.trianglec) and (1 >= rt_input.triangleb)) or (!(3 == rt_output.result) and !(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea > rt_input.trianglec) and (2 == rt_output.result) and (5 > rt_input.triangleb) and (5 > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and !(2 == rt_input.trianglea) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.triangleb) and (5 > rt_input.trianglea)) or (!(3 == rt_output.result) and !(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea > rt_input.trianglec) and (2 == rt_output.result) and (5 > rt_input.triangleb) and (5 > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and !(2 == rt_input.trianglea) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.triangleb) and !(5 > rt_input.trianglea) and (3 == rt_input.triangleb) and (3 == rt_input.trianglec)) or (!(3 == rt_output.result) and !(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea > rt_input.trianglec) and (2 == rt_output.result) and (5 > rt_input.triangleb) and (5 > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and !(2 == rt_input.trianglea) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.triangleb) and !(5 > rt_input.trianglea) and !(3 == rt_input.triangleb) and !(3 == rt_input.trianglec) and (5 >= rt_input.trianglea)) or (!(3 == rt_output.result) and !(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea > rt_input.trianglec) and (2 == rt_output.result) and (5 > rt_input.triangleb) and (5 > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and !(2 == rt_input.trianglea) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.triangleb) and !(5 > rt_input.trianglea) and !(3 == rt_input.triangleb) and !(3 == rt_input.trianglec) and !(5 >= rt_input.trianglea) and (3 >= rt_input.trianglec) and (3 >= rt_input.triangleb)) or (!(3 == rt_output.result) and !(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea > rt_input.trianglec) and (2 == rt_output.result) and (5 > rt_input.triangleb) and (5 > rt_input.trianglec) and (rt_input.trianglea >= rt_input.triangleb) and !(2 == rt_input.trianglea) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.triangleb) and !(5 > rt_input.trianglea) and !(3 == rt_input.triangleb) and !(3 == rt_input.trianglec) and !(5 >= rt_input.trianglea) and !(3 >= rt_input.trianglec) and !(2 >= rt_input.triangleb)) or (!(3 == rt_output.result) and !(rt_input.trianglea == rt_input.triangleb) and (rt_input.trianglea > rt_input.trianglec) and !(2 == rt_output.result)) or (!(3 == rt_output.result) and !(rt_input.trianglea == rt_input.triangleb) and !(rt_input.trianglea > rt_input.trianglec) and (1 >= rt_output.result) and !(rt_input.trianglea >= rt_input.trianglec)))

[Original predicate size] 97

[Final output]
( or (and (= 2 rt_output.result) (and (and (> 5 rt_input.triangleb) (> rt_input.trianglea rt_input.triangleb)) (and (and (> rt_input.trianglea rt_input.trianglec) (= 2 rt_input.trianglea)) (> 5 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (and (> 2 rt_input.triangleb) (> rt_input.trianglea rt_input.triangleb)) (and ( and (> rt_input.trianglea rt_input.trianglec) (not (= 2 rt_input.trianglea))) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and ( and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb)) (and (>= rt_input.trianglea rt_input.triangleb) (> rt_input.triangleb 1))) (and ( and (> 5 rt_input.trianglea) ( and (> rt_input.trianglea rt_input.trianglec) (not (= 2 rt_input.trianglea)))) (and (> rt_input.trianglec 1) (> 5 rt_input.trianglec))))) ( or (and (= 2 rt_output.result) (and (and (> rt_input.trianglea rt_input.triangleb) (= 3 rt_input.triangleb)) (and (and (> rt_input.trianglea 4) (> rt_input.trianglea rt_input.trianglec)) (= 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and ( and (and (>= rt_input.trianglea rt_input.triangleb) (> rt_input.triangleb 1)) ( and (not (= 3 rt_input.triangleb)) ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb)))) (and (and (> rt_input.trianglea rt_input.trianglec) (= 5 rt_input.trianglea)) (or (= 4 rt_input.trianglec) (= 2 rt_input.trianglec))))) ( or (and (= 2 rt_output.result) (and (and (> rt_input.trianglea rt_input.triangleb) (= 2 rt_input.triangleb)) (and ( and ( and (> rt_input.trianglea rt_input.trianglec) (not (= 2 rt_input.trianglea))) (> rt_input.trianglea 5)) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (and (> rt_input.trianglea rt_input.triangleb) (= 4 rt_input.triangleb)) (and ( and ( and (> rt_input.trianglea rt_input.trianglec) (not (= 2 rt_input.trianglea))) (> rt_input.trianglea 5)) (= 4 rt_input.trianglec)))) ( or (and (or (> rt_output.result 3) (> 2 rt_output.result)) (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglea rt_input.trianglec))) (and (> 2 rt_output.result) (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglec rt_input.trianglea))) ) ) ) ) ) ) ) ) 

[Final predicate size] 59

[Total time]
Total Conversion Time : 0 days, 0 hours, 6 minutes, 38 seconds


5.
[Original predicate]
(!(rt_input.trianglea > rt_input.triangleb) and (rt_input.trianglea >= rt_input.triangleb) and !(1 > rt_output.result))

[Original predicate size] 3

[Final output]
(and (> rt_output.result 0) (= rt_input.trianglea rt_input.triangleb)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


6.
[Original predicate]
(1 > rt_output.result)

[Original predicate size] 1

[Final output]
(> 1 rt_output.result) 

[Final predicate size] 1

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 0 seconds


7.
[Original predicate]
((!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and (3 == rt_input.triangleb) and (1 >= rt_input.trianglec) and !(1 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and (3 == rt_input.triangleb) and !(1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and !(3 == rt_input.triangleb) and (2 >= rt_input.trianglec) and !(3 >= rt_input.triangleb) and (1 >= rt_input.trianglec) and !(1 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and !(3 == rt_input.triangleb) and (2 >= rt_input.trianglec) and !(3 >= rt_input.triangleb) and !(1 >= rt_input.trianglec) and (1 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and !(3 == rt_input.triangleb) and !(2 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (1 >= rt_input.triangleb) and !(1 >= rt_input.trianglea) and !(1 >= rt_output.result)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and !(3 == rt_input.triangleb) and !(2 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and !(1 >= rt_input.triangleb) and !(2 == rt_input.trianglea) and !(1 >= rt_output.result)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and !(3 == rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(2 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and (5 == rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and (5 == rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and (3 >= rt_input.trianglea) and (1 >= rt_input.trianglec) and (2 == rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and (3 >= rt_input.trianglea) and !(1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and !(3 >= rt_input.trianglea) and (1 >= rt_input.triangleb) and (2 == rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and !(3 >= rt_input.trianglea) and !(1 >= rt_input.triangleb) and !(2 == rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and (2 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and (5 == rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(5 == rt_input.trianglea) and (3 == rt_input.trianglea) and !(3 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(5 == rt_input.trianglea) and !(3 == rt_input.trianglea) and (3 >= rt_input.trianglec) and !(3 == rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(5 == rt_input.trianglea) and !(3 == rt_input.trianglea) and !(3 >= rt_input.trianglec) and (3 == rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 >= rt_input.trianglec) and (2 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and (5 > rt_input.trianglea) and (9 == rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and (5 > rt_input.trianglea) and !(9 == rt_input.triangleb) and (3 >= rt_input.trianglea) and !(3 == rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and (5 > rt_input.trianglea) and !(9 == rt_input.triangleb) and !(3 >= rt_input.trianglea) and (3 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and !(5 > rt_input.trianglea)) or (!(1 >= rt_output.result) and !(2 >= rt_output.result)))

[Original predicate size] 211

[Final output]
( or (and (= 2 rt_output.result) (and (= 3 rt_input.triangleb) (and (= 2 rt_input.trianglea) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 3 rt_input.triangleb) (and (> 3 rt_input.trianglea) (> rt_input.trianglec 1)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 3) (and (= 2 rt_input.trianglea) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 3) (and (> 2 rt_input.trianglea) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 2 rt_input.triangleb) (and (= 2 rt_input.trianglea) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and (> 2 rt_input.trianglea) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 3) (and (> 3 rt_input.trianglea) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (> rt_input.trianglea 2) (= 5 rt_input.trianglec))) ( or (and (= 2 rt_output.result) (and (= 5 rt_input.triangleb) (and (> rt_input.trianglea 2) (not (= 5 rt_input.trianglec))))) ( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and (= 3 rt_input.trianglea) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 3 rt_input.triangleb) (and (= 3 rt_input.trianglea) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 2 rt_input.triangleb) (and (> rt_input.trianglea 3) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and (> rt_input.trianglea 3) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 3 rt_input.triangleb) (and (> rt_input.trianglea 2) (and (> rt_input.trianglec 2) (> 5 rt_input.trianglec))))) ( or (and (= 2 rt_output.result) (and ( and (not (= 5 rt_input.triangleb)) (> rt_input.triangleb 2)) (and (> rt_input.trianglea 2) (> 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and ( and (not (= 5 rt_input.triangleb)) (> rt_input.triangleb 2)) (and (= 5 rt_input.trianglea) (and (> rt_input.trianglec 2) (> 5 rt_input.trianglec))))) ( or (and (= 2 rt_output.result) (and ( and (not (= 5 rt_input.triangleb)) (> rt_input.triangleb 2)) (and (= 3 rt_input.trianglea) (= 4 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (or (> rt_input.triangleb 5) (= 4 rt_input.triangleb)) (and (or (> rt_input.trianglea 5) (= 4 rt_input.trianglea)) (= 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 3 rt_input.triangleb) (and (or (> rt_input.trianglea 5) (= 4 rt_input.trianglea)) (= 4 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 3 rt_input.triangleb) (and (> rt_input.trianglea 2) (> rt_input.trianglec 5)))) ( or (and (= 2 rt_output.result) (and (= 9 rt_input.triangleb) (and (and (> rt_input.trianglea 2) (> 5 rt_input.trianglea)) (> rt_input.trianglec 5)))) ( or (and (= 2 rt_output.result) (and ( and ( and (not (= 5 rt_input.triangleb)) (> rt_input.triangleb 2)) ( and (not (= 9 rt_input.triangleb)) (not (= 3 rt_input.triangleb)))) (and (= 3 rt_input.trianglea) (> rt_input.trianglec 5)))) ( or (and (= 2 rt_output.result) (and (= 3 rt_input.triangleb) (and (= 4 rt_input.trianglea) (> rt_input.trianglec 5)))) ( or (and (= 2 rt_output.result) (and ( and (not (= 5 rt_input.triangleb)) (> rt_input.triangleb 2)) (and (> rt_input.trianglea 4) (> rt_input.trianglec 5)))) (> rt_output.result 2) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 109

[Total time]
Total Conversion Time : 0 days, 0 hours, 4 minutes, 10 seconds


8.
[Original predicate]
((!(rt_input.trianglea == rt_input.triangleb) and (1 >= rt_output.result) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and (1 >= rt_output.result) and !(rt_input.trianglea >= rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 >= rt_output.result) and (rt_input.trianglea > rt_input.trianglec) and (5 > rt_input.triangleb) and (2 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (rt_input.trianglea > 2) and (rt_input.trianglea > 3) and (1 >= rt_input.triangleb) and (1 >= rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 >= rt_output.result) and (rt_input.trianglea > rt_input.trianglec) and (5 > rt_input.triangleb) and (2 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (rt_input.trianglea > 2) and (rt_input.trianglea > 3) and !(1 >= rt_input.triangleb) and !(1 >= rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 >= rt_output.result) and (rt_input.trianglea > rt_input.trianglec) and (5 > rt_input.triangleb) and (2 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (rt_input.trianglea > 2) and !(rt_input.trianglea > 3) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 >= rt_output.result) and (rt_input.trianglea > rt_input.trianglec) and (5 > rt_input.triangleb) and (2 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and !(rt_input.trianglea > 2)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 >= rt_output.result) and (rt_input.trianglea > rt_input.trianglec) and (5 > rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and (2 >= rt_output.result) and (5 > rt_input.trianglec) and (3 == rt_input.triangleb) and (3 >= rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 >= rt_output.result) and (rt_input.trianglea > rt_input.trianglec) and (5 > rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and (2 >= rt_output.result) and (5 > rt_input.trianglec) and !(3 == rt_input.triangleb) and !(3 >= rt_input.trianglec)))

[Original predicate size] 64

[Final output]
( or (and (> 2 rt_output.result) (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglea rt_input.trianglec))) ( or (and (> 2 rt_output.result) (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglec rt_input.trianglea))) ( or (and (> rt_output.result 1) (and ( and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb)) (> 2 rt_input.triangleb)) (and (and (> rt_input.trianglea 3) (> rt_input.trianglea rt_input.trianglec)) (> 2 rt_input.trianglec)))) ( or (and (> rt_output.result 1) (and ( and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb)) (= 2 rt_input.triangleb)) (and (and (> rt_input.trianglea 3) (> rt_input.trianglea rt_input.trianglec)) (= 2 rt_input.trianglec)))) ( or (and (> rt_output.result 1) (and ( and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb)) (> 2 rt_input.triangleb)) (and (and (> rt_input.trianglea rt_input.trianglec) (= 3 rt_input.trianglea)) (> 2 rt_input.trianglec)))) ( or (and (> rt_output.result 1) (and ( and (> 3 rt_input.triangleb) ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb))) (and (and (> rt_input.trianglea rt_input.trianglec) (> 3 rt_input.trianglea)) (> 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and ( and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb)) (= 3 rt_input.triangleb)) (and (> rt_input.trianglea rt_input.trianglec) (= 3 rt_input.trianglec)))) (and (= 2 rt_output.result) (and ( and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb)) (> rt_input.triangleb 3)) (and (> rt_input.trianglea rt_input.trianglec) (= 4 rt_input.trianglec)))) ) ) ) ) ) ) ) 

[Final predicate size] 46

[Total time]
Total Conversion Time : 0 days, 0 hours, 4 minutes, 11 seconds


9.
[Original predicate]
(!(rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea == rt_input.triangleb))

[Original predicate size] 3

[Final output]
(and (not (= rt_input.trianglea rt_input.triangleb)) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


10.
[Original predicate]
((!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and (3 >= rt_input.triangleb) and (1 >= rt_input.trianglec) and !(1 >= rt_input.triangleb) and !(1 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and (3 >= rt_input.triangleb) and !(1 >= rt_input.trianglec) and (1 >= rt_input.trianglea) and !(1 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and (3 >= rt_input.triangleb) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.trianglea) and (1 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and (3 >= rt_input.triangleb) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.trianglea) and !(1 >= rt_input.triangleb) and (2 == rt_input.triangleb) and !(2 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and (3 >= rt_input.triangleb) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.trianglea) and !(1 >= rt_input.triangleb) and !(2 == rt_input.triangleb) and (2 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and !(3 >= rt_input.triangleb) and (3 >= rt_input.trianglec) and (5 == rt_input.triangleb) and (2 >= rt_input.trianglea) and (2 >= rt_input.trianglec) and (2 == rt_input.trianglea) and (1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and !(3 >= rt_input.triangleb) and (3 >= rt_input.trianglec) and (5 == rt_input.triangleb) and (2 >= rt_input.trianglea) and (2 >= rt_input.trianglec) and !(2 == rt_input.trianglea) and !(1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and !(3 >= rt_input.triangleb) and (3 >= rt_input.trianglec) and (5 == rt_input.triangleb) and (2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and !(3 >= rt_input.triangleb) and (3 >= rt_input.trianglec) and (5 == rt_input.triangleb) and !(2 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and !(3 >= rt_input.triangleb) and (3 >= rt_input.trianglec) and !(5 == rt_input.triangleb) and (1 >= rt_input.trianglec) and !(1 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and !(3 >= rt_input.triangleb) and (3 >= rt_input.trianglec) and !(5 == rt_input.triangleb) and !(1 >= rt_input.trianglec) and (1 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and !(3 >= rt_input.triangleb) and (3 >= rt_input.trianglec) and !(5 == rt_input.triangleb) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.trianglea) and !(5 > rt_input.triangleb) and (2 == rt_input.trianglec) and !(2 == rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and !(3 >= rt_input.triangleb) and (3 >= rt_input.trianglec) and !(5 == rt_input.triangleb) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.trianglea) and !(5 > rt_input.triangleb) and !(2 == rt_input.trianglec) and !(3 == rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and (3 >= rt_input.trianglea) and !(3 >= rt_input.triangleb) and !(3 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and (5 == rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 > rt_input.trianglea) and (3 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and (2 == rt_input.triangleb) and (1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 > rt_input.trianglea) and (3 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and !(2 == rt_input.triangleb) and (2 == rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 > rt_input.trianglea) and (3 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and !(5 == rt_input.triangleb) and (5 > rt_input.trianglea) and (3 >= rt_input.trianglec) and !(2 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 > rt_input.trianglea) and (5 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (1 >= rt_input.triangleb) and (2 == rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 > rt_input.trianglea) and (5 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and !(1 >= rt_input.triangleb) and (1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 > rt_input.trianglea) and (5 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and !(2 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 > rt_input.trianglea) and (5 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and (2 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 > rt_input.trianglea) and (5 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and (3 >= rt_input.triangleb) and !(3 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 > rt_input.trianglea) and (5 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and !(3 >= rt_input.triangleb) and (3 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and (5 > rt_input.trianglec) and !(5 == rt_input.triangleb) and !(5 > rt_input.trianglea) and !(5 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and !(5 > rt_input.trianglec) and (3 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and !(5 > rt_input.trianglec) and !(3 >= rt_input.triangleb) and (5 > rt_input.triangleb) and !(5 > rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 == rt_output.result) and !(3 >= rt_input.trianglea) and !(5 > rt_input.trianglec) and !(3 >= rt_input.triangleb) and !(5 > rt_input.triangleb)) or (!(1 >= rt_output.result) and !(2 == rt_output.result)))

[Original predicate size] 250

[Final output]
( or (and (= 2 rt_output.result) (and (and (> rt_input.triangleb 1) (> 4 rt_input.triangleb)) (and (and (> rt_input.trianglea 1) (> 4 rt_input.trianglea)) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (and (> rt_input.triangleb 1) (> 4 rt_input.triangleb)) (and (> 2 rt_input.trianglea) (> rt_input.trianglec 1)))) ( or (and (= 2 rt_output.result) (and (> 2 rt_input.triangleb) (and (and (> rt_input.trianglea 1) (> 4 rt_input.trianglea)) (> rt_input.trianglec 1)))) ( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and (= 3 rt_input.trianglea) (> rt_input.trianglec 1)))) ( or (and (= 2 rt_output.result) (and (= 3 rt_input.triangleb) (and (= 2 rt_input.trianglea) (> rt_input.trianglec 1)))) ( or (and (= 2 rt_output.result) (and (= 5 rt_input.triangleb) (and (= 2 rt_input.trianglea) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 5 rt_input.triangleb) (and (> 2 rt_input.trianglea) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 5 rt_input.triangleb) (and (> 3 rt_input.trianglea) (= 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 5 rt_input.triangleb) (and (= 3 rt_input.trianglea) (> 4 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (or (> rt_input.triangleb 5) (= 4 rt_input.triangleb)) (and (and (> rt_input.trianglea 1) (> 4 rt_input.trianglea)) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (or (> rt_input.triangleb 5) (= 4 rt_input.triangleb)) (and (> 2 rt_input.trianglea) (and (> rt_input.trianglec 1) (> 4 rt_input.trianglec))))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 5) (and (= 3 rt_input.trianglea) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 5) (and (= 2 rt_input.trianglea) (= 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 3) (and (> 4 rt_input.trianglea) (> rt_input.trianglec 3)))) ( or (and (= 2 rt_output.result) (and (= 5 rt_input.triangleb) (and (> rt_input.trianglea 3) (> 5 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and (= 4 rt_input.trianglea) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 2 rt_input.triangleb) (and (= 4 rt_input.trianglea) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 3 rt_input.triangleb) (and (= 4 rt_input.trianglea) (= 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and ( and (not (= 5 rt_input.triangleb)) (> rt_input.triangleb 2)) (and (= 4 rt_input.trianglea) (> 4 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 2 rt_input.triangleb) (and (> rt_input.trianglea 4) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and (> rt_input.trianglea 4) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (and (> rt_input.triangleb 2) (> 5 rt_input.triangleb)) (and (> rt_input.trianglea 4) (> 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 3 rt_input.triangleb) (and (> rt_input.trianglea 4) (and (> rt_input.trianglec 2) (> 5 rt_input.trianglec))))) ( or (and (= 2 rt_output.result) (and (= 3 rt_input.triangleb) (and (> rt_input.trianglea 4) (= 4 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 4 rt_input.triangleb) (and (> rt_input.trianglea 4) (= 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 5) (and (> rt_input.trianglea 4) (> 5 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 4 rt_input.triangleb) (and (> rt_input.trianglea 3) (> rt_input.trianglec 4)))) ( or (and (= 2 rt_output.result) (and (= 4 rt_input.triangleb) (and (> rt_input.trianglea 4) (> rt_input.trianglec 4)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 4) (and (> rt_input.trianglea 3) (> rt_input.trianglec 4)))) (> rt_output.result 2) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 128

[Total time]
Total Conversion Time : 0 days, 0 hours, 2 minutes, 36 seconds


11.
[Original predicate]
(1 > rt_output.result)

[Original predicate size] 1

[Final output]
(> 1 rt_output.result) 

[Final predicate size] 1

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 0 seconds


12.
[Original predicate]
((!(rt_input.trianglea == rt_input.triangleb) and (1 >= rt_output.result) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and (1 >= rt_output.result) and !(rt_input.trianglea >= rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 >= rt_output.result) and (rt_input.trianglea > rt_input.trianglec) and (5 > rt_input.triangleb) and (5 > rt_input.trianglec) and (2 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and (2 == rt_input.triangleb) and !(1 >= rt_input.trianglec) and !(2 >= rt_input.trianglea)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 >= rt_output.result) and (rt_input.trianglea > rt_input.trianglec) and (5 > rt_input.triangleb) and (5 > rt_input.trianglec) and (2 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and !(2 == rt_input.triangleb) and (1 >= rt_input.trianglec) and (1 >= rt_input.triangleb) and !(1 >= rt_input.trianglea)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 >= rt_output.result) and (rt_input.trianglea > rt_input.trianglec) and (5 > rt_input.triangleb) and (5 > rt_input.trianglec) and !(2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(3 == rt_output.result) and (3 == rt_input.triangleb) and (3 >= rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 >= rt_output.result) and (rt_input.trianglea > rt_input.trianglec) and (5 > rt_input.triangleb) and (5 > rt_input.trianglec) and !(2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(3 == rt_output.result) and !(3 == rt_input.triangleb) and !(3 >= rt_input.trianglec)))

[Original predicate size] 48

[Final output]
( or (and (> 2 rt_output.result) (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglea rt_input.trianglec))) ( or (and (> 2 rt_output.result) (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglec rt_input.trianglea))) ( or (and (> rt_output.result 1) (and ( and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb)) (= 2 rt_input.triangleb)) (and ( and (> rt_input.trianglea rt_input.trianglec) (> rt_input.trianglea 2)) (= 2 rt_input.trianglec)))) ( or (and (> rt_output.result 1) (and ( and (> 2 rt_input.triangleb) ( and (> 2 rt_input.triangleb) ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb)))) (and (and (> rt_input.trianglea 1) (> rt_input.trianglea rt_input.trianglec)) (> 2 rt_input.trianglec)))) ( or (and (or (> rt_output.result 3) (= 2 rt_output.result)) (and ( and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb)) (= 3 rt_input.triangleb)) (and (> rt_input.trianglea rt_input.trianglec) (= 3 rt_input.trianglec)))) (and (or (> rt_output.result 3) (= 2 rt_output.result)) (and ( and ( and (not (= rt_input.trianglea rt_input.triangleb)) (> 5 rt_input.triangleb)) (> rt_input.triangleb 3)) (and (> rt_input.trianglea rt_input.trianglec) (= 4 rt_input.trianglec)))) ) ) ) ) ) 

[Final predicate size] 35

[Total time]
Total Conversion Time : 0 days, 0 hours, 3 minutes, 2 seconds


13.
[Original predicate]
((!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and (2 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and (2 == rt_input.trianglea) and (1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and (2 >= rt_input.trianglec) and !(2 >= rt_input.triangleb) and !(2 == rt_input.trianglea) and !(1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and (1 >= rt_input.triangleb) and !(1 >= rt_output.result) and !(1 >= rt_input.trianglea) and !(1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and !(1 >= rt_input.triangleb) and !(1 >= rt_output.result) and (2 >= rt_input.trianglea) and !(2 == rt_input.trianglea) and !(1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec) and (2 >= rt_input.triangleb) and !(1 >= rt_input.triangleb) and !(1 >= rt_output.result) and !(2 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec) and !(2 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and (5 == rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and (5 == rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and (2 == rt_input.triangleb) and !(2 == rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and (2 == rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and (5 > rt_input.trianglea) and (1 >= rt_input.triangleb) and !(1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and (5 > rt_input.trianglea) and !(1 >= rt_input.triangleb) and (2 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and (5 > rt_input.trianglea) and !(1 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and (3 >= rt_input.trianglea) and !(3 >= rt_input.triangleb) and !(3 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and (5 > rt_input.trianglea) and !(1 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(3 >= rt_input.trianglea) and (3 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and (5 > rt_input.trianglea) and !(1 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(3 >= rt_input.trianglea) and !(3 >= rt_input.triangleb) and (3 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and !(5 > rt_input.trianglea) and (5 >= rt_input.trianglec) and (5 >= rt_input.triangleb) and (1 >= rt_input.trianglec) and !(1 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and !(5 > rt_input.trianglea) and (5 >= rt_input.trianglec) and (5 >= rt_input.triangleb) and !(1 >= rt_input.trianglec) and (1 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and !(5 > rt_input.trianglea) and (5 >= rt_input.trianglec) and (5 >= rt_input.triangleb) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.triangleb) and (3 == rt_input.triangleb) and !(3 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and !(5 > rt_input.trianglea) and (5 >= rt_input.trianglec) and (5 >= rt_input.triangleb) and !(1 >= rt_input.trianglec) and !(1 >= rt_input.triangleb) and !(3 == rt_input.triangleb) and (3 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and !(5 > rt_input.trianglea) and (5 >= rt_input.trianglec) and !(5 >= rt_input.triangleb)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.trianglea) and !(5 == rt_input.triangleb) and !(5 == rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and !(5 > rt_input.trianglea) and !(5 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and !(2 >= rt_output.result)))

[Original predicate size] 200

[Final output]
( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 2) (and (= 2 rt_input.trianglea) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 2) (and (> 2 rt_input.trianglea) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 2 rt_input.triangleb) (and (= 2 rt_input.trianglea) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and (> 2 rt_input.trianglea) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and false (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 2) (and (> 3 rt_input.trianglea) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (= 5 rt_input.triangleb) (> rt_input.trianglea 2))) ( or (and (= 2 rt_output.result) (and (not (= 5 rt_input.triangleb)) (and (> rt_input.trianglea 2) (= 5 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and (> rt_input.trianglea 2) ( and (not (= 5 rt_input.trianglec)) (not (= 2 rt_input.trianglec)))))) ( or (and (= 2 rt_output.result) (and ( and (not (= 5 rt_input.triangleb)) (not (= 2 rt_input.triangleb))) (and (> rt_input.trianglea 2) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 2 rt_input.triangleb) (and (and (> rt_input.trianglea 2) (> 5 rt_input.trianglea)) ( and (> rt_input.trianglec 1) ( and (not (= 5 rt_input.trianglec)) (not (= 2 rt_input.trianglec))))))) ( or (and (= 2 rt_output.result) (and ( and (> rt_input.triangleb 1) ( and (not (= 5 rt_input.triangleb)) (not (= 2 rt_input.triangleb)))) (and (and (> rt_input.trianglea 2) (> 5 rt_input.trianglea)) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (or (> rt_input.triangleb 5) (= 4 rt_input.triangleb)) (and (= 3 rt_input.trianglea) (or (> rt_input.trianglec 5) (= 4 rt_input.trianglec))))) ( or (and (= 2 rt_output.result) (and (= 3 rt_input.triangleb) (and (= 4 rt_input.trianglea) ( and (> rt_input.trianglec 2) ( and (not (= 5 rt_input.trianglec)) (not (= 2 rt_input.trianglec))))))) ( or (and (= 2 rt_output.result) (and (or (> rt_input.triangleb 5) (= 4 rt_input.triangleb)) (and (= 4 rt_input.trianglea) (= 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (and (> rt_input.triangleb 2) (> 5 rt_input.triangleb)) (and (> rt_input.trianglea 4) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> 2 rt_input.triangleb) (and (> rt_input.trianglea 4) (and (> rt_input.trianglec 2) (> 5 rt_input.trianglec))))) ( or (and (= 2 rt_output.result) (and (= 3 rt_input.triangleb) (and (> rt_input.trianglea 4) (= 4 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 4 rt_input.triangleb) (and (> rt_input.trianglea 4) (= 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 5) (and (> rt_input.trianglea 4) ( and (> 6 rt_input.trianglec) ( and (not (= 5 rt_input.trianglec)) (not (= 2 rt_input.trianglec))))))) ( or (and (= 2 rt_output.result) (and ( and (not (= 5 rt_input.triangleb)) (not (= 2 rt_input.triangleb))) (and (> rt_input.trianglea 4) (> rt_input.trianglec 5)))) (> rt_output.result 2) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 102

[Total time]
Total Conversion Time : 0 days, 0 hours, 7 minutes, 42 seconds


14.
[Original predicate]
(!(rt_input.trianglea > rt_input.trianglec) and (rt_input.trianglea >= rt_input.trianglec) and !(1 > rt_output.result))

[Original predicate size] 3

[Final output]
(and (> rt_output.result 0) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


15.
[Original predicate]
((!(rt_input.trianglea == rt_input.triangleb) and (1 == rt_output.result) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and (1 == rt_output.result) and !(rt_input.trianglea >= rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 == rt_output.result) and (rt_input.trianglea >= rt_input.triangleb) and (5 > rt_input.trianglec) and (2 == rt_input.triangleb) and (2 == rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 == rt_output.result) and (rt_input.trianglea >= rt_input.triangleb) and (5 > rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > 3) and (5 > rt_input.triangleb) and (3 == rt_input.triangleb) and (3 == rt_input.trianglec)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 == rt_output.result) and (rt_input.trianglea >= rt_input.triangleb) and (5 > rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > 3) and (5 > rt_input.triangleb) and !(3 == rt_input.triangleb) and !(3 == rt_input.trianglec) and (3 >= rt_input.trianglec) and (2 >= rt_input.triangleb)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 == rt_output.result) and (rt_input.trianglea >= rt_input.triangleb) and (5 > rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and (rt_input.trianglea >= rt_input.trianglec) and (rt_input.trianglea > 3) and (5 > rt_input.triangleb) and !(3 == rt_input.triangleb) and !(3 == rt_input.trianglec) and !(3 >= rt_input.trianglec) and !(3 >= rt_input.triangleb)) or (!(rt_input.trianglea == rt_input.triangleb) and !(1 == rt_output.result) and (rt_input.trianglea >= rt_input.triangleb) and (5 > rt_input.trianglec) and !(2 == rt_input.triangleb) and !(2 == rt_input.trianglec) and (rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > 3)))

[Original predicate size] 58

[Final output]
( or (and (= 1 rt_output.result) (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglea rt_input.trianglec))) ( or (and (= 1 rt_output.result) (and (not (= rt_input.trianglea rt_input.triangleb)) (> rt_input.trianglec rt_input.trianglea))) ( or (and (not (= 1 rt_output.result)) (and (and (> rt_input.trianglea rt_input.triangleb) (= 2 rt_input.triangleb)) (= 2 rt_input.trianglec))) ( or (and (not (= 1 rt_output.result)) (and (and (> rt_input.trianglea rt_input.triangleb) (= 3 rt_input.triangleb)) (and (and (>= rt_input.trianglea rt_input.trianglec) (> rt_input.trianglea 3)) (= 3 rt_input.trianglec)))) ( or (and (not (= 1 rt_output.result)) (and ( and (> 3 rt_input.triangleb) ( and (> rt_input.trianglea rt_input.triangleb) ( and (not (= 2 rt_input.triangleb)) (> 5 rt_input.triangleb)))) (and (and (>= rt_input.trianglea rt_input.trianglec) (> rt_input.trianglea 3)) (> 2 rt_input.trianglec)))) ( or (and (not (= 1 rt_output.result)) (and (and (> rt_input.trianglea rt_input.triangleb) (= 4 rt_input.triangleb)) (and (and (>= rt_input.trianglea rt_input.trianglec) (> rt_input.trianglea 3)) (= 4 rt_input.trianglec)))) (and (not (= 1 rt_output.result)) (and ( and (not (= 2 rt_input.triangleb)) (> rt_input.trianglea rt_input.triangleb)) (and (and (>= rt_input.trianglea rt_input.trianglec) (> 4 rt_input.trianglea)) ( and (> 5 rt_input.trianglec) (not (= 2 rt_input.trianglec)))))) ) ) ) ) ) ) 

[Final predicate size] 37

[Total time]
Total Conversion Time : 0 days, 0 hours, 3 minutes, 35 seconds


16.
[Original predicate]
((rt_input.trianglea >= rt_input.triangleb) and !(rt_input.trianglea > rt_input.triangleb) and !(1 > rt_output.result))

[Original predicate size] 3

[Final output]
(and (> rt_output.result 0) (= rt_input.trianglea rt_input.triangleb)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


17.
[Original predicate]
(1 > rt_output.result)

[Original predicate size] 1

[Final output]
(> 1 rt_output.result) 

[Final predicate size] 1

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 0 seconds


18.
[Original predicate]
((!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and !(2 >= rt_input.trianglea) and (2 == rt_input.triangleb) and !(1 >= rt_output.result) and (2 >= rt_input.trianglec) and (1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and !(2 >= rt_input.trianglea) and (2 == rt_input.triangleb) and !(1 >= rt_output.result) and !(2 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.triangleb) and (2 >= rt_input.trianglec) and !(2 >= rt_input.trianglea) and !(2 == rt_input.triangleb) and !(1 >= rt_output.result) and !(1 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and (2 >= rt_input.trianglea) and (2 == rt_input.triangleb) and (1 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and (2 >= rt_input.trianglea) and !(2 == rt_input.triangleb) and (2 == rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and (2 >= rt_input.triangleb) and !(2 >= rt_input.trianglec) and !(2 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and (4 >= rt_input.triangleb) and (2 >= rt_input.trianglea) and (2 >= rt_input.trianglec) and (1 >= rt_input.trianglec) and (2 == rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and (4 >= rt_input.triangleb) and (2 >= rt_input.trianglea) and (2 >= rt_input.trianglec) and !(1 >= rt_input.trianglec) and (1 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and (4 >= rt_input.triangleb) and (2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and (4 >= rt_input.triangleb) and !(2 >= rt_input.trianglea) and (2 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and (4 >= rt_input.triangleb) and !(2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec) and (4 >= rt_input.trianglea) and (4 == rt_input.triangleb) and (4 > rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and (4 >= rt_input.triangleb) and !(2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec) and (4 >= rt_input.trianglea) and !(4 == rt_input.triangleb) and !(4 > rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and (4 >= rt_input.triangleb) and !(2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec) and !(4 >= rt_input.trianglea) and (4 >= rt_input.trianglec) and (4 > rt_input.triangleb) and !(4 > rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and (4 >= rt_input.triangleb) and !(2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec) and !(4 >= rt_input.trianglea) and (4 >= rt_input.trianglec) and !(4 > rt_input.triangleb) and (4 > rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and (4 >= rt_input.triangleb) and !(2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec) and !(4 >= rt_input.trianglea) and !(4 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and !(4 >= rt_input.triangleb) and (4 >= rt_input.trianglec) and (4 >= rt_input.trianglea) and (2 >= rt_input.trianglea) and (2 >= rt_input.trianglec) and (2 == rt_input.trianglec) and (1 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and !(4 >= rt_input.triangleb) and (4 >= rt_input.trianglec) and (4 >= rt_input.trianglea) and (2 >= rt_input.trianglea) and (2 >= rt_input.trianglec) and !(2 == rt_input.trianglec) and !(1 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and !(4 >= rt_input.triangleb) and (4 >= rt_input.trianglec) and (4 >= rt_input.trianglea) and (2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and !(4 >= rt_input.triangleb) and (4 >= rt_input.trianglec) and (4 >= rt_input.trianglea) and !(2 >= rt_input.trianglea) and (2 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and !(4 >= rt_input.triangleb) and (4 >= rt_input.trianglec) and (4 >= rt_input.trianglea) and !(2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec) and (4 == rt_input.trianglea) and (4 > rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and !(4 >= rt_input.triangleb) and (4 >= rt_input.trianglec) and (4 >= rt_input.trianglea) and !(2 >= rt_input.trianglea) and !(2 >= rt_input.trianglec) and !(4 == rt_input.trianglea) and !(4 > rt_input.trianglec)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and !(4 >= rt_input.triangleb) and (4 >= rt_input.trianglec) and !(4 >= rt_input.trianglea)) or (!(1 >= rt_output.result) and (2 >= rt_output.result) and !(2 >= rt_input.triangleb) and !(4 >= rt_input.triangleb) and !(4 >= rt_input.trianglec)) or (!(1 >= rt_output.result) and !(2 >= rt_output.result)))

[Original predicate size] 187

[Final output]
( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and (> rt_input.trianglea 2) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and (> rt_input.trianglea 2) false))) ( or (and (= 2 rt_output.result) (and (> 2 rt_input.triangleb) (and (> rt_input.trianglea 2) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 2 rt_input.triangleb) (and (> 2 rt_input.trianglea) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (> 2 rt_input.triangleb) (and (= 2 rt_input.trianglea) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (> 3 rt_input.triangleb) (and (> rt_input.trianglea 2) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (and (> rt_input.triangleb 2) (> 5 rt_input.triangleb)) (and (= 2 rt_input.trianglea) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (and (> rt_input.triangleb 2) (> 5 rt_input.triangleb)) (and (> 2 rt_input.trianglea) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (and (> rt_input.triangleb 2) (> 5 rt_input.triangleb)) (and (> 3 rt_input.trianglea) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (and (> rt_input.triangleb 2) (> 5 rt_input.triangleb)) (and (> rt_input.trianglea 2) (> 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 4 rt_input.triangleb) (and (= 3 rt_input.trianglea) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (= 3 rt_input.triangleb) (and (= 4 rt_input.trianglea) (> rt_input.trianglec 2)))) ( or (and (= 2 rt_output.result) (and (= 3 rt_input.triangleb) (and (> rt_input.trianglea 4) (= 4 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (= 4 rt_input.triangleb) (and (> rt_input.trianglea 4) (= 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (and (> rt_input.triangleb 2) (> 5 rt_input.triangleb)) (and (> rt_input.trianglea 4) (> rt_input.trianglec 4)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 4) (and (> 2 rt_input.trianglea) (= 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 4) (and (= 2 rt_input.trianglea) (> 2 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 4) (and (> 3 rt_input.trianglea) (and (> rt_input.trianglec 2) (> 5 rt_input.trianglec))))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 4) (and (and (> rt_input.trianglea 2) (> 5 rt_input.trianglea)) (> 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 4) (and (= 4 rt_input.trianglea) (= 3 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 4) (and (= 3 rt_input.trianglea) (= 4 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 4) (and (> rt_input.trianglea 4) (> 5 rt_input.trianglec)))) ( or (and (= 2 rt_output.result) (and (> rt_input.triangleb 4) (> rt_input.trianglec 4))) (> rt_output.result 2) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 99

[Total time]
Total Conversion Time : 0 days, 0 hours, 1 minutes, 52 seconds


19.
[Original predicate]
((rt_input.trianglea >= rt_input.trianglec) and !(rt_input.trianglea > rt_input.trianglec) and !(1 > rt_output.result))

[Original predicate size] 3

[Final output]
(and (> rt_output.result 0) (= rt_input.trianglec rt_input.trianglea)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


20.
[Original predicate]
((rt_input.trianglea >= rt_input.triangleb) and !(rt_input.trianglea > rt_input.triangleb) and !(1 > rt_output.result))

[Original predicate size] 3

[Final output]
(and (> rt_output.result 0) (= rt_input.trianglea rt_input.triangleb)) 

[Final predicate size] 2

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 1 seconds


