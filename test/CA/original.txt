1.
[Original predicate]
(((rt_input.obsDistance_1 > 2) and (rt_input.obsDistance_2 > 4) and (4 >= rt_input.obsDistance_0) and (rt_state.speed_status == Stop) and !(4 >= rt_input.obsDistance_1)) or ((rt_input.obsDistance_1 > 2) and (rt_input.obsDistance_2 > 4) and (4 >= rt_input.obsDistance_0) and !(rt_state.speed_status == Stop) and (1 >= rt_state.zone_1) and !(4 >= rt_input.obsDistance_1)) or ((rt_input.obsDistance_1 > 2) and (rt_input.obsDistance_2 > 4) and !(4 >= rt_input.obsDistance_0) and (1 == rt_state.zone_1) and (rt_state.speed_status == Midium_speed) and (rt_input.obsDistance_0 > 12) and !(rt_input.obsDistance_2 > 5)) or ((rt_input.obsDistance_1 > 2) and (rt_input.obsDistance_2 > 4) and !(4 >= rt_input.obsDistance_0) and (1 == rt_state.zone_1) and (rt_state.speed_status == Midium_speed) and !(rt_input.obsDistance_0 > 12) and (12 >= rt_input.obsDistance_3)) or ((rt_input.obsDistance_1 > 2) and (rt_input.obsDistance_2 > 4) and !(4 >= rt_input.obsDistance_0) and (1 == rt_state.zone_1) and (rt_state.speed_status == Midium_speed) and !(rt_input.obsDistance_0 > 12) and !(12 >= rt_input.obsDistance_3) and (12 == rt_input.obsDistance_2)) or ((rt_input.obsDistance_1 > 2) and (rt_input.obsDistance_2 > 4) and !(4 >= rt_input.obsDistance_0) and (1 == rt_state.zone_1) and (rt_state.speed_status == Midium_speed) and !(rt_input.obsDistance_0 > 12) and !(12 >= rt_input.obsDistance_3) and !(12 == rt_input.obsDistance_2) and !(4 > rt_input.obsDistance_1) and (rt_input.obsDistance_2 > rt_input.obsDistance_3)) or ((rt_input.obsDistance_1 > 2) and !(rt_input.obsDistance_2 > 4) and (rt_input.obsDistance_1 > 4) and (5 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_0) and !(2 == rt_state.zone_1) and (rt_input.obsDistance_0 > 2)) or ((rt_input.obsDistance_1 > 2) and !(rt_input.obsDistance_2 > 4) and (rt_input.obsDistance_1 > 4) and (5 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_2 > 2) and (2 >= rt_input.obsDistance_3)) or ((rt_input.obsDistance_1 > 2) and !(rt_input.obsDistance_2 > 4) and (rt_input.obsDistance_1 > 4) and (5 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > 4) and (rt_state.speed_status == Stop) and (rt_input.obsDistance_0 > rt_state.zone_0)) or ((rt_input.obsDistance_1 > 2) and !(rt_input.obsDistance_2 > 4) and (rt_input.obsDistance_1 > 4) and (5 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > 4) and !(rt_state.speed_status == Stop) and (1 >= rt_state.zone_1) and (rt_input.obsDistance_0 > 2)) or ((rt_input.obsDistance_1 > 2) and !(rt_input.obsDistance_2 > 4) and (rt_input.obsDistance_1 > 4) and !(5 >= rt_input.obsDistance_3) and (rt_state.speed_status == Stop) and (rt_input.obsDistance_0 >= 12) and !(rt_input.obsDistance_2 > 2)) or ((rt_input.obsDistance_1 > 2) and !(rt_input.obsDistance_2 > 4) and (rt_input.obsDistance_1 > 4) and !(5 >= rt_input.obsDistance_3) and (rt_state.speed_status == Stop) and !(rt_input.obsDistance_0 >= 12)) or ((rt_input.obsDistance_1 > 2) and !(rt_input.obsDistance_2 > 4) and (rt_input.obsDistance_1 > 4) and !(5 >= rt_input.obsDistance_3) and !(rt_state.speed_status == Stop) and (rt_input.obsDistance_0 > 4) and (2 >= rt_input.obsDistance_2)) or ((rt_input.obsDistance_1 > 2) and !(rt_input.obsDistance_2 > 4) and (rt_input.obsDistance_1 > 4) and !(5 >= rt_input.obsDistance_3) and !(rt_state.speed_status == Stop) and !(rt_input.obsDistance_0 > 4) and !(2 == rt_state.zone_1)) or (!(rt_input.obsDistance_1 > 2) and (2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2)) or (!(rt_input.obsDistance_1 > 2) and !(2 >= rt_input.obsDistance_0)))

[Original predicate size] 109

[Final output]
( or (and (= rt_state.speed_status Stop) (and (> rt_input.obsDistance_2 4) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0)))) ( or (and (> 2 rt_state.zone_1) (and (not (= rt_state.speed_status Stop)) (and (> rt_input.obsDistance_2 4) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0))))) ( or (and (= rt_state.speed_status Midium_speed) (and (= 1 rt_state.zone_1) (and (= 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 2) (> (- rt_input.obsDistance_0 9) 3))))) ( or (and (= rt_state.speed_status Midium_speed) (and (> (+ 9 4) rt_input.obsDistance_3) (and (= 1 rt_state.zone_1) (and (> rt_input.obsDistance_2 4) (and (> rt_input.obsDistance_1 2) ( and (> rt_input.obsDistance_0 4) (> (+ 9 4) rt_input.obsDistance_0))))))) ( or (and (= rt_state.speed_status Midium_speed) (and (> (- rt_input.obsDistance_3 9) 3) (and (= 1 rt_state.zone_1) (and (= (+ 9 3) rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 2) ( and (> rt_input.obsDistance_0 4) (> (+ 9 4) rt_input.obsDistance_0))))))) ( or (and (= rt_state.speed_status Midium_speed) (and ( and (> (- rt_input.obsDistance_3 9) 3) (> rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (= 1 rt_state.zone_1) (and ( and (> rt_input.obsDistance_2 4) ( not ( = 12 rt_input.obsDistance_2 ) ) ) (and (> rt_input.obsDistance_1 3) ( and (> rt_input.obsDistance_0 4) (> (+ 9 4) rt_input.obsDistance_0))))))) ( or (and ( and (> 6 rt_input.obsDistance_3) (> rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (not (= 2 rt_state.zone_1)) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) ( and (> 5 rt_input.obsDistance_0) (> rt_input.obsDistance_0 2)))))) ( or (and (and (> 3 rt_input.obsDistance_3) (> rt_input.obsDistance_2 rt_input.obsDistance_3)) (and ( and (> 5 rt_input.obsDistance_2) (> rt_input.obsDistance_2 2)) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and ( and (> 6 rt_input.obsDistance_3) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)) (and (= rt_state.speed_status Stop) (and (> rt_input.obsDistance_0 rt_state.zone_0) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0)))))) ( or (and ( and (> 6 rt_input.obsDistance_3) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)) (and (> 2 rt_state.zone_1) (and (not (= rt_state.speed_status Stop)) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) ( and (> 5 rt_input.obsDistance_0) (> rt_input.obsDistance_0 2))))))) ( or (and (> rt_input.obsDistance_3 5) (and (= rt_state.speed_status Stop) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> (- rt_input.obsDistance_0 9) 2))))) ( or (and (> rt_input.obsDistance_3 5) (and (= rt_state.speed_status Stop) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> (+ 9 3) rt_input.obsDistance_0))))) ( or (and (> rt_input.obsDistance_3 5) (and (not (= rt_state.speed_status Stop)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and (> rt_input.obsDistance_3 5) (and (not (= 2 rt_state.zone_1)) (and (not (= rt_state.speed_status Stop)) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0)))))) ( or (and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> rt_input.obsDistance_2 2) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) (and (> 3 rt_input.obsDistance_1) (> rt_input.obsDistance_0 2)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 92

[Total time]
Total Conversion Time : 0 days, 0 hours, 3 minutes, 39 seconds


2.
[Original predicate]
(((2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_1) and (2 >= rt_input.obsDistance_2)) or ((2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_1)) or ((2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_0) and (rt_state.speed_status == Midium_speed) and !(4 > rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_2 > 5) and (2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_1 > 4)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_2 > 5) and (2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 4) and !(1 >= rt_input.obsDistance_3) and (1 == rt_state.zone_0)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_2 > 5) and (2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 4) and !(1 >= rt_input.obsDistance_3) and !(1 == rt_state.zone_0) and (rt_state.speed_status == Stop)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_2 > 5) and !(2 >= rt_input.obsDistance_3) and (1 >= rt_state.zone_1) and (7 > rt_input.obsDistance_1)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_2 > 5) and !(2 >= rt_input.obsDistance_3) and !(1 >= rt_state.zone_1) and (7 == rt_input.obsDistance_0) and (4 > rt_input.obsDistance_1)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 5) and (2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 4) and (2 == rt_state.zone_1) and !(rt_state.speed_status == Slow_speed)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 5) and (2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 4) and !(2 == rt_state.zone_1)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 5) and !(2 >= rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2) and (4 >= rt_input.obsDistance_1) and (1 == rt_state.zone_1)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 5) and !(2 >= rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2) and !(4 >= rt_input.obsDistance_1)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 5) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_1 > 4) and (2 == rt_state.zone_1) and !(rt_state.speed_status == Slow_speed)) or (!(2 >= rt_input.obsDistance_0) and (4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and !(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 5) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_1 > 4) and !(2 == rt_state.zone_1)) or (!(2 >= rt_input.obsDistance_0) and !(4 >= rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_1) and (rt_state.speed_status == Stop) and (rt_input.obsDistance_0 > 4) and !(1 >= rt_state.zone_1)) or (!(2 >= rt_input.obsDistance_0) and !(4 >= rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Stop) and (1 >= rt_state.zone_0) and (rt_input.obsDistance_0 > 4) and !(2 == rt_input.obsDistance_1)) or (!(2 >= rt_input.obsDistance_0) and !(4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_1) and (1 == rt_state.zone_0) and (rt_state.speed_status == Midium_speed) and (4 == rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_0) and !(4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_1) and (1 == rt_state.zone_0) and (rt_state.speed_status == Midium_speed) and !(4 == rt_input.obsDistance_0) and !(24 > rt_input.obsDistance_3)))

[Original predicate size] 136

[Final output]
( or (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> 3 rt_input.obsDistance_2) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> rt_input.obsDistance_1 2) (> 3 rt_input.obsDistance_0))) ( or (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 3 rt_input.obsDistance_0)) ( or (and (= rt_state.speed_status Midium_speed) (and (> 5 rt_input.obsDistance_3) (= 4 rt_input.obsDistance_0))) ( or (and (> 3 rt_input.obsDistance_3) (and (> rt_input.obsDistance_2 5) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and (= 2 rt_input.obsDistance_3) (and (= 1 rt_state.zone_0) (and (> rt_input.obsDistance_2 5) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4))))) ( or (and (= 2 rt_input.obsDistance_3) (and (= rt_state.speed_status Stop) (and (not (= 1 rt_state.zone_0)) (and (> rt_input.obsDistance_2 5) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))))) ( or (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (> 2 rt_state.zone_1) (and (> rt_input.obsDistance_2 5) (and ( and (> rt_input.obsDistance_1 2) (> 7 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4))))) ( or (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (> rt_state.zone_1 1) (and (> rt_input.obsDistance_2 5) (and (= 3 rt_input.obsDistance_1) (= 7 rt_input.obsDistance_0))))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and (> 3 rt_input.obsDistance_3) (and (= 2 rt_state.zone_1) (and (> 6 rt_input.obsDistance_2) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))))) ( or (and (> 3 rt_input.obsDistance_3) (and (not (= 2 rt_state.zone_1)) (and (> 6 rt_input.obsDistance_2) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4))))) ( or (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (= 1 rt_state.zone_1) (and (> 3 rt_input.obsDistance_2) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4))))) ( or (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (= 2 rt_state.zone_1) (and ( and (> 6 rt_input.obsDistance_2) (> rt_input.obsDistance_2 2)) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))))) ( or (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (not (= 2 rt_state.zone_1)) (and ( and (> 6 rt_input.obsDistance_2) (> rt_input.obsDistance_2 2)) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4))))) ( or (and (> rt_input.obsDistance_3 4) (and (> rt_state.zone_1 1) (and (= rt_state.speed_status Stop) (and (> 5 rt_input.obsDistance_1) (> rt_input.obsDistance_0 4))))) ( or (and (> rt_input.obsDistance_3 4) (and (not (= rt_state.speed_status Stop)) (and (> 2 rt_state.zone_0) (and ( and (> 5 rt_input.obsDistance_1) (not (= 2 rt_input.obsDistance_1))) (> rt_input.obsDistance_0 4))))) ( or (and (= rt_state.speed_status Midium_speed) (and (> rt_input.obsDistance_3 4) (and (= 1 rt_state.zone_0) (and (> rt_input.obsDistance_1 4) (= 4 rt_input.obsDistance_0))))) (and (= rt_state.speed_status Midium_speed) (and ( and (> rt_input.obsDistance_3 4) ( not ( > 24 rt_input.obsDistance_3 ) ) ) (and (= 1 rt_state.zone_0) (and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_0 2) (not (= 4 rt_input.obsDistance_0))))))) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 107

[Total time]
Total Conversion Time : 0 days, 0 hours, 4 minutes, 59 seconds


3.
[Original predicate]
(((rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_state.zone_0) and (rt_input.obsDistance_1 >= 6) and (rt_input.obsDistance_0 >= 5)) or ((rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_state.zone_0) and (rt_input.obsDistance_1 >= 6) and !(rt_input.obsDistance_0 >= 5) and !(rt_input.obsDistance_0 >= rt_input.obsDistance_2) and (rt_state.zone_0 == rt_state.zone_1)) or ((rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_state.zone_0) and !(rt_input.obsDistance_1 >= 6) and (1 >= rt_state.zone_0) and (rt_input.obsDistance_0 == rt_input.obsDistance_1)) or ((rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_state.zone_0) and !(rt_input.obsDistance_1 >= 6) and (1 >= rt_state.zone_0) and !(rt_input.obsDistance_0 == rt_input.obsDistance_1) and (rt_input.obsDistance_0 >= rt_input.obsDistance_1) and !(2 == rt_input.obsDistance_1) and (12 > rt_input.obsDistance_2)) or ((rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_state.zone_0) and !(rt_input.obsDistance_1 >= 6) and !(1 >= rt_state.zone_0) and (rt_state.speed_status == Midium_speed)) or ((rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 >= 5)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 >= 5) and (rt_input.obsDistance_1 >= 5) and (rt_input.obsDistance_2 >= 5) and (rt_input.obsDistance_3 > 2)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 >= 5) and (rt_input.obsDistance_1 >= 5) and (rt_input.obsDistance_2 >= 5) and !(rt_input.obsDistance_3 > 2) and (6 > rt_input.obsDistance_2)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 >= 5) and (rt_input.obsDistance_1 >= 5) and !(rt_input.obsDistance_2 >= 5) and (1 == (6 - rt_input.obsDistance_3))) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 >= 5) and (rt_input.obsDistance_1 >= 5) and !(rt_input.obsDistance_2 >= 5) and !(1 == (6 - rt_input.obsDistance_3)) and (rt_input.obsDistance_2 > rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 >= 5) and (rt_input.obsDistance_1 >= 5) and !(rt_input.obsDistance_2 >= 5) and !(1 == (6 - rt_input.obsDistance_3)) and (rt_input.obsDistance_2 > rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(1 == rt_state.zone_0)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 >= 5) and (rt_input.obsDistance_1 >= 5) and !(rt_input.obsDistance_2 >= 5) and !(1 == (6 - rt_input.obsDistance_3)) and !(rt_input.obsDistance_2 > rt_state.zone_0) and !(rt_input.obsDistance_3 > rt_state.zone_0)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 >= 5) and !(rt_input.obsDistance_1 >= 5) and (rt_state.zone_1 > rt_state.zone_0) and !(2 >= rt_input.obsDistance_1)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(rt_input.obsDistance_0 >= 5) and (rt_state.speed_status == Midium_speed) and (6 == rt_input.obsDistance_2)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(rt_input.obsDistance_0 >= 5) and (rt_state.speed_status == Midium_speed) and !(6 == rt_input.obsDistance_2) and (2 == rt_input.obsDistance_2) and (rt_input.obsDistance_0 <= 3)))

[Original predicate size] 86

[Final output]
( or (and (= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> rt_input.obsDistance_0 rt_state.zone_0) (and (> rt_input.obsDistance_1 5) (> rt_input.obsDistance_0 4)))) ( or (and (= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (= rt_state.zone_0 rt_state.zone_1) (and (> rt_input.obsDistance_0 rt_state.zone_0) (and (> rt_input.obsDistance_2 rt_input.obsDistance_0) (and (> rt_input.obsDistance_1 5) (> 5 rt_input.obsDistance_0)))))) ( or (and (= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (and (> 2 rt_state.zone_0) (> rt_input.obsDistance_0 rt_state.zone_0)) ( and (> 6 rt_input.obsDistance_1) (= rt_input.obsDistance_0 rt_input.obsDistance_1)))) ( or (and (= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (and (> 2 rt_state.zone_0) (> rt_input.obsDistance_0 rt_state.zone_0)) (and (> (+ 9 3) rt_input.obsDistance_2) ( and ( and (> 6 rt_input.obsDistance_1) (not (= rt_input.obsDistance_0 rt_input.obsDistance_1))) ( and (>= rt_input.obsDistance_0 rt_input.obsDistance_1) (not (= 2 rt_input.obsDistance_1))))))) ( or (and (= rt_state.speed_status Midium_speed) (and (= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (and (> rt_state.zone_0 1) (> rt_input.obsDistance_0 rt_state.zone_0)) (> 6 rt_input.obsDistance_1)))) ( or (and (and (> rt_input.obsDistance_3 2) (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (>= rt_state.zone_0 rt_input.obsDistance_0) (> 5 rt_input.obsDistance_1))) ( or (and ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (> rt_input.obsDistance_3 2)) (and (> rt_input.obsDistance_2 4) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (> 3 rt_input.obsDistance_3)) (and (= 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (= 5 rt_input.obsDistance_3)) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and ( and (> 3 rt_input.obsDistance_3) ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (not (= 5 rt_input.obsDistance_3)))) (and (> rt_input.obsDistance_2 rt_state.zone_0) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and ( and (> rt_input.obsDistance_3 2) ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (not (= 5 rt_input.obsDistance_3)))) (and ( and (> rt_input.obsDistance_2 rt_state.zone_0) (not (= 1 rt_state.zone_0))) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and ( and (>= rt_state.zone_0 rt_input.obsDistance_3) ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (not (= 5 rt_input.obsDistance_3)))) (and (>= rt_state.zone_0 rt_input.obsDistance_2) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (> rt_state.zone_1 rt_state.zone_0) (and (and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))) ( or (and (= rt_state.speed_status Midium_speed) (and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (= 6 rt_input.obsDistance_2) (> 5 rt_input.obsDistance_0)))) (and (= rt_state.speed_status Midium_speed) (and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (= 2 rt_input.obsDistance_2) (> 4 rt_input.obsDistance_0)))) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 82

[Total time]
Total Conversion Time : 0 days, 0 hours, 3 minutes, 57 seconds


4.
[Original predicate]
(((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_1 >= 5) and !(rt_input.obsDistance_3 >= 6) and (rt_input.obsDistance_0 >= 5) and (6 > rt_input.obsDistance_2) and (rt_input.obsDistance_3 > rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and (rt_input.obsDistance_0 == rt_input.obsDistance_1)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_1 >= 5) and !(rt_input.obsDistance_3 >= 6) and (rt_input.obsDistance_0 >= 5) and (6 > rt_input.obsDistance_2) and (rt_input.obsDistance_3 > rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 == rt_input.obsDistance_1) and !(2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_1 > rt_input.obsDistance_3) and (rt_input.obsDistance_1 >= 6) and !(1 >= rt_state.zone_0) and (6 == rt_input.obsDistance_0) and !(rt_input.obsDistance_2 == rt_state.zone_0) and (12 > rt_input.obsDistance_1)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_1 >= 5) and !(rt_input.obsDistance_3 >= 6) and (rt_input.obsDistance_0 >= 5) and (6 > rt_input.obsDistance_2) and (rt_input.obsDistance_3 > rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 == rt_input.obsDistance_1) and !(2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_1 > rt_input.obsDistance_3) and (rt_input.obsDistance_1 >= 6) and !(1 >= rt_state.zone_0) and !(6 == rt_input.obsDistance_0) and !(12 == rt_input.obsDistance_0)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_1 >= 5) and !(rt_input.obsDistance_3 >= 6) and (rt_input.obsDistance_0 >= 5) and (6 > rt_input.obsDistance_2) and (rt_input.obsDistance_3 > rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 == rt_input.obsDistance_1) and !(2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_1 > rt_input.obsDistance_3) and !(rt_input.obsDistance_1 >= 6)) or ((rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_1 >= 5) and !(rt_input.obsDistance_3 >= 6) and (rt_input.obsDistance_0 >= 5) and !(6 > rt_input.obsDistance_2) and !(rt_input.obsDistance_3 > 2)) or (!(rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_1 > 2)) or (!(rt_input.obsDistance_0 > 2) and !(rt_input.obsDistance_1 > 2) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2)) or (!(rt_input.obsDistance_0 > 2) and !(rt_input.obsDistance_1 > 2) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_3)))

[Original predicate size] 67

[Final output]
( or (and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 6 rt_input.obsDistance_3))) (and (> 3 rt_input.obsDistance_2) (and (and (> rt_input.obsDistance_1 4) (= rt_input.obsDistance_0 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))) ( or (and ( and (and (> rt_input.obsDistance_3 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3)) ( and (> rt_input.obsDistance_1 rt_input.obsDistance_3) (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 6 rt_input.obsDistance_3)))) (and ( and (> rt_state.zone_0 1) (not (= rt_input.obsDistance_2 rt_state.zone_0))) (and (> 3 rt_input.obsDistance_2) (and ( and ( and (> rt_input.obsDistance_1 4) (not (= rt_input.obsDistance_0 rt_input.obsDistance_1))) ( and (> rt_input.obsDistance_1 5) (> (+ 9 3) rt_input.obsDistance_1))) (= 6 rt_input.obsDistance_0))))) ( or (and ( and (and (> rt_input.obsDistance_3 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3)) ( and (> rt_input.obsDistance_1 rt_input.obsDistance_3) (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 6 rt_input.obsDistance_3)))) (and (> rt_state.zone_0 1) (and (> 3 rt_input.obsDistance_2) (and ( and (> rt_input.obsDistance_1 5) ( and (> rt_input.obsDistance_1 4) (not (= rt_input.obsDistance_0 rt_input.obsDistance_1)))) ( and (> rt_input.obsDistance_0 4) ( and (not (= 6 rt_input.obsDistance_0)) (not (= (+ 9 3) rt_input.obsDistance_0)))))))) ( or (and ( and (and (> rt_input.obsDistance_3 2) (> rt_input.obsDistance_0 rt_input.obsDistance_3)) ( and (> rt_input.obsDistance_1 rt_input.obsDistance_3) (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 6 rt_input.obsDistance_3)))) (and (> 3 rt_input.obsDistance_2) (and (and (not (= rt_input.obsDistance_0 rt_input.obsDistance_1)) (= 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))) ( or (and (> 3 rt_input.obsDistance_3) (and (> rt_input.obsDistance_2 5) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and (> rt_input.obsDistance_1 2) (> 3 rt_input.obsDistance_0)) ( or (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> 3 rt_input.obsDistance_2) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0))) ) ) ) ) ) ) ) 

[Final predicate size] 55

[Total time]
Total Conversion Time : 0 days, 0 hours, 5 minutes, 2 seconds


5.
[Original predicate]
(((4 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_0 >= rt_input.obsDistance_2) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and (rt_state.speed_status == Midium_speed) and !(rt_input.obsDistance_0 >= rt_input.obsDistance_1)) or ((4 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_0 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2) and (2 >= rt_input.obsDistance_0)) or (!(4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and (7 > rt_input.obsDistance_2) and (2 == rt_input.obsDistance_2)) or (!(4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and (7 > rt_input.obsDistance_2) and !(2 == rt_input.obsDistance_2) and (3 == rt_input.obsDistance_2) and (4 == rt_input.obsDistance_0)) or (!(4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and (7 > rt_input.obsDistance_2) and !(2 == rt_input.obsDistance_2) and !(3 == rt_input.obsDistance_2) and (7 >= rt_input.obsDistance_1) and (12 >= rt_input.obsDistance_0) and (1 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_0 == rt_input.obsDistance_2) and (1 == rt_state.zone_1)) or (!(4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and (7 > rt_input.obsDistance_2) and !(2 == rt_input.obsDistance_2) and !(3 == rt_input.obsDistance_2) and (7 >= rt_input.obsDistance_1) and (12 >= rt_input.obsDistance_0) and (1 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_0 == rt_input.obsDistance_2) and !(1 == rt_state.zone_1) and (rt_input.obsDistance_2 >= 1)) or (!(4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and (7 > rt_input.obsDistance_2) and !(2 == rt_input.obsDistance_2) and !(3 == rt_input.obsDistance_2) and (7 >= rt_input.obsDistance_1) and (12 >= rt_input.obsDistance_0) and !(1 >= rt_input.obsDistance_3)) or (!(4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and (7 > rt_input.obsDistance_2) and !(2 == rt_input.obsDistance_2) and !(3 == rt_input.obsDistance_2) and !(7 >= rt_input.obsDistance_1) and (1 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 1) and (rt_input.obsDistance_1 > rt_input.obsDistance_0) and !(rt_input.obsDistance_2 > rt_input.obsDistance_0)) or (!(4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and !(7 > rt_input.obsDistance_2) and (3 == rt_input.obsDistance_0)) or (!(4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2) and (4 >= rt_input.obsDistance_0)) or (!(4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2) and !(4 >= rt_input.obsDistance_0) and (7 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3)) or (!(4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > rt_state.zone_0) and (4 == rt_input.obsDistance_0) and (rt_input.obsDistance_2 > 7)) or (!(4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > rt_state.zone_0) and !(4 == rt_input.obsDistance_0)) or (!(4 >= rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(3 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and (1 == rt_input.obsDistance_2)) or (!(4 >= rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(3 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and !(1 == rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_2) and (12 == rt_input.obsDistance_1)) or (!(4 >= rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(3 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and !(1 == rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_2) and !(12 == rt_input.obsDistance_1) and (1 >= rt_state.zone_1) and !(4 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 == rt_input.obsDistance_1)) or (!(4 >= rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(3 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and !(1 == rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_2) and !(12 == rt_input.obsDistance_1) and (1 >= rt_state.zone_1) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_0 == rt_input.obsDistance_1) and (rt_input.obsDistance_0 > 7) and (rt_input.obsDistance_1 >= 7) and !(rt_input.obsDistance_0 > 12)) or (!(4 >= rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(3 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and !(1 == rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_2) and !(12 == rt_input.obsDistance_1) and (1 >= rt_state.zone_1) and !(4 == rt_input.obsDistance_3) and !(rt_input.obsDistance_0 == rt_input.obsDistance_1) and (rt_input.obsDistance_0 > 7) and !(rt_input.obsDistance_1 >= 7) and (rt_input.obsDistance_0 >= 12)) or (!(4 >= rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(3 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_input.obsDistance_3) and !(1 == rt_input.obsDistance_2) and !(4 == rt_input.obsDistance_2) and !(12 == rt_input.obsDistance_1) and !(1 >= rt_state.zone_1) and !(7 > rt_input.obsDistance_1)) or (!(4 >= rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(3 == rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > rt_input.obsDistance_3)) or (!(4 >= rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and !(4 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2)))

[Original predicate size] 178

[Final output]
( or (and (= rt_state.speed_status Midium_speed) (and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> rt_input.obsDistance_2 rt_input.obsDistance_0) (and (> rt_input.obsDistance_1 rt_input.obsDistance_0) (> 5 rt_input.obsDistance_1))))) ( or (and (= rt_input.obsDistance_2 rt_input.obsDistance_3) (and ( and (> rt_input.obsDistance_2 rt_input.obsDistance_0) (> rt_input.obsDistance_2 2)) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and (> 3 rt_input.obsDistance_3) (and (= 2 rt_state.zone_0) (and (= 2 rt_input.obsDistance_2) (> rt_input.obsDistance_1 4)))) ( or (and (> 3 rt_input.obsDistance_3) (and (= 2 rt_state.zone_0) (and (= 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (= 4 rt_input.obsDistance_0))))) ( or (and (> 2 rt_input.obsDistance_3) (and (= 1 rt_state.zone_1) (and (= 2 rt_state.zone_0) (and ( and ( and (> 7 rt_input.obsDistance_2) (not (= 2 rt_input.obsDistance_2))) ( and (not (= 3 rt_input.obsDistance_2)) (not (= rt_input.obsDistance_0 rt_input.obsDistance_2)))) (and (and (> rt_input.obsDistance_1 4) (> 8 rt_input.obsDistance_1)) (> (+ 9 4) rt_input.obsDistance_0)))))) ( or (and (> 2 rt_input.obsDistance_3) (and (not (= 1 rt_state.zone_1)) (and (= 2 rt_state.zone_0) (and ( and ( and (not (= 3 rt_input.obsDistance_2)) (not (= rt_input.obsDistance_0 rt_input.obsDistance_2))) ( and (> rt_input.obsDistance_2 0) ( and (> 7 rt_input.obsDistance_2) (not (= 2 rt_input.obsDistance_2))))) (and (and (> rt_input.obsDistance_1 4) (> 8 rt_input.obsDistance_1)) (> (+ 9 4) rt_input.obsDistance_0)))))) ( or (and (= 2 rt_input.obsDistance_3) (and (= 2 rt_state.zone_0) (and ( and (not (= 3 rt_input.obsDistance_2)) ( and (> 7 rt_input.obsDistance_2) (not (= 2 rt_input.obsDistance_2)))) (and (and (> rt_input.obsDistance_1 4) (> 8 rt_input.obsDistance_1)) (> (+ 9 4) rt_input.obsDistance_0))))) ( or (and (> 2 rt_input.obsDistance_3) (and (= 2 rt_state.zone_0) (and ( and ( and (> 7 rt_input.obsDistance_2) (not (= 2 rt_input.obsDistance_2))) ( and (not (= 3 rt_input.obsDistance_2)) (>= rt_input.obsDistance_0 rt_input.obsDistance_2))) (and ( and (> rt_input.obsDistance_1 rt_input.obsDistance_0) (> rt_input.obsDistance_1 7)) (> rt_input.obsDistance_0 1))))) ( or (and (> 3 rt_input.obsDistance_3) (and (= 2 rt_state.zone_0) (and (> rt_input.obsDistance_2 6) (and (> rt_input.obsDistance_1 4) (= 3 rt_input.obsDistance_0))))) ( or (and (> rt_input.obsDistance_3 2) (and (= 2 rt_state.zone_0) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0))))) ( or (and ( and ( and (> rt_input.obsDistance_3 2) (> 8 rt_input.obsDistance_3)) (and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (> rt_input.obsDistance_3 4))) (and (= 2 rt_state.zone_0) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and (> rt_input.obsDistance_3 2) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and (> rt_input.obsDistance_2 7) (and (> rt_input.obsDistance_1 4) (= 4 rt_input.obsDistance_0))))) ( or (and (> rt_input.obsDistance_3 2) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and (> rt_input.obsDistance_2 2) (and (> rt_input.obsDistance_1 4) (not (= 4 rt_input.obsDistance_0)))))) ( or (and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) ( and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (not (= 3 rt_input.obsDistance_3)))) (and (not (= 2 rt_state.zone_0)) (and (= 1 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) ( and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (not (= 3 rt_input.obsDistance_3)))) (and (not (= 2 rt_state.zone_0)) (and ( and (not (= 1 rt_input.obsDistance_2)) (not (= 4 rt_input.obsDistance_2))) (and (= (+ 9 3) rt_input.obsDistance_1) (> rt_input.obsDistance_0 4))))) ( or (and ( and ( and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (not (= 3 rt_input.obsDistance_3))) ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3)))) (and (> 2 rt_state.zone_1) (and (not (= 2 rt_state.zone_0)) (and ( and (not (= 1 rt_input.obsDistance_2)) (not (= 4 rt_input.obsDistance_2))) (and ( and (= rt_input.obsDistance_0 rt_input.obsDistance_1) ( and (> rt_input.obsDistance_1 4) ( not ( = 12 rt_input.obsDistance_1 ) ) )) (> rt_input.obsDistance_0 4)))))) ( or (and ( and ( and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (not (= 3 rt_input.obsDistance_3))) ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3)))) (and (> 2 rt_state.zone_1) (and (not (= 2 rt_state.zone_0)) (and ( and (not (= 1 rt_input.obsDistance_2)) (not (= 4 rt_input.obsDistance_2))) (and ( and ( and (> rt_input.obsDistance_1 4) ( not ( = 12 rt_input.obsDistance_1 ) ) ) ( and (not (= rt_input.obsDistance_0 rt_input.obsDistance_1)) (> rt_input.obsDistance_1 6))) ( and (> (+ 9 4) rt_input.obsDistance_0) (> rt_input.obsDistance_0 7))))))) ( or (and ( and ( and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (not (= 3 rt_input.obsDistance_3))) ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) (not (= 4 rt_input.obsDistance_3)))) (and (> 2 rt_state.zone_1) (and (not (= 2 rt_state.zone_0)) (and ( and (not (= 1 rt_input.obsDistance_2)) (not (= 4 rt_input.obsDistance_2))) (and ( and ( and (> rt_input.obsDistance_1 4) ( not ( = 12 rt_input.obsDistance_1 ) ) ) ( and (not (= rt_input.obsDistance_0 rt_input.obsDistance_1)) (> 7 rt_input.obsDistance_1))) (> (- rt_input.obsDistance_0 9) 2)))))) ( or (and ( and (> rt_input.obsDistance_0 rt_input.obsDistance_3) ( and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (not (= 3 rt_input.obsDistance_3)))) (and (> rt_state.zone_1 1) (and (not (= 2 rt_state.zone_0)) (and ( and (not (= 1 rt_input.obsDistance_2)) (not (= 4 rt_input.obsDistance_2))) (and ( and (> rt_input.obsDistance_1 6) ( and (> rt_input.obsDistance_1 4) ( not ( = 12 rt_input.obsDistance_1 ) ) )) (> rt_input.obsDistance_0 4)))))) ( or (and ( and (>= rt_input.obsDistance_3 rt_input.obsDistance_0) ( and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (not (= 3 rt_input.obsDistance_3)))) (and (not (= 2 rt_state.zone_0)) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) (and (> rt_input.obsDistance_3 rt_input.obsDistance_1) (and (not (= 2 rt_state.zone_0)) (and (> rt_input.obsDistance_2 2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 163

[Total time]
Total Conversion Time : 0 days, 0 hours, 13 minutes, 13 seconds


6.
[Original predicate]
(((2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_0 > 2)) or ((2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2)) or (!(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 4) and !(4 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2) and (2 >= rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 4) and !(4 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > 2) and (7 > rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_input.obsDistance_1) and (7 == rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 4) and !(4 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > 2) and (7 > rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_input.obsDistance_1) and !(7 == rt_input.obsDistance_0) and !(1 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_1 > 7) and (12 >= rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 4) and !(4 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > 2) and (7 > rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_input.obsDistance_1) and !(7 == rt_input.obsDistance_0) and !(1 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_1 > 7) and !(12 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 > rt_input.obsDistance_3) and !(2 == rt_state.zone_0)) or (!(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 4) and !(4 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > 2) and !(7 > rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 > 4) and !(4 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_1 >= rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2)))

[Original predicate size] 64

[Final output]
( or (and (> 3 rt_input.obsDistance_1) (> rt_input.obsDistance_0 2)) ( or (and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> rt_input.obsDistance_2 2) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and (and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (> 3 rt_input.obsDistance_3)) (and ( and (> 5 rt_input.obsDistance_2) (> rt_input.obsDistance_2 2)) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and ( and (> rt_input.obsDistance_3 4) (and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (> 7 rt_input.obsDistance_3))) (and (> 3 rt_input.obsDistance_2) (and (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 rt_input.obsDistance_1)) (= 7 rt_input.obsDistance_0)))) ( or (and ( and (> rt_input.obsDistance_3 4) (and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (> 7 rt_input.obsDistance_3))) (and (= 2 rt_input.obsDistance_2) (and ( and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_0 rt_input.obsDistance_1) (> 8 rt_input.obsDistance_1))) ( and (> (+ 9 4) rt_input.obsDistance_0) ( and (> rt_input.obsDistance_0 4) (not (= 7 rt_input.obsDistance_0))))))) ( or (and ( and (and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (> 7 rt_input.obsDistance_3)) (and (> rt_input.obsDistance_3 4) (> rt_input.obsDistance_1 rt_input.obsDistance_3))) (and (not (= 2 rt_state.zone_0)) (and (= 2 rt_input.obsDistance_2) (and ( and (> rt_input.obsDistance_1 4) ( and (> rt_input.obsDistance_0 rt_input.obsDistance_1) (> 8 rt_input.obsDistance_1))) (> (- rt_input.obsDistance_0 9) 3))))) ( or (and (and (>= rt_input.obsDistance_1 rt_input.obsDistance_3) (> rt_input.obsDistance_3 6)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) (and (> rt_input.obsDistance_3 rt_input.obsDistance_1) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ) ) ) ) ) ) ) 

[Final predicate size] 48

[Total time]
Total Conversion Time : 0 days, 0 hours, 3 minutes, 26 seconds


