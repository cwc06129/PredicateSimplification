1.
[Original predicate]
(((2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_0 > 2)) or ((2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_0 > 2) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2)) or (!(2 >= rt_input.obsDistance_1) and (4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 > 4) and (5 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_0) and (1 >= rt_state.zone_1) and !(rt_input.obsDistance_1 >= 7)) or (!(2 >= rt_input.obsDistance_1) and (4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 > 4) and (5 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_2 > 2) and !(3 == rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_1) and (4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 > 4) and (5 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > 4) and (rt_state.speed_status == Stop) and !(1 == rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_1) and (4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 > 4) and (5 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > 4) and !(rt_state.speed_status == Stop) and !(2 == rt_state.zone_1) and !(2 >= rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_1) and (4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 > 4) and !(5 >= rt_input.obsDistance_3) and (rt_state.speed_status == Stop) and (rt_input.obsDistance_0 > 12) and !(3 == rt_input.obsDistance_2)) or (!(2 >= rt_input.obsDistance_1) and (4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 > 4) and !(5 >= rt_input.obsDistance_3) and (rt_state.speed_status == Stop) and !(rt_input.obsDistance_0 > 12)) or (!(2 >= rt_input.obsDistance_1) and (4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 > 4) and !(5 >= rt_input.obsDistance_3) and !(rt_state.speed_status == Stop) and (rt_input.obsDistance_0 > 4) and !(rt_input.obsDistance_2 > 2)) or (!(2 >= rt_input.obsDistance_1) and (4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_1 > 4) and !(5 >= rt_input.obsDistance_3) and !(rt_state.speed_status == Stop) and !(rt_input.obsDistance_0 > 4) and !(2 == rt_state.zone_1)) or (!(2 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > 4) and (1 == rt_state.zone_1) and (rt_state.speed_status == Midium_speed) and (12 >= rt_input.obsDistance_0) and (12 >= rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > 4) and (1 == rt_state.zone_1) and (rt_state.speed_status == Midium_speed) and (12 >= rt_input.obsDistance_0) and !(12 >= rt_input.obsDistance_3) and (12 >= rt_input.obsDistance_2)) or (!(2 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > 4) and (1 == rt_state.zone_1) and (rt_state.speed_status == Midium_speed) and (12 >= rt_input.obsDistance_0) and !(12 >= rt_input.obsDistance_3) and !(12 >= rt_input.obsDistance_2) and !(7 >= rt_input.obsDistance_0) and (rt_input.obsDistance_2 > rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 > 4) and (1 == rt_state.zone_1) and (rt_state.speed_status == Midium_speed) and !(12 >= rt_input.obsDistance_0) and (5 == rt_input.obsDistance_2)) or (!(2 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_0 > 4) and (rt_state.speed_status == Stop) and !(4 == rt_input.obsDistance_1)) or (!(2 >= rt_input.obsDistance_1) and !(4 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_0 > 4) and !(rt_state.speed_status == Stop) and !(2 == rt_state.zone_1) and (rt_input.obsDistance_1 > 4)))

[Original predicate size] 109

[Final output]
( or (and (> 3 rt_input.obsDistance_1) (> rt_input.obsDistance_0 2)) ( or (and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> rt_input.obsDistance_2 2) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and ( and (> 6 rt_input.obsDistance_3) (> rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (> 2 rt_state.zone_1) (and (> 5 rt_input.obsDistance_2) (and ( and (> 7 rt_input.obsDistance_1) (> rt_input.obsDistance_1 4)) (> 5 rt_input.obsDistance_0))))) ( or (and ( and (not (= 3 rt_input.obsDistance_3)) ( and (> 6 rt_input.obsDistance_3) (> rt_input.obsDistance_2 rt_input.obsDistance_3))) (and (and (> rt_input.obsDistance_2 2) (> 5 rt_input.obsDistance_2)) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and ( and (not (= 1 rt_input.obsDistance_3)) ( and (> 6 rt_input.obsDistance_3) (>= rt_input.obsDistance_3 rt_input.obsDistance_2))) (and (= rt_state.speed_status Stop) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0))))) ( or (and ( and (> 6 rt_input.obsDistance_3) (>= rt_input.obsDistance_3 rt_input.obsDistance_2)) (and (not (= 2 rt_state.zone_1)) (and (not (= rt_state.speed_status Stop)) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (and (> rt_input.obsDistance_0 2) (> 5 rt_input.obsDistance_0))))))) ( or (and (> rt_input.obsDistance_3 5) (and (= rt_state.speed_status Stop) (and ( and (> 5 rt_input.obsDistance_2) (not (= 3 rt_input.obsDistance_2))) (and (> rt_input.obsDistance_1 4) (> (- rt_input.obsDistance_0 9) 3))))) ( or (and (> rt_input.obsDistance_3 5) (and (= rt_state.speed_status Stop) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> (+ 9 4) rt_input.obsDistance_0))))) ( or (and (> rt_input.obsDistance_3 5) (and (not (= rt_state.speed_status Stop)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and (> rt_input.obsDistance_3 5) (and (not (= 2 rt_state.zone_1)) (and (not (= rt_state.speed_status Stop)) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0)))))) ( or (and (= rt_state.speed_status Midium_speed) (and (> (+ 9 4) rt_input.obsDistance_3) (and (= 1 rt_state.zone_1) (and (> rt_input.obsDistance_2 4) (and (> rt_input.obsDistance_1 2) ( and (> rt_input.obsDistance_0 4) (> (+ 9 4) rt_input.obsDistance_0))))))) ( or (and (= rt_state.speed_status Midium_speed) (and (> (- rt_input.obsDistance_3 9) 3) (and (= 1 rt_state.zone_1) (and ( and (> rt_input.obsDistance_2 4) (> (+ 9 4) rt_input.obsDistance_2)) (and (> rt_input.obsDistance_1 2) ( and (> rt_input.obsDistance_0 4) (> (+ 9 4) rt_input.obsDistance_0))))))) ( or (and (= rt_state.speed_status Midium_speed) (and ( and (> (- rt_input.obsDistance_3 9) 3) (> rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (= 1 rt_state.zone_1) (and (> (- rt_input.obsDistance_2 9) 3) (and (> rt_input.obsDistance_1 2) ( and (> rt_input.obsDistance_0 7) ( and (> rt_input.obsDistance_0 4) (> (+ 9 4) rt_input.obsDistance_0)))))))) ( or (and (= rt_state.speed_status Midium_speed) (and (= 1 rt_state.zone_1) (and (= 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 2) (> (- rt_input.obsDistance_0 9) 3))))) ( or (and (= rt_state.speed_status Stop) (and (> rt_input.obsDistance_2 4) (and ( and (> rt_input.obsDistance_1 2) (not (= 4 rt_input.obsDistance_1))) (> 5 rt_input.obsDistance_0)))) (and (not (= 2 rt_state.zone_1)) (and (not (= rt_state.speed_status Stop)) (and (> rt_input.obsDistance_2 4) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0))))) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 96

[Total time]
Total Conversion Time : 0 days, 0 hours, 4 minutes, 19 seconds


2.
[Original predicate]
(((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 4) and (rt_input.obsDistance_1 > 2) and (5 >= rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_1) and (2 == rt_state.zone_1) and !(rt_state.speed_status == Slow_speed)) or ((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 4) and (rt_input.obsDistance_1 > 2) and (5 >= rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_1) and !(2 == rt_state.zone_1)) or ((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 4) and (rt_input.obsDistance_1 > 2) and (5 >= rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2) and !(rt_input.obsDistance_1 > 4) and (1 >= rt_state.zone_1)) or ((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 4) and (rt_input.obsDistance_1 > 2) and (5 >= rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2) and !(rt_input.obsDistance_1 > 4) and !(1 >= rt_state.zone_1) and (rt_state.speed_status == Stop)) or ((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 4) and (rt_input.obsDistance_1 > 2) and (5 >= rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > 2) and (rt_input.obsDistance_1 > 4)) or ((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 4) and (rt_input.obsDistance_1 > 2) and (5 >= rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > 2) and !(rt_input.obsDistance_1 > 4) and (1 >= rt_state.zone_1)) or ((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 4) and (rt_input.obsDistance_1 > 2) and !(5 >= rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_1 > 4)) or ((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 4) and (rt_input.obsDistance_1 > 2) and !(5 >= rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 4) and (2 == rt_input.obsDistance_3) and (2 == rt_state.zone_0) and (rt_state.speed_status == Stop)) or ((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 4) and (rt_input.obsDistance_1 > 2) and !(5 >= rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 4) and (2 == rt_input.obsDistance_3) and !(2 == rt_state.zone_0)) or ((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 4) and (rt_input.obsDistance_1 > 2) and !(5 >= rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 4) and (1 >= rt_state.zone_0)) or ((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 4) and (rt_input.obsDistance_1 > 2) and !(5 >= rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 4) and !(1 >= rt_state.zone_0) and !(rt_state.speed_status == Slow_speed)) or ((rt_input.obsDistance_0 > 2) and (4 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > 4) and (rt_state.speed_status == Midium_speed) and !(4 > rt_input.obsDistance_0)) or ((rt_input.obsDistance_0 > 2) and !(4 >= rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_1) and (rt_state.speed_status == Stop) and !(4 >= rt_input.obsDistance_0) and !(1 >= rt_state.zone_1)) or ((rt_input.obsDistance_0 > 2) and !(4 >= rt_input.obsDistance_3) and (4 >= rt_input.obsDistance_1) and !(rt_state.speed_status == Stop) and !(2 == rt_state.zone_0) and !(4 >= rt_input.obsDistance_0) and (rt_input.obsDistance_1 > 2)) or ((rt_input.obsDistance_0 > 2) and !(4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_1) and (1 == rt_state.zone_0) and (rt_state.speed_status == Midium_speed) and (12 >= rt_input.obsDistance_3)) or ((rt_input.obsDistance_0 > 2) and !(4 >= rt_input.obsDistance_3) and !(4 >= rt_input.obsDistance_1) and (1 == rt_state.zone_0) and (rt_state.speed_status == Midium_speed) and !(12 >= rt_input.obsDistance_3) and (24 == rt_input.obsDistance_3)) or (!(rt_input.obsDistance_0 > 2) and (2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2)) or (!(rt_input.obsDistance_0 > 2) and (2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_3)) or (!(rt_input.obsDistance_0 > 2) and !(2 >= rt_input.obsDistance_1)))

[Original predicate size] 136

[Final output]
( or (and (not (= rt_state.speed_status Slow_speed)) (and (> 3 rt_input.obsDistance_3) (and (= 2 rt_state.zone_1) (and (> 6 rt_input.obsDistance_2) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))))) ( or (and (> 3 rt_input.obsDistance_3) (and (not (= 2 rt_state.zone_1)) (and (> 6 rt_input.obsDistance_2) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4))))) ( or (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (> 2 rt_state.zone_1) (and ( and (> 6 rt_input.obsDistance_2) (> rt_input.obsDistance_2 2)) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4))))) ( or (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (> rt_state.zone_1 1) (and (= rt_state.speed_status Stop) (and ( and (> 6 rt_input.obsDistance_2) (> rt_input.obsDistance_2 2)) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))))) ( or (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (> 2 rt_state.zone_1) (and (> 3 rt_input.obsDistance_2) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4))))) ( or (and (> 3 rt_input.obsDistance_3) (and (> rt_input.obsDistance_2 5) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and (= 2 rt_input.obsDistance_3) (and (= rt_state.speed_status Stop) (and (= 2 rt_state.zone_0) (and (> rt_input.obsDistance_2 5) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))))) ( or (and (= 2 rt_input.obsDistance_3) (and (not (= 2 rt_state.zone_0)) (and (> rt_input.obsDistance_2 5) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4))))) ( or (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (> 2 rt_state.zone_0) (and (> rt_input.obsDistance_2 5) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4))))) ( or (and (not (= rt_state.speed_status Slow_speed)) (and ( and (> 5 rt_input.obsDistance_3) (> rt_input.obsDistance_3 2)) (and (> rt_state.zone_0 1) (and (> rt_input.obsDistance_2 5) (and ( and (> rt_input.obsDistance_1 2) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 4)))))) ( or (and (= rt_state.speed_status Midium_speed) (and (> 5 rt_input.obsDistance_3) (= 4 rt_input.obsDistance_0))) ( or (and (> rt_input.obsDistance_3 4) (and (> rt_state.zone_1 1) (and (= rt_state.speed_status Stop) (and (> 5 rt_input.obsDistance_1) (> rt_input.obsDistance_0 4))))) ( or (and (> rt_input.obsDistance_3 4) (and (not (= rt_state.speed_status Stop)) (and (not (= 2 rt_state.zone_0)) (and ( and (> 5 rt_input.obsDistance_1) (> rt_input.obsDistance_1 2)) (> rt_input.obsDistance_0 4))))) ( or (and (= rt_state.speed_status Midium_speed) (and ( and (> rt_input.obsDistance_3 4) (> (+ 9 4) rt_input.obsDistance_3)) (and (= 1 rt_state.zone_0) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 2))))) ( or (and (= rt_state.speed_status Midium_speed) (and (= (+ (+ 9 9) 6) rt_input.obsDistance_3) (and (= 1 rt_state.zone_0) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 2))))) ( or (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> 3 rt_input.obsDistance_2) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0))) (and (> rt_input.obsDistance_1 2) (> 3 rt_input.obsDistance_0)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 108

[Total time]
Total Conversion Time : 0 days, 0 hours, 4 minutes, 49 seconds


3.
[Original predicate]
(((rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_state.zone_0) and (5 > rt_input.obsDistance_1) and (1 == rt_state.zone_0) and !(rt_input.obsDistance_1 > rt_input.obsDistance_0) and (rt_input.obsDistance_0 > 2) and !(rt_input.obsDistance_2 > rt_input.obsDistance_1)) or ((rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_state.zone_0) and (5 > rt_input.obsDistance_1) and (1 == rt_state.zone_0) and !(rt_input.obsDistance_1 > rt_input.obsDistance_0) and !(rt_input.obsDistance_0 > 2)) or ((rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_state.zone_0) and !(5 > rt_input.obsDistance_1) and (5 > rt_input.obsDistance_0) and (rt_input.obsDistance_2 >= 5) and !(1 >= rt_state.zone_0)) or ((rt_input.obsDistance_2 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > rt_state.zone_0) and !(5 > rt_input.obsDistance_1) and !(5 > rt_input.obsDistance_0)) or ((rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(rt_input.obsDistance_0 > rt_state.zone_0) and (rt_input.obsDistance_3 > 2) and (5 > rt_input.obsDistance_1)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and (5 > rt_input.obsDistance_0) and (rt_state.speed_status == Midium_speed) and !(rt_input.obsDistance_2 > rt_input.obsDistance_1) and (1 == rt_state.zone_0)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and (5 > rt_input.obsDistance_0) and (rt_state.speed_status == Midium_speed) and !(rt_input.obsDistance_2 > rt_input.obsDistance_1) and !(1 == rt_state.zone_0) and (2 == rt_input.obsDistance_2) and !(rt_input.obsDistance_0 >= 4)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(5 > rt_input.obsDistance_0) and (5 > rt_input.obsDistance_1) and (rt_state.zone_1 > rt_state.zone_0) and (rt_input.obsDistance_1 > rt_state.zone_1) and (5 == rt_input.obsDistance_3) and (rt_input.obsDistance_0 > 7)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(5 > rt_input.obsDistance_0) and (5 > rt_input.obsDistance_1) and (rt_state.zone_1 > rt_state.zone_0) and (rt_input.obsDistance_1 > rt_state.zone_1) and !(5 == rt_input.obsDistance_3)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(5 > rt_input.obsDistance_0) and !(5 > rt_input.obsDistance_1) and (rt_input.obsDistance_2 >= 5) and (2 >= rt_input.obsDistance_3) and (5 >= rt_input.obsDistance_2)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(5 > rt_input.obsDistance_0) and !(5 > rt_input.obsDistance_1) and (rt_input.obsDistance_2 >= 5) and !(2 >= rt_input.obsDistance_3)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(5 > rt_input.obsDistance_0) and !(5 > rt_input.obsDistance_1) and !(rt_input.obsDistance_2 >= 5) and (5 == rt_input.obsDistance_3)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(5 > rt_input.obsDistance_0) and !(5 > rt_input.obsDistance_1) and !(rt_input.obsDistance_2 >= 5) and !(5 == rt_input.obsDistance_3) and (rt_state.zone_0 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_3 > rt_state.zone_0)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(5 > rt_input.obsDistance_0) and !(5 > rt_input.obsDistance_1) and !(rt_input.obsDistance_2 >= 5) and !(5 == rt_input.obsDistance_3) and !(rt_state.zone_0 >= rt_input.obsDistance_2) and (rt_input.obsDistance_3 > 2) and (rt_input.obsDistance_2 > 2)) or (!(rt_input.obsDistance_2 == rt_input.obsDistance_3) and !(5 > rt_input.obsDistance_0) and !(5 > rt_input.obsDistance_1) and !(rt_input.obsDistance_2 >= 5) and !(5 == rt_input.obsDistance_3) and !(rt_state.zone_0 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_3 > 2) and (2 >= rt_input.obsDistance_2)))

[Original predicate size] 91

[Final output]
( or (and (= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 1 rt_state.zone_0)) (and (>= rt_input.obsDistance_1 rt_input.obsDistance_2) (and (and (>= rt_input.obsDistance_0 rt_input.obsDistance_1) (> 5 rt_input.obsDistance_1)) (> rt_input.obsDistance_0 2))))) ( or (and (= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 1 rt_state.zone_0)) (and (and (>= rt_input.obsDistance_0 rt_input.obsDistance_1) (> 5 rt_input.obsDistance_1)) (> 3 rt_input.obsDistance_0)))) ( or (and (= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (and (> rt_state.zone_0 1) (> rt_input.obsDistance_0 rt_state.zone_0)) (and (> rt_input.obsDistance_2 4) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0))))) ( or (and (= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> rt_input.obsDistance_0 rt_state.zone_0) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and (and (> rt_input.obsDistance_3 2) (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (>= rt_state.zone_0 rt_input.obsDistance_0) (> 5 rt_input.obsDistance_1))) ( or (and (= rt_state.speed_status Midium_speed) (and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (= 1 rt_state.zone_0) (and (>= rt_input.obsDistance_1 rt_input.obsDistance_2) (> 5 rt_input.obsDistance_0))))) ( or (and (= rt_state.speed_status Midium_speed) (and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (and (not (= 1 rt_state.zone_0)) (and ( and (>= rt_input.obsDistance_1 rt_input.obsDistance_2) (= 2 rt_input.obsDistance_2)) (> 4 rt_input.obsDistance_0))))) ( or (and ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (= 5 rt_input.obsDistance_3)) (and (and (> rt_state.zone_1 rt_state.zone_0) (> rt_input.obsDistance_1 rt_state.zone_1)) (and (> 5 rt_input.obsDistance_1) (> rt_input.obsDistance_0 7)))) ( or (and ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (not (= 5 rt_input.obsDistance_3))) (and (and (> rt_state.zone_1 rt_state.zone_0) (> rt_input.obsDistance_1 rt_state.zone_1)) (and (> 5 rt_input.obsDistance_1) (> rt_input.obsDistance_0 4)))) ( or (and ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (> 3 rt_input.obsDistance_3)) (and (= 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (> rt_input.obsDistance_3 2)) (and (> rt_input.obsDistance_2 4) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (= 5 rt_input.obsDistance_3)) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and ( and (>= rt_state.zone_0 rt_input.obsDistance_3) ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (not (= 5 rt_input.obsDistance_3)))) (and (>= rt_state.zone_0 rt_input.obsDistance_2) (and (> 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and ( and (> rt_input.obsDistance_3 2) ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (not (= 5 rt_input.obsDistance_3)))) (and (> rt_input.obsDistance_2 rt_state.zone_0) (and (and (> rt_input.obsDistance_2 2) (> 5 rt_input.obsDistance_2)) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) (and ( and (> 3 rt_input.obsDistance_3) ( and (not (= rt_input.obsDistance_2 rt_input.obsDistance_3)) (not (= 5 rt_input.obsDistance_3)))) (and (> rt_input.obsDistance_2 rt_state.zone_0) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 87

[Total time]
Total Conversion Time : 0 days, 0 hours, 3 minutes, 58 seconds


4.
[Original predicate]
(((2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_1 > 2)) or ((2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_1 > 2) and (2 >= rt_input.obsDistance_2)) or ((2 >= rt_input.obsDistance_0) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_0) and (5 > rt_input.obsDistance_3) and (rt_input.obsDistance_1 >= 5) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 5) and (2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 >= 5)) or (!(2 >= rt_input.obsDistance_0) and (5 > rt_input.obsDistance_3) and (rt_input.obsDistance_1 >= 5) and !(rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_0 >= 5) and (2 >= rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_3)))

[Original predicate size] 23

[Final output]
( or (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> rt_input.obsDistance_1 2) (> 3 rt_input.obsDistance_0))) ( or (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> 3 rt_input.obsDistance_2) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 3 rt_input.obsDistance_0)) ( or (and (and (>= rt_input.obsDistance_2 rt_input.obsDistance_3) (> 3 rt_input.obsDistance_3)) (and (> rt_input.obsDistance_2 5) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) (and ( and (> rt_input.obsDistance_3 2) (and (> rt_input.obsDistance_3 rt_input.obsDistance_2) (> 5 rt_input.obsDistance_3))) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ) ) ) ) 

[Final predicate size] 20

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 50 seconds


5.
[Original predicate]
(((5 > rt_input.obsDistance_1) and (rt_input.obsDistance_2 > rt_input.obsDistance_0) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and (rt_state.speed_status == Midium_speed) and !(rt_input.obsDistance_0 >= 5)) or ((5 > rt_input.obsDistance_1) and (rt_input.obsDistance_2 > rt_input.obsDistance_0) and !(rt_input.obsDistance_2 > rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_1) and (rt_input.obsDistance_2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2) and (2 >= rt_input.obsDistance_0)) or (!(5 > rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and (5 >= rt_input.obsDistance_2) and (5 > rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_2) and (rt_input.obsDistance_0 >= 5)) or (!(5 > rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and (5 >= rt_input.obsDistance_2) and (5 > rt_input.obsDistance_2) and (2 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_0 >= 5) and !(2 == rt_state.zone_1)) or (!(5 > rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and (5 >= rt_input.obsDistance_2) and (5 > rt_input.obsDistance_2) and !(2 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_0 >= 5)) or (!(5 > rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and (5 >= rt_input.obsDistance_2) and !(5 > rt_input.obsDistance_2)) or (!(5 > rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > rt_state.zone_0) and (2 >= rt_input.obsDistance_3) and !(5 >= rt_input.obsDistance_2) and !(rt_input.obsDistance_0 >= 5)) or (!(5 > rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2) and (7 == rt_input.obsDistance_2) and (5 > rt_input.obsDistance_0) and (12 >= rt_input.obsDistance_3)) or (!(5 > rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2) and (7 == rt_input.obsDistance_2) and !(5 > rt_input.obsDistance_0)) or (!(5 > rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2) and !(7 == rt_input.obsDistance_2)) or (!(5 > rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > 2) and (5 > rt_input.obsDistance_0)) or (!(5 > rt_input.obsDistance_1) and (2 == rt_state.zone_0) and (rt_input.obsDistance_0 > rt_state.zone_0) and !(2 >= rt_input.obsDistance_3) and !(rt_input.obsDistance_2 > 2) and !(5 > rt_input.obsDistance_0) and (5 == rt_input.obsDistance_3)) or (!(5 > rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and (rt_input.obsDistance_0 >= 5) and (5 == rt_input.obsDistance_3)) or (!(5 > rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and (rt_input.obsDistance_0 >= 5) and !(5 == rt_input.obsDistance_3) and (5 == rt_input.obsDistance_2)) or (!(5 > rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and (rt_input.obsDistance_0 >= 5) and !(5 == rt_input.obsDistance_3) and !(5 == rt_input.obsDistance_2) and (1 > rt_state.zone_1) and (rt_input.obsDistance_1 > rt_input.obsDistance_3) and (7 >= rt_input.obsDistance_3) and (1 >= rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2)) or (!(5 > rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and (rt_input.obsDistance_0 >= 5) and !(5 == rt_input.obsDistance_3) and !(5 == rt_input.obsDistance_2) and (1 > rt_state.zone_1) and (rt_input.obsDistance_1 > rt_input.obsDistance_3) and !(7 >= rt_input.obsDistance_3)) or (!(5 > rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and (rt_input.obsDistance_0 >= 5) and !(5 == rt_input.obsDistance_3) and !(5 == rt_input.obsDistance_2) and !(1 > rt_state.zone_1) and (rt_input.obsDistance_0 >= rt_input.obsDistance_1) and (rt_input.obsDistance_1 >= 12)) or (!(5 > rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and (rt_input.obsDistance_0 >= 5) and !(5 == rt_input.obsDistance_3) and !(5 == rt_input.obsDistance_2) and !(1 > rt_state.zone_1) and (rt_input.obsDistance_0 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_1 >= 12) and !(2 >= rt_input.obsDistance_2) and !(5 == rt_input.obsDistance_0)) or (!(5 > rt_input.obsDistance_1) and !(2 == rt_state.zone_0) and (rt_input.obsDistance_0 >= 5) and !(5 == rt_input.obsDistance_3) and !(5 == rt_input.obsDistance_2) and !(1 > rt_state.zone_1) and !(rt_input.obsDistance_0 >= rt_input.obsDistance_1)))

[Original predicate size] 135

[Final output]
( or (and (= rt_state.speed_status Midium_speed) (and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> rt_input.obsDistance_2 rt_input.obsDistance_0) (and (> 5 rt_input.obsDistance_1) (> 5 rt_input.obsDistance_0))))) ( or (and (= rt_input.obsDistance_2 rt_input.obsDistance_3) (and ( and (> rt_input.obsDistance_2 rt_input.obsDistance_0) (> rt_input.obsDistance_2 2)) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and (> 3 rt_input.obsDistance_3) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and (> 3 rt_input.obsDistance_3) (and (not (= 2 rt_state.zone_1)) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0)))))) ( or (and (> 3 rt_input.obsDistance_3) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and (and (> rt_input.obsDistance_2 2) (> 5 rt_input.obsDistance_2)) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0))))) ( or (and (> 3 rt_input.obsDistance_3) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and (= 5 rt_input.obsDistance_2) (> rt_input.obsDistance_1 4)))) ( or (and (> 3 rt_input.obsDistance_3) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and (> rt_input.obsDistance_2 5) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0))))) ( or (and ( and (> rt_input.obsDistance_3 2) (> (+ 9 4) rt_input.obsDistance_3)) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and (= 7 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0))))) ( or (and (> rt_input.obsDistance_3 2) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and (= 7 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and (> rt_input.obsDistance_3 2) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and ( and (> rt_input.obsDistance_2 2) (not (= 7 rt_input.obsDistance_2))) (> rt_input.obsDistance_1 4)))) ( or (and (> rt_input.obsDistance_3 2) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> 5 rt_input.obsDistance_0))))) ( or (and (= 5 rt_input.obsDistance_3) (and (and (> rt_input.obsDistance_0 rt_state.zone_0) (= 2 rt_state.zone_0)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and (= 5 rt_input.obsDistance_3) (and (not (= 2 rt_state.zone_0)) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ( or (and (not (= 5 rt_input.obsDistance_3)) (and (not (= 2 rt_state.zone_0)) (and (= 5 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4))))) ( or (and ( and ( and (not (= 5 rt_input.obsDistance_3)) (> rt_input.obsDistance_1 rt_input.obsDistance_3)) (> 2 rt_input.obsDistance_3)) (and (> 1 rt_state.zone_1) (and (not (= 2 rt_state.zone_0)) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))))) ( or (and (and (> rt_input.obsDistance_3 7) (> rt_input.obsDistance_1 rt_input.obsDistance_3)) (and (> 1 rt_state.zone_1) (and (not (= 2 rt_state.zone_0)) (and (not (= 5 rt_input.obsDistance_2)) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))))) ( or (and (not (= 5 rt_input.obsDistance_3)) (and (> rt_state.zone_1 0) (and (not (= 2 rt_state.zone_0)) (and (not (= 5 rt_input.obsDistance_2)) (and ( and (> (- rt_input.obsDistance_1 9) 2) (and (>= rt_input.obsDistance_0 rt_input.obsDistance_1) (> rt_input.obsDistance_1 4))) (> rt_input.obsDistance_0 4)))))) ( or (and (not (= 5 rt_input.obsDistance_3)) (and (> rt_state.zone_1 0) (and (not (= 2 rt_state.zone_0)) (and ( and (not (= 5 rt_input.obsDistance_2)) (> rt_input.obsDistance_2 2)) (and ( and (> (+ 9 3) rt_input.obsDistance_1) (and (>= rt_input.obsDistance_0 rt_input.obsDistance_1) (> rt_input.obsDistance_1 4))) (> rt_input.obsDistance_0 5)))))) (and (not (= 5 rt_input.obsDistance_3)) (and (> rt_state.zone_1 0) (and (not (= 2 rt_state.zone_0)) (and (not (= 5 rt_input.obsDistance_2)) (and ( and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_1 rt_input.obsDistance_0)) (> rt_input.obsDistance_0 4)))))) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) 

[Final predicate size] 120

[Total time]
Total Conversion Time : 0 days, 0 hours, 4 minutes, 44 seconds


6.
[Original predicate]
(((2 >= rt_input.obsDistance_1) and (2 >= rt_input.obsDistance_0) and (rt_input.obsDistance_2 > rt_input.obsDistance_3) and !(2 >= rt_input.obsDistance_2)) or ((2 >= rt_input.obsDistance_1) and !(2 >= rt_input.obsDistance_0)) or (!(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 >= 5) and !(5 > rt_input.obsDistance_1) and (rt_input.obsDistance_0 >= 5) and (5 >= rt_input.obsDistance_3) and (rt_input.obsDistance_2 > 2) and (2 >= rt_input.obsDistance_3)) or (!(2 >= rt_input.obsDistance_1) and !(rt_input.obsDistance_2 >= 5) and !(5 > rt_input.obsDistance_1) and (rt_input.obsDistance_0 >= 5) and !(5 >= rt_input.obsDistance_3) and (2 >= rt_input.obsDistance_2)))

[Original predicate size] 19

[Final output]
( or (and (> rt_input.obsDistance_2 rt_input.obsDistance_3) (and (> rt_input.obsDistance_2 2) (and (> 3 rt_input.obsDistance_1) (> 3 rt_input.obsDistance_0)))) ( or (and (> 3 rt_input.obsDistance_1) (> rt_input.obsDistance_0 2)) ( or (and (> 3 rt_input.obsDistance_3) (and (and (> rt_input.obsDistance_2 2) (> 5 rt_input.obsDistance_2)) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) (and (> rt_input.obsDistance_3 5) (and (> 3 rt_input.obsDistance_2) (and (> rt_input.obsDistance_1 4) (> rt_input.obsDistance_0 4)))) ) ) ) 

[Final predicate size] 15

[Total time]
Total Conversion Time : 0 days, 0 hours, 0 minutes, 11 seconds


