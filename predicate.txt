## 2023-02-16(Tue) SoheeJung
## Active Learning을 통해 생성된 모델들의 Predicate을 Constraint 형태로 변환해서 저장한 파일

1. prime number
    (1) Original Code
    ((!(rt_input.number > 7) and (rt_input.number > 1) and !(4 == rt_input.number) and (rt_input.number >= 6) and !(7 > rt_input.number)) or (!(rt_input.number > 7) and (rt_input.number > 1) and !(4 == rt_input.number) and !(rt_input.number >= 6)))
    
    (1)-1. Conversion Code
    (or (and (and (and (and (not (> rt_input.number 7)) (> rt_input.number 1)) (not (= 4 rt_input.number))) (>= rt_input.number 6)) (not (> 7 rt_input.number))) (and (and (and (not (> rt_input.number 7)) (> rt_input.number 1)) (not (= 4 rt_input.number))) (not (>= rt_input.number 6)))) 

    (1)-2. result
    (define-fun simplify ((x Int)) Bool
    (and (or (or (> 4 x) (= 7 x)) (= 5 x)) (> x 1)))

    real    1m16.021s
    user    1m16.003s
    sys     0m0.017s

2. gcd
    (1) Original Code : n2의 값이 2인 경우
    (((2 >= rt_input.n1) and !(1 == (4 - rt_input.n2)) and (4 >= rt_input.n2)) or ((2 >= rt_input.n1) and !(1 == (4 - rt_input.n2)) and !(4 >= rt_input.n2) and (rt_input.n2 >= 8)) or ((2 >= rt_input.n1) and !(1 == (4 - rt_input.n2)) and !(4 >= rt_input.n2) and !(rt_input.n2 >= 8) and (6 == rt_input.n2)) or (!(2 >= rt_input.n1) and (6 == rt_input.n1) and !(rt_input.n1 == rt_input.n2) and !(1 == (4 - rt_input.n2)) and (9 > rt_input.n2)) or (!(2 >= rt_input.n1) and !(6 == rt_input.n1) and (6 == rt_input.n2) and !(4 > rt_input.n1) and !(9 == rt_input.n1)) or (!(2 >= rt_input.n1) and !(6 == rt_input.n1) and !(6 == rt_input.n2) and (2 >= rt_input.n2) and (1 == (9 - rt_input.n1))) or (!(2 >= rt_input.n1) and !(6 == rt_input.n1) and !(6 == rt_input.n2) and (2 >= rt_input.n2) and !(1 == (9 - rt_input.n1)) and (4 == rt_input.n1)))

    (1)-1. Conversion Code
    (or (or (or (or (or (or 
    (and (and (>= 2 rt_input.n1) (not (= 1 (- 4 rt_input.n2)))) (>= 4 rt_input.n2)) 
    (and (and (and (>= 2 rt_input.n1) (not (= 1 (- 4 rt_input.n2)))) (not (>= 4 rt_input.n2))) (>= rt_input.n2 8))
    )
    (and (and (and (and (>= 2 rt_input.n1) (not (= 1 (- 4 rt_input.n2)))) (not (>= 4 rt_input.n2))) (not (>= rt_input.n2 8))) (= 6 rt_input.n2))
    )
    (and (and (and (and (not (>= 2 rt_input.n1)) (= 6 rt_input.n1)) (not (= rt_input.n1 rt_input.n2))) (not (= 1 (- 4 rt_input.n2)))) (> 9 rt_input.n2))
    ) 
    (and (and (and (and (not (>= 2 rt_input.n1)) (not (= 6 rt_input.n1))) (= 6 rt_input.n2)) (not (> 4 rt_input.n1))) (not (= 9 rt_input.n1))) 
    )
    (and (and (and (and (not (>= 2 rt_input.n1)) (not (= 6 rt_input.n1))) (not (= 6 rt_input.n2))) (>= 2 rt_input.n2)) (= 1 (- 9 rt_input.n1))) 
    )
    (and (and (and (and (and (not (>= 2 rt_input.n1)) (not (= 6 rt_input.n1))) (not (= 6 rt_input.n2))) (>= 2 rt_input.n2)) (not (= 1 (- 9 rt_input.n1)))) (= 4 rt_input.n1))
    )

    (1)-2. result
    


    (2) Original Code : n2의 값이 4인 경우
    (((4 == rt_input.n1) and (4 == rt_input.n2)) or ((4 == rt_input.n1) and !(4 == rt_input.n2) and (rt_input.n2 >= 8)) or (!(4 == rt_input.n1) and (4 == rt_input.n2) and (rt_input.n1 >= 8)))

    (2)-1. Conversion Code
    (or (or 
    (and (= 4 rt_input.n1) (= 4 rt_input.n2)) 
    (and (and (= 4 rt_input.n1) (not (= 4 rt_input.n2))) (>= rt_input.n2 8)) 
    )
    (and (and (not (= 4 rt_input.n1)) (= 4 rt_input.n2)) (>= rt_input.n1 8))
    ) 

    (2)-2-1. result (변수 2개 같이 넣어주기)
    (define-fun simplify ((x Int) (y Int)) Bool
    (and (or (or (> y 7) (> x 7)) (= y x)) (or (= 4 y) (= 4 x))))

    real    670m54.284s
    user    670m52.477s
    sys     0m1.027s

    (2)-2-2. result (변수 2개 따로 넣어주기)
        1) rt_input.n1
        (define-fun simplify ((x Int)) Bool
        (or (> x 7) (= 4 x)))

        real    0m0.669s
        user    0m0.638s
        sys     0m0.031s

        2) rt_input.n2
        (define-fun simplify ((x Int)) Bool
        (or (> x 7) (= 4 x)))

        real    0m0.687s
        user    0m0.658s
        sys     0m0.030s


    (3) Original Code : n2의 값이 3인 경우
    (((9 == rt_input.n1) and (6 >= rt_input.n2) and (6 > rt_input.n2) and (4 >= rt_input.n2)) or ((9 == rt_input.n1) and (6 >= rt_input.n2) and !(6 > rt_input.n2)) or (!(9 == rt_input.n1) and (9 == rt_input.n2) and (6 >= rt_input.n1)) or (!(9 == rt_input.n1) and !(9 == rt_input.n2) and (6 >= rt_input.n1) and (6 >= rt_input.n2) and !(2 >= rt_input.n2) and !(4 == rt_input.n2) and !(2 >= rt_input.n1) and (4 > rt_input.n1) and (4 >= rt_input.n2)) or (!(9 == rt_input.n1) and !(9 == rt_input.n2) and (6 >= rt_input.n1) and (6 >= rt_input.n2) and !(2 >= rt_input.n2) and !(4 == rt_input.n2) and !(2 >= rt_input.n1) and (4 > rt_input.n1) and !(4 >= rt_input.n2) and !(6 > rt_input.n2)) or (!(9 == rt_input.n1) and !(9 == rt_input.n2) and (6 >= rt_input.n1) and (6 >= rt_input.n2) and !(2 >= rt_input.n2) and !(4 == rt_input.n2) and !(2 >= rt_input.n1) and !(4 > rt_input.n1) and (6 == rt_input.n1) and (4 >= rt_input.n2)))

    (3)-1. Conversion Code
    (or (or (or (or (or 
    (and (and (and (= 9 rt_input.n1) (>= 6 rt_input.n2)) (> 6 rt_input.n2)) (>= 4 rt_input.n2)) 
    (and (and (= 9 rt_input.n1) (>= 6 rt_input.n2)) (not (> 6 rt_input.n2)))
    )
    (and (and (not (= 9 rt_input.n1)) (= 9 rt_input.n2)) (>= 6 rt_input.n1)) 
    )
    (and (and (and (and (and (and (and (and (not (= 9 rt_input.n1)) (not (= 9 rt_input.n2))) (>= 6 rt_input.n1)) (>= 6 rt_input.n2)) (not (>= 2 rt_input.n2))) (not (= 4 rt_input.n2))) (not (>= 2 rt_input.n1))) (> 4 rt_input.n1)) (>= 4 rt_input.n2)) 
    )
    (and (and (and (and (and (and (and (and (and (not (= 9 rt_input.n1)) (not (= 9 rt_input.n2))) (>= 6 rt_input.n1)) (>= 6 rt_input.n2)) (not (>= 2 rt_input.n2))) (not (= 4 rt_input.n2))) (not (>= 2 rt_input.n1))) (> 4 rt_input.n1)) (not (>= 4 rt_input.n2))) (not (> 6 rt_input.n2))) 
    )
    (and (and (and (and (and (and (and (and (and (not (= 9 rt_input.n1)) (not (= 9 rt_input.n2))) (>= 6 rt_input.n1)) (>= 6 rt_input.n2)) (not (>= 2 rt_input.n2))) (not (= 4 rt_input.n2))) (not (>= 2 rt_input.n1))) (not (> 4 rt_input.n1))) (= 6 rt_input.n1)) (>= 4 rt_input.n2))
    )

    (3)-2-1. result (변수 2개 같이 넣어주기)
    

    (3)-2-2. result (변수 2개 따로 넣어주기)
        1) rt_input.n1
        (define-fun simplify ((x Int)) Bool
        (or (> 7 x) (= 9 x)))

        real    0m0.493s
        user    0m0.469s
        sys     0m0.024s

        2) rt_input.n2
        (define-fun simplify ((x Int)) Bool
        (or (or (> 5 x) (= 9 x)) (= 6 x)))

        real    0m21.355s
        user    0m21.323s
        sys     0m0.032s

    (4) Original Code : n2의 값이 9인 경우
    (!(9 > rt_input.n2) and !(9 > rt_input.n1))

    (4)-1. Conversion Code
    (and (not (> 9 rt_input.n2)) (not (> 9 rt_input.n1)))

    (4)-2. result
    (define-fun simplify ((x Int) (y Int)) Bool
    (and (> y 8) (> x 8)))

    real    0m0.738s
    user    0m0.708s
    sys     0m0.030s

    (5) Original Code : n2의 값이 7인 경우
    ((rt_input.n1 == rt_input.n2) and !(6 >= rt_input.n2) and !(rt_input.n1 >= 8))

    (5)-1. Conversion Code
    (and (and (= rt_input.n1 rt_input.n2) (not (>= 6 rt_input.n2))) (not (>= rt_input.n1 8)))

    (5)-2. result
    (define-fun simplify ((x Int) (y Int)) Bool
    (and (= 7 x) (= y x)))

    real    0m0.624s
    user    0m0.597s
    sys     0m0.027s

    (6) Original Code : n2의 값이 8인 경우
    ((rt_input.n1 == rt_input.n2) and (rt_input.n1 >= 8) and (9 > rt_input.n1))

    (6)-1. Conversion Code
    (and (and (= rt_input.n1 rt_input.n2) (>= rt_input.n1 8)) (> 9 rt_input.n1))

    (6)-2. result
    (define-fun simplify ((x Int) (y Int)) Bool
    (and (= 8 x) (= y x)))

    real    0m0.602s
    user    0m0.590s
    sys     0m0.013s

    (7) Original Code : n2의 값이 6인 경우
    ((6 == rt_input.n1) and !(4 >= rt_input.n2) and (6 >= rt_input.n2))

    (7)-1. Conversion Code
    (and (and (= 6 rt_input.n1) (not (>= 4 rt_input.n2))) (>= 6 rt_input.n2))

    (7)-2. result
    (define-fun simplify ((x Int) (y Int)) Bool
    (and (and (> y 4) (> 7 y)) (= 6 x)))

    real    1m17.080s
    user    1m17.047s
    sys     0m0.033s

    (8) Original Code : n2의 값이 5인 경우
    ((6 > rt_input.n1) and !(4 >= rt_input.n1) and (6 > rt_input.n2) and !(4 >= rt_input.n2))

    (8)-1. Conversion Code
    (and (and (and (> 6 rt_input.n1) (not (>= 4 rt_input.n1))) (> 6 rt_input.n2)) (not (>= 4 rt_input.n2)))

    (8)-2. result
    (define-fun simplify ((x Int) (y Int)) Bool
    (and (= 5 x) (= y x)))

    real    0m0.721s
    user    0m0.706s
    sys     0m0.015s


3. second_largest_number
    (1) Original Code : 6일 경우
    (((6 == rt_input.a) and (6 > rt_input.c) and !(6 > rt_input.b)) or ((6 == rt_input.a) and !(6 > rt_input.c) and (6 >= rt_input.b)) or ((6 == rt_input.a) and !(6 > rt_input.c) and !(6 >= rt_input.b) and (6 >= rt_input.c)) or (!(6 == rt_input.a) and (6 == rt_input.b) and (6 >= rt_input.a) and !(6 > rt_input.c)) or (!(6 == rt_input.a) and (6 == rt_input.b) and !(6 >= rt_input.a) and (6 >= rt_input.c)) or (!(6 == rt_input.a) and !(6 == rt_input.b) and !(6 > rt_input.c) and (6 >= rt_input.c) and (4 >= rt_input.b) and !(6 >= rt_input.a)) or (!(6 == rt_input.a) and !(6 == rt_input.b) and !(6 > rt_input.c) and (6 >= rt_input.c) and !(4 >= rt_input.b) and (6 >= rt_input.a) and !(6 >= rt_input.b)) or (!(6 == rt_input.a) and !(6 == rt_input.b) and !(6 > rt_input.c) and (6 >= rt_input.c) and !(4 >= rt_input.b) and !(6 >= rt_input.a) and (6 > rt_input.b)))

    (1)-1. Conversion Code
    (or (or (or (or (or (or (or 
    (and (and (= 6 rt_input.a) (> 6 rt_input.c)) (not (> 6 rt_input.b))) 
    (and (and (= 6 rt_input.a) (not (> 6 rt_input.c))) (>= 6 rt_input.b))
    ) 
    (and (and (and (= 6 rt_input.a) (not (> 6 rt_input.c))) (not (>= 6 rt_input.b))) (>= 6 rt_input.c))
    )
    (and (and (and (not (= 6 rt_input.a)) (= 6 rt_input.b)) (>= 6 rt_input.a)) (not (> 6 rt_input.c)))
    )
    (and (and (and (not (= 6 rt_input.a)) (= 6 rt_input.b)) (not (>= 6 rt_input.a))) (>= 6 rt_input.c)) 
    )
    (and (and (and (and (and (not (= 6 rt_input.a)) (not (= 6 rt_input.b))) (not (> 6 rt_input.c))) (>= 6 rt_input.c)) (>= 4 rt_input.b)) (not (>= 6 rt_input.a))) 
    )
    (and (and (and (and (and (and (not (= 6 rt_input.a)) (not (= 6 rt_input.b))) (not (> 6 rt_input.c))) (>= 6 rt_input.c)) (not (>= 4 rt_input.b))) (>= 6 rt_input.a)) (not (>= 6 rt_input.b))) 
    )
    (and (and (and (and (and (and (not (= 6 rt_input.a)) (not (= 6 rt_input.b))) (not (> 6 rt_input.c))) (>= 6 rt_input.c)) (not (>= 4 rt_input.b))) (not (>= 6 rt_input.a))) (> 6 rt_input.b))
    ) 

    (1)-2-1. result (변수 3개 같이 넣어주기)

    (1)-2-2. result (변수 3개 따로 넣어주기)
        1) rt_input.a
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.207s
        user    0m0.183s
        sys     0m0.024s

        2) rt_input.b
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.206s
        user    0m0.170s
        sys     0m0.036s

        3) rt_input.c
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.206s
        user    0m0.191s
        sys     0m0.014s

    (2) Original Code : 5일 경우
    (((4 >= rt_input.a) and !(4 >= rt_input.c) and !(4 >= rt_input.b) and (6 > rt_input.b)) or ((4 >= rt_input.a) and !(4 >= rt_input.c) and !(4 >= rt_input.b) and !(6 > rt_input.b) and (6 > rt_input.c)) or (!(4 >= rt_input.a) and (6 > rt_input.a) and (4 > rt_input.b) and !(4 >= rt_input.c)) or (!(4 >= rt_input.a) and (6 > rt_input.a) and !(4 > rt_input.b) and (6 > rt_input.c) and (4 >= rt_input.b) and !(4 >= rt_input.c)) or (!(4 >= rt_input.a) and (6 > rt_input.a) and !(4 > rt_input.b) and (6 > rt_input.c) and !(4 >= rt_input.b)) or (!(4 >= rt_input.a) and (6 > rt_input.a) and !(4 > rt_input.b) and !(6 > rt_input.c) and (6 > rt_input.b)) or (!(4 >= rt_input.a) and !(6 > rt_input.a) and (6 > rt_input.b) and (6 > rt_input.c) and (4 >= rt_input.c) and !(4 >= rt_input.b)) or (!(4 >= rt_input.a) and !(6 > rt_input.a) and (6 > rt_input.b) and (6 > rt_input.c) and !(4 >= rt_input.c)))

    (2)-1. Conversion Code
    (or (or (or (or (or (or (or 
    (and (and (and (>= 4 rt_input.a) (not (>= 4 rt_input.c))) (not (>= 4 rt_input.b))) (> 6 rt_input.b)) 
    (and (and (and (and (>= 4 rt_input.a) (not (>= 4 rt_input.c))) (not (>= 4 rt_input.b))) (not (> 6 rt_input.b))) (> 6 rt_input.c)) 
    )
    (and (and (and (not (>= 4 rt_input.a)) (> 6 rt_input.a)) (> 4 rt_input.b)) (not (>= 4 rt_input.c))) 
    )
    (and (and (and (and (and (not (>= 4 rt_input.a)) (> 6 rt_input.a)) (not (> 4 rt_input.b))) (> 6 rt_input.c)) (>= 4 rt_input.b)) (not (>= 4 rt_input.c))) 
    )
    (and (and (and (and (not (>= 4 rt_input.a)) (> 6 rt_input.a)) (not (> 4 rt_input.b))) (> 6 rt_input.c)) (not (>= 4 rt_input.b))) 
    )
    (and (and (and (and (not (>= 4 rt_input.a)) (> 6 rt_input.a)) (not (> 4 rt_input.b))) (not (> 6 rt_input.c))) (> 6 rt_input.b)) 
    )
    (and (and (and (and (and (not (>= 4 rt_input.a)) (not (> 6 rt_input.a))) (> 6 rt_input.b)) (> 6 rt_input.c)) (>= 4 rt_input.c)) (not (>= 4 rt_input.b))) 
    )
    (and (and (and (and (not (>= 4 rt_input.a)) (not (> 6 rt_input.a))) (> 6 rt_input.b)) (> 6 rt_input.c)) (not (>= 4 rt_input.c)))
    )
    
    (2)-2. result (변수 3개 따로 넣어주기)
        1) rt_input.a
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.208s
        user    0m0.194s
        sys     0m0.014s

        2) rt_input.b
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.209s
        user    0m0.194s
        sys     0m0.016s

        3) rt_input.c
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.209s
        user    0m0.174s
        sys     0m0.036s

    (3) Original Code : 2일 경우
    (((2 >= rt_input.a) and (2 == rt_input.a) and (2 >= rt_input.c) and (1 >= rt_input.b) and !(1 >= rt_input.c)) or ((2 >= rt_input.a) and (2 == rt_input.a) and (2 >= rt_input.c) and !(1 >= rt_input.b)) or ((2 >= rt_input.a) and (2 == rt_input.a) and !(2 >= rt_input.c) and (2 >= rt_input.b)) or ((2 >= rt_input.a) and !(2 == rt_input.a) and (2 == rt_input.b) and !(1 >= rt_input.c)) or ((2 >= rt_input.a) and !(2 == rt_input.a) and !(2 == rt_input.b) and (2 >= rt_input.c) and !(1 >= rt_input.c) and !(2 >= rt_input.b)) or (!(2 >= rt_input.a) and (2 >= rt_input.b) and (2 >= rt_input.c) and (2 == rt_input.b)) or (!(2 >= rt_input.a) and (2 >= rt_input.b) and (2 >= rt_input.c) and !(2 == rt_input.b) and !(1 >= rt_input.c)))

    (3)-1. Conversion Code
    (or (or (or (or (or (or 
    (and (and (and (and (>= 2 rt_input.a) (= 2 rt_input.a)) (>= 2 rt_input.c)) (>= 1 rt_input.b)) (not (>= 1 rt_input.c))) 
    (and (and (and (>= 2 rt_input.a) (= 2 rt_input.a)) (>= 2 rt_input.c)) (not (>= 1 rt_input.b))) 
    )
    (and (and (and (>= 2 rt_input.a) (= 2 rt_input.a)) (not (>= 2 rt_input.c))) (>= 2 rt_input.b)) 
    )
    (and (and (and (>= 2 rt_input.a) (not (= 2 rt_input.a))) (= 2 rt_input.b)) (not (>= 1 rt_input.c)))
    )
    (and (and (and (and (and (>= 2 rt_input.a) (not (= 2 rt_input.a))) (not (= 2 rt_input.b))) (>= 2 rt_input.c)) (not (>= 1 rt_input.c))) (not (>= 2 rt_input.b))) 
    )
    (and (and (and (not (>= 2 rt_input.a)) (>= 2 rt_input.b)) (>= 2 rt_input.c)) (= 2 rt_input.b))
    ) 
    (and (and (and (and (not (>= 2 rt_input.a)) (>= 2 rt_input.b)) (>= 2 rt_input.c)) (not (= 2 rt_input.b))) (not (>= 1 rt_input.c)))
    ) 

    (3)-2. result (변수 3개 따로 넣어주기)
        1) rt_input.a
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.204s
        user    0m0.188s
        sys     0m0.016s

        2) rt_input.b
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.205s
        user    0m0.184s
        sys     0m0.021s

        3) rt_input.c
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.206s
        user    0m0.173s
        sys     0m0.034s

    (4) Original Code : 3일 경우
    (((4 > rt_input.c) and (2 >= rt_input.c) and !(2 >= rt_input.a) and (4 > rt_input.a) and !(2 >= rt_input.b)) or ((4 > rt_input.c) and (2 >= rt_input.c) and !(2 >= rt_input.a) and !(4 > rt_input.a) and (4 > rt_input.b) and !(2 >= rt_input.b)) or ((4 > rt_input.c) and !(2 >= rt_input.c) and (4 > rt_input.b) and (2 >= rt_input.a) and !(2 >= rt_input.b)) or ((4 > rt_input.c) and !(2 >= rt_input.c) and (4 > rt_input.b) and !(2 >= rt_input.a)) or ((4 > rt_input.c) and !(2 >= rt_input.c) and !(4 > rt_input.b) and (4 > rt_input.a)) or (!(4 > rt_input.c) and (4 > rt_input.b) and (4 > rt_input.a) and (2 >= rt_input.b) and !(2 >= rt_input.a)) or (!(4 > rt_input.c) and (4 > rt_input.b) and (4 > rt_input.a) and !(2 >= rt_input.b)))

    (4)-1. Conversion Code
    (or (or (or (or (or (or 
    (and (and (and (and (> 4 rt_input.c) (>= 2 rt_input.c)) (not (>= 2 rt_input.a))) (> 4 rt_input.a)) (not (>= 2 rt_input.b))) 
    (and (and (and (and (and (> 4 rt_input.c) (>= 2 rt_input.c)) (not (>= 2 rt_input.a))) (not (> 4 rt_input.a))) (> 4 rt_input.b)) (not (>= 2 rt_input.b))) 
    )
    (and (and (and (and (> 4 rt_input.c) (not (>= 2 rt_input.c))) (> 4 rt_input.b)) (>= 2 rt_input.a)) (not (>= 2 rt_input.b))) 
    )
    (and (and (and (> 4 rt_input.c) (not (>= 2 rt_input.c))) (> 4 rt_input.b)) (not (>= 2 rt_input.a))) 
    )
    (and (and (and (> 4 rt_input.c) (not (>= 2 rt_input.c))) (not (> 4 rt_input.b))) (> 4 rt_input.a)) 
    )
    (and (and (and (and (not (> 4 rt_input.c)) (> 4 rt_input.b)) (> 4 rt_input.a)) (>= 2 rt_input.b)) (not (>= 2 rt_input.a))) 
    )
    (and (and (and (not (> 4 rt_input.c)) (> 4 rt_input.b)) (> 4 rt_input.a)) (not (>= 2 rt_input.b)))
    ) 

    (4)-2. result (변수 3개 따로 넣어주기)
        1) rt_input.a
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.204s
        user    0m0.176s
        sys     0m0.029s

        2) rt_input.b
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.201s
        user    0m0.186s
        sys     0m0.016s

        3) rt_input.c
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.203s
        user    0m0.183s
        sys     0m0.021s


    (5) Original Code : 8일 경우
    (((8 > rt_input.b) and !(8 > rt_input.a) and !(8 > rt_input.c) and (8 >= rt_input.c)) or ((8 > rt_input.b) and !(8 > rt_input.a) and !(8 > rt_input.c) and !(8 >= rt_input.c) and (8 == rt_input.a)) or (!(8 > rt_input.b) and (8 == rt_input.a) and (8 >= rt_input.c)) or (!(8 > rt_input.b) and (8 == rt_input.a) and !(8 >= rt_input.c) and (8 >= rt_input.b)) or (!(8 > rt_input.b) and !(8 == rt_input.a) and (8 > rt_input.c) and !(8 > rt_input.a) and (8 >= rt_input.b)) or (!(8 > rt_input.b) and !(8 == rt_input.a) and !(8 > rt_input.c) and (8 >= rt_input.c) and (8 >= rt_input.a)) or (!(8 > rt_input.b) and !(8 == rt_input.a) and !(8 > rt_input.c) and (8 >= rt_input.c) and !(8 >= rt_input.a) and (8 >= rt_input.b)) or (!(8 > rt_input.b) and !(8 == rt_input.a) and !(8 > rt_input.c) and !(8 >= rt_input.c) and (8 == rt_input.b) and (8 >= rt_input.a)))

    (5)-1. Conversion Code
    (or (or (or (or (or (or (or 
    (and (and (and (> 8 rt_input.b) (not (> 8 rt_input.a))) (not (> 8 rt_input.c))) (>= 8 rt_input.c)) 
    (and (and (and (and (> 8 rt_input.b) (not (> 8 rt_input.a))) (not (> 8 rt_input.c))) (not (>= 8 rt_input.c))) (= 8 rt_input.a)) 
    )
    (and (and (not (> 8 rt_input.b)) (= 8 rt_input.a)) (>= 8 rt_input.c)) 
    )
    (and (and (and (not (> 8 rt_input.b)) (= 8 rt_input.a)) (not (>= 8 rt_input.c))) (>= 8 rt_input.b)) 
    )
    (and (and (and (and (not (> 8 rt_input.b)) (not (= 8 rt_input.a))) (> 8 rt_input.c)) (not (> 8 rt_input.a))) (>= 8 rt_input.b)) 
    )
    (and (and (and (and (not (> 8 rt_input.b)) (not (= 8 rt_input.a))) (not (> 8 rt_input.c))) (>= 8 rt_input.c)) (>= 8 rt_input.a)) 
    )
    (and (and (and (and (and (not (> 8 rt_input.b)) (not (= 8 rt_input.a))) (not (> 8 rt_input.c))) (>= 8 rt_input.c)) (not (>= 8 rt_input.a))) (>= 8 rt_input.b)) 
    )
    (and (and (and (and (and (not (> 8 rt_input.b)) (not (= 8 rt_input.a))) (not (> 8 rt_input.c))) (not (>= 8 rt_input.c))) (= 8 rt_input.b)) (>= 8 rt_input.a))
    )

    (5)-2. result (변수 3개 따로 넣어주기)
        1) rt_input.a
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.203s
        user    0m0.182s
        sys     0m0.020s

        2) rt_input.b
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.202s
        user    0m0.194s
        sys     0m0.008s

        3) rt_input.c
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.204s
        user    0m0.188s
        sys     0m0.016s


    (6) Original Code : 7일 경우
    (((6 >= rt_input.c) and !(6 >= rt_input.b) and !(6 >= rt_input.a) and (8 > rt_input.a)) or ((6 >= rt_input.c) and !(6 >= rt_input.b) and !(6 >= rt_input.a) and !(8 > rt_input.a) and (8 > rt_input.b)) or (!(6 >= rt_input.c) and (8 > rt_input.c) and (6 >= rt_input.b) and !(6 >= rt_input.a)) or (!(6 >= rt_input.c) and (8 > rt_input.c) and !(6 >= rt_input.b) and (8 > rt_input.a)) or (!(6 >= rt_input.c) and (8 > rt_input.c) and !(6 >= rt_input.b) and !(8 > rt_input.a) and (8 > rt_input.b)) or (!(6 >= rt_input.c) and !(8 > rt_input.c) and (8 > rt_input.b) and (6 >= rt_input.b) and !(6 >= rt_input.a) and (8 > rt_input.a)) or (!(6 >= rt_input.c) and !(8 > rt_input.c) and (8 > rt_input.b) and !(6 >= rt_input.b) and (8 > rt_input.a)))

    (6)-1. Conversion Code
    (or (or (or (or (or (or 
    (and (and (and (>= 6 rt_input.c) (not (>= 6 rt_input.b))) (not (>= 6 rt_input.a))) (> 8 rt_input.a)) 
    (and (and (and (and (>= 6 rt_input.c) (not (>= 6 rt_input.b))) (not (>= 6 rt_input.a))) (not (> 8 rt_input.a))) (> 8 rt_input.b)) 
    )
    (and (and (and (not (>= 6 rt_input.c)) (> 8 rt_input.c)) (>= 6 rt_input.b)) (not (>= 6 rt_input.a))) 
    )
    (and (and (and (not (>= 6 rt_input.c)) (> 8 rt_input.c)) (not (>= 6 rt_input.b))) (> 8 rt_input.a)) 
    )
    (and (and (and (and (not (>= 6 rt_input.c)) (> 8 rt_input.c)) (not (>= 6 rt_input.b))) (not (> 8 rt_input.a))) (> 8 rt_input.b)) 
    )
    (and (and (and (and (and (not (>= 6 rt_input.c)) (not (> 8 rt_input.c))) (> 8 rt_input.b)) (>= 6 rt_input.b)) (not (>= 6 rt_input.a))) (> 8 rt_input.a)) 
    )
    (and (and (and (and (not (>= 6 rt_input.c)) (not (> 8 rt_input.c))) (> 8 rt_input.b)) (not (>= 6 rt_input.b))) (> 8 rt_input.a))
    ) 

    (6)-2. result (변수 3개 따로 넣어주기)
        1) rt_input.a
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.200s
        user    0m0.176s
        sys     0m0.024s

        2) rt_input.b
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.200s
        user    0m0.178s
        sys     0m0.022s

        3) rt_input.c
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.202s
        user    0m0.194s
        sys     0m0.008s


    (7) Original Code : 4일 경우
    (((4 == rt_input.b) and (4 == rt_input.a)) or ((4 == rt_input.b) and !(4 == rt_input.a) and (4 >= rt_input.c) and (4 > rt_input.a) and !(4 > rt_input.c)) or ((4 == rt_input.b) and !(4 == rt_input.a) and (4 >= rt_input.c) and !(4 > rt_input.a)) or ((4 == rt_input.b) and !(4 == rt_input.a) and !(4 >= rt_input.c) and (4 >= rt_input.a)) or (!(4 == rt_input.b) and (4 == rt_input.a) and (4 >= rt_input.c) and (4 >= rt_input.b) and !(4 > rt_input.c)) or (!(4 == rt_input.b) and (4 == rt_input.a) and (4 >= rt_input.c) and !(4 >= rt_input.b)) or (!(4 == rt_input.b) and (4 == rt_input.a) and !(4 >= rt_input.c) and (4 > rt_input.b)) or (!(4 == rt_input.b) and !(4 == rt_input.a) and (4 >= rt_input.c) and !(4 > rt_input.c) and (4 > rt_input.a) and !(4 > rt_input.b)) or (!(4 == rt_input.b) and !(4 == rt_input.a) and (4 >= rt_input.c) and !(4 > rt_input.c) and !(4 > rt_input.a) and (4 > rt_input.b)))

    (7)-1. Conversion Code
    (or (or (or (or (or (or (or (or 
    (and (= 4 rt_input.b) (= 4 rt_input.a)) 
    (and (and (and (and (= 4 rt_input.b) (not (= 4 rt_input.a))) (>= 4 rt_input.c)) (> 4 rt_input.a)) (not (> 4 rt_input.c))) 
    )
    (and (and (and (= 4 rt_input.b) (not (= 4 rt_input.a))) (>= 4 rt_input.c)) (not (> 4 rt_input.a))) 
    )
    (and (and (and (= 4 rt_input.b) (not (= 4 rt_input.a))) (not (>= 4 rt_input.c))) (>= 4 rt_input.a)) 
    )
    (and (and (and (and (not (= 4 rt_input.b)) (= 4 rt_input.a)) (>= 4 rt_input.c)) (>= 4 rt_input.b)) (not (> 4 rt_input.c))) 
    )
    (and (and (and (not (= 4 rt_input.b)) (= 4 rt_input.a)) (>= 4 rt_input.c)) (not (>= 4 rt_input.b))) 
    )
    (and (and (and (not (= 4 rt_input.b)) (= 4 rt_input.a)) (not (>= 4 rt_input.c))) (> 4 rt_input.b)) 
    )
    (and (and (and (and (and (not (= 4 rt_input.b)) (not (= 4 rt_input.a))) (>= 4 rt_input.c)) (not (> 4 rt_input.c))) (> 4 rt_input.a)) (not (> 4 rt_input.b))) 
    )
    (and (and (and (and (and (not (= 4 rt_input.b)) (not (= 4 rt_input.a))) (>= 4 rt_input.c)) (not (> 4 rt_input.c))) (not (> 4 rt_input.a))) (> 4 rt_input.b))
    )

    (7)-2. result (변수 3개 따로 넣어주기)
        1) rt_input.a
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.203s
        user    0m0.189s
        sys     0m0.014s

        2) rt_input.b
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.203s
        user    0m0.190s
        sys     0m0.013s

        3) rt_input.c
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.204s
        user    0m0.178s
        sys     0m0.026s


    (8) Original Code : 1일 경우
    (((1 >= rt_input.c) and (1 >= rt_input.b) and (1 > rt_input.c) and !(1 > rt_input.b) and !(1 > rt_input.a)) or ((1 >= rt_input.c) and (1 >= rt_input.b) and !(1 > rt_input.c) and (1 > rt_input.a) and !(1 > rt_input.b)) or ((1 >= rt_input.c) and (1 >= rt_input.b) and !(1 > rt_input.c) and !(1 > rt_input.a)) or ((1 >= rt_input.c) and !(1 >= rt_input.b) and (1 >= rt_input.a) and (1 > rt_input.c) and (1 == rt_input.a)) or ((1 >= rt_input.c) and !(1 >= rt_input.b) and (1 >= rt_input.a) and !(1 > rt_input.c)) or (!(1 >= rt_input.c) and (1 >= rt_input.b) and (1 >= rt_input.a) and (1 == rt_input.b)) or (!(1 >= rt_input.c) and (1 >= rt_input.b) and (1 >= rt_input.a) and !(1 == rt_input.b) and !(1 > rt_input.a)))
    
    (8)-1. Conversion Code
    (or (or (or (or (or (or 
    (and (and (and (and (>= 1 rt_input.c) (>= 1 rt_input.b)) (> 1 rt_input.c)) (not (> 1 rt_input.b))) (not (> 1 rt_input.a))) 
    (and (and (and (and (>= 1 rt_input.c) (>= 1 rt_input.b)) (not (> 1 rt_input.c))) (> 1 rt_input.a)) (not (> 1 rt_input.b)))
    )
    (and (and (and (>= 1 rt_input.c) (>= 1 rt_input.b)) (not (> 1 rt_input.c))) (not (> 1 rt_input.a))) 
    )
    (and (and (and (and (>= 1 rt_input.c) (not (>= 1 rt_input.b))) (>= 1 rt_input.a)) (> 1 rt_input.c)) (= 1 rt_input.a)) 
    )
    (and (and (and (>= 1 rt_input.c) (not (>= 1 rt_input.b))) (>= 1 rt_input.a)) (not (> 1 rt_input.c))) 
    )
    (and (and (and (not (>= 1 rt_input.c)) (>= 1 rt_input.b)) (>= 1 rt_input.a)) (= 1 rt_input.b)) 
    )
    (and (and (and (and (not (>= 1 rt_input.c)) (>= 1 rt_input.b)) (>= 1 rt_input.a)) (not (= 1 rt_input.b))) (not (> 1 rt_input.a)))
    )

    (8)-2. result (변수 3개 따로 넣어주기)
        1) rt_input.a
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.198s
        user    0m0.194s
        sys     0m0.005s

        2) rt_input.b
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.201s
        user    0m0.177s
        sys     0m0.025s

        3) rt_input.c
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.202s
        user    0m0.182s
        sys     0m0.020s


    (9) Original Code : 9일 경우
    (((8 >= rt_input.a) and !(8 >= rt_input.b) and !(8 >= rt_input.c)) or (!(8 >= rt_input.a) and (8 >= rt_input.b) and !(8 >= rt_input.c)) or (!(8 >= rt_input.a) and !(8 >= rt_input.b)))

    (9)-1. Conversion Code
    (or (or 
    (and (and (>= 8 rt_input.a) (not (>= 8 rt_input.b))) (not (>= 8 rt_input.c))) 
    (and (and (not (>= 8 rt_input.a)) (>= 8 rt_input.b)) (not (>= 8 rt_input.c))) 
    )
    (and (not (>= 8 rt_input.a)) (not (>= 8 rt_input.b)))
    )

    (9)-2. result (변수 3개 따로 넣어주기)
        1) rt_input.a
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.193s
        user    0m0.169s
        sys     0m0.024s

        2) rt_input.b
        (define-fun simplify ((x Int)) Bool
        true)

        real    0m0.193s
        user    0m0.182s
        sys     0m0.012s

        3) rt_input.c
        (define-fun simplify ((x Int)) Bool
        (> x 8))

        real    0m0.206s
        user    0m0.180s
        sys     0m0.026s


4. triangle
    (1) Original Code : Non-triangle일 경우
    (((2 >= rt_input.tb) and (rt_input.ta == rt_input.tc) and (rt_input.tb > rt_input.ta)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and (rt_input.ta - rt_input.tc <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and (rt_input.ta > rt_input.tb) and (rt_input.tc >= 5) and (rt_input.ta > 3) and (9 > rt_input.tc) and (rt_input.ta <= 6) and (5 >= rt_input.ta) and (5 > rt_input.ta) and !(5 >= rt_input.tc)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and (rt_input.ta - rt_input.tc <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and (rt_input.ta > rt_input.tb) and (rt_input.tc >= 5) and (rt_input.ta > 3) and (9 > rt_input.tc) and (rt_input.ta <= 6) and (5 >= rt_input.ta) and !(5 > rt_input.ta) and !(rt_input.tc <= 6)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and (rt_input.ta - rt_input.tc <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and (rt_input.ta > rt_input.tb) and (rt_input.tc >= 5) and (rt_input.ta > 3) and (9 > rt_input.tc) and (rt_input.ta <= 6) and !(5 >= rt_input.ta) and (rt_input.tc >= 8)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and (rt_input.ta - rt_input.tc <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and (rt_input.ta > rt_input.tb) and (rt_input.tc >= 5) and (rt_input.ta > 3) and !(9 > rt_input.tc)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and (rt_input.ta - rt_input.tc <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and (rt_input.ta > rt_input.tb) and (rt_input.tc >= 5) and !(rt_input.ta > 3)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and (rt_input.ta - rt_input.tc <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and (rt_input.ta > 1) and !(3 == rt_input.tc) and !(rt_input.ta > rt_input.tb)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and (rt_input.ta - rt_input.tc <= 1) and (2 == rt_input.tb) and !(rt_input.ta > rt_input.tc) and (rt_input.tc > 2) and !(1 == (9 - rt_input.ta)) and !(rt_input.ta > 1)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and (rt_input.ta - rt_input.tc <= 1) and !(2 == rt_input.tb)) or ((2 >= rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta - rt_input.tc <= 1)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and (1 == (rt_input.tb - rt_input.ta)) and (1 >= rt_input.tc)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and (1 == (rt_input.ta - rt_input.tb)) and (1 >= rt_input.tc)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and (2 >= rt_input.tc)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and (rt_input.tb > 5) and !(1 == (9 - rt_input.ta)) and (1 == (rt_input.tb - 5))) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and (rt_input.tb > 5) and !(1 == (9 - rt_input.ta)) and !(1 == (rt_input.tb - 5)) and (rt_input.ta <= 6) and (9 == rt_input.tb)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and (rt_input.tb > 5) and !(1 == (9 - rt_input.ta)) and !(1 == (rt_input.tb - 5)) and (rt_input.ta <= 6) and !(9 == rt_input.tb) and (1 == (9 - rt_input.tb)) and (5 == rt_input.ta)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and !(rt_input.tb > 5) and (rt_input.ta >= 8)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and !(rt_input.tb > 5) and !(rt_input.ta >= 8) and (rt_input.ta > 5) and (3 == rt_input.tb)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (rt_input.ta >= 5) and !(rt_input.tb > 5) and !(rt_input.ta >= 8) and (rt_input.ta > 5) and !(3 == rt_input.tb) and !(5 == rt_input.tb) and !(rt_input.ta <= 6)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(rt_input.ta >= 5) and (rt_input.tb <= 6) and !(3 == rt_input.tb) and (rt_input.tc >= rt_input.ta) and (5 >= rt_input.tb) and (2 >= rt_input.ta) and (1 >= rt_input.ta)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(rt_input.ta >= 5) and (rt_input.tb <= 6) and !(3 == rt_input.tb) and (rt_input.tc >= rt_input.ta) and (5 >= rt_input.tb) and (2 >= rt_input.ta) and !(1 >= rt_input.ta) and !(5 > rt_input.tb)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(rt_input.ta >= 5) and (rt_input.tb <= 6) and !(3 == rt_input.tb) and (rt_input.tc >= rt_input.ta) and !(5 >= rt_input.tb)) or (!(2 >= rt_input.tb) and (3 >= rt_input.tc) and !(rt_input.ta == rt_input.tb) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(rt_input.ta >= 5) and !(rt_input.tb <= 6)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and (rt_input.tc <= 6) and (rt_input.ta <= 6) and (rt_input.ta == rt_input.tb) and !(5 >= rt_input.tc) and (3 == rt_input.ta)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and (rt_input.tc <= 6) and !(rt_input.ta <= 6) and !(rt_input.tc > 5) and (rt_input.tb > 3) and !(5 == rt_input.tc) and (1 == (9 - rt_input.ta))) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and (rt_input.tc <= 6) and !(rt_input.ta <= 6) and !(rt_input.tc > 5) and !(rt_input.tb > 3) and (5 > rt_input.tc)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and (rt_input.tc <= 6) and !(rt_input.ta <= 6) and !(rt_input.tc > 5) and !(rt_input.tb > 3) and !(5 > rt_input.tc) and (rt_input.ta >= 8)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and (5 > rt_input.ta) and (rt_input.ta == rt_input.tb) and (rt_input.tc >= 8)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and (5 > rt_input.ta) and (rt_input.ta == rt_input.tb) and !(rt_input.tc >= 8) and (3 == rt_input.ta)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and (5 > rt_input.ta) and !(rt_input.ta == rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and !(5 > rt_input.ta) and (rt_input.ta <= 6) and (rt_input.tc >= 8) and (9 == rt_input.tc) and (1 == (5 - rt_input.tb)) and (5 == rt_input.ta)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and !(5 > rt_input.ta) and (rt_input.ta <= 6) and (rt_input.tc >= 8) and (9 == rt_input.tc) and !(1 == (5 - rt_input.tb))) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and (9 > rt_input.ta) and !(rt_input.tc <= 6) and !(5 > rt_input.ta) and (rt_input.ta <= 6) and (rt_input.tc >= 8) and !(9 == rt_input.tc) and !(rt_input.ta > 5) and (3 >= rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 > rt_input.ta) and (rt_input.tc > 5) and !(rt_input.tb > 3) and (rt_input.tc <= 6)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and (5 > rt_input.tb) and !(rt_input.ta == rt_input.tc) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 > rt_input.ta) and !(rt_input.tc > 5)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and (rt_input.tb - rt_input.tc <= 1) and (rt_input.tc >= 8) and (rt_input.tb <= 6) and (3 == rt_input.ta) and (5 >= rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and (rt_input.tb - rt_input.tc <= 1) and (rt_input.tc >= 8) and (rt_input.tb <= 6) and (3 == rt_input.ta) and !(5 >= rt_input.tb) and !(1 == (9 - rt_input.tc))) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and (rt_input.tb - rt_input.tc <= 1) and (rt_input.tc >= 8) and (rt_input.tb <= 6) and !(3 == rt_input.ta) and !(9 > rt_input.tc) and (5 >= rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and !(rt_input.tb - rt_input.tc <= 1) and (rt_input.tc <= 6) and (9 == rt_input.tb) and (rt_input.tc > 5) and !(rt_input.ta > 3)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and !(rt_input.tb - rt_input.tc <= 1) and (rt_input.tc <= 6) and (9 == rt_input.tb) and !(rt_input.tc > 5)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and !(rt_input.tb - rt_input.tc <= 1) and (rt_input.tc <= 6) and !(9 == rt_input.tb) and !(rt_input.tc > 5) and (rt_input.tb >= 8) and (rt_input.ta == rt_input.tc)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and !(rt_input.tb - rt_input.tc <= 1) and (rt_input.tc <= 6) and !(9 == rt_input.tb) and !(rt_input.tc > 5) and (rt_input.tb >= 8) and !(rt_input.ta == rt_input.tc) and !(1 == (5 - rt_input.ta))) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and (5 > rt_input.ta) and !(rt_input.tb - rt_input.tc <= 1) and (rt_input.tc <= 6) and !(9 == rt_input.tb) and !(rt_input.tc > 5) and !(rt_input.tb >= 8) and !(rt_input.ta > 3) and (5 > rt_input.tc) and !(rt_input.tb <= 6)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and !(5 > rt_input.ta) and (5 > rt_input.tc) and (9 == rt_input.ta) and (5 == rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and (rt_input.ta > 2) and !(5 > rt_input.tb) and !(5 > rt_input.ta) and (5 > rt_input.tc) and !(9 == rt_input.ta) and !(9 > rt_input.tb) and (5 == rt_input.ta)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and (1 >= rt_input.ta)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tb > rt_input.tc)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and !(rt_input.tb > rt_input.tc) and !(5 > rt_input.tc) and (3 >= rt_input.tb)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and !(rt_input.tb > rt_input.tc) and !(5 > rt_input.tc) and !(3 >= rt_input.tb) and !(rt_input.tb >= 8) and !(5 >= rt_input.tc) and (rt_input.tb >= 5) and !(rt_input.tc <= 6) and (rt_input.tb > 5) and (9 == rt_input.tc)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and !(rt_input.tb > rt_input.tc) and !(5 > rt_input.tc) and !(3 >= rt_input.tb) and !(rt_input.tb >= 8) and !(5 >= rt_input.tc) and (rt_input.tb >= 5) and !(rt_input.tc <= 6) and (rt_input.tb > 5) and !(9 == rt_input.tc) and (rt_input.tb <= 6) and (rt_input.tc >= 8)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and !(rt_input.tb > rt_input.tc) and !(5 > rt_input.tc) and !(3 >= rt_input.tb) and !(rt_input.tb >= 8) and !(5 >= rt_input.tc) and (rt_input.tb >= 5) and !(rt_input.tc <= 6) and !(rt_input.tb > 5)) or (!(2 >= rt_input.tb) and !(3 >= rt_input.tc) and !(rt_input.ta > 2) and !(rt_input.tb == rt_input.tc) and !(1 >= rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and !(rt_input.tb > rt_input.tc) and !(5 > rt_input.tc) and !(3 >= rt_input.tb) and !(rt_input.tb >= 8) and !(5 >= rt_input.tc) and !(rt_input.tb >= 5)))
    
    (2) Original Code : Isoscele일 경우
    (((rt_input.ta == rt_input.tc) and (rt_input.tc > rt_input.tb)) or ((rt_input.ta == rt_input.tc) and !(rt_input.tc > rt_input.tb) and !(rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and !(rt_input.tb >= 8) and (3 >= rt_input.ta) and !(1 >= rt_input.tc) and !(rt_input.tb > 5) and (2 >= rt_input.tc) and (3 == rt_input.tb)) or ((rt_input.ta == rt_input.tc) and !(rt_input.tc > rt_input.tb) and !(rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and !(rt_input.tb >= 8) and (3 >= rt_input.ta) and !(1 >= rt_input.tc) and !(rt_input.tb > 5) and !(2 >= rt_input.tc)) or ((rt_input.ta == rt_input.tc) and !(rt_input.tc > rt_input.tb) and !(rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and !(rt_input.tb >= 8) and !(3 >= rt_input.ta)) or ((rt_input.ta == rt_input.tc) and !(rt_input.tc > rt_input.tb) and !(rt_input.ta >= rt_input.tb) and !(5 > rt_input.tc)) or (!(rt_input.ta == rt_input.tc) and (rt_input.tb == rt_input.tc) and (rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and (2 >= rt_input.tc) and (3 == rt_input.ta) and !(1 >= rt_input.tb)) or (!(rt_input.ta == rt_input.tc) and (rt_input.tb == rt_input.tc) and (rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and !(2 >= rt_input.tc) and (5 >= rt_input.ta)) or (!(rt_input.ta == rt_input.tc) and (rt_input.tb == rt_input.tc) and (rt_input.ta >= rt_input.tb) and (5 > rt_input.tc) and !(2 >= rt_input.tc) and !(5 >= rt_input.ta) and !(3 >= rt_input.tb) and !(rt_input.ta >= 8)) or (!(rt_input.ta == rt_input.tc) and (rt_input.tb == rt_input.tc) and (rt_input.ta >= rt_input.tb) and !(5 > rt_input.tc)) or (!(rt_input.ta == rt_input.tc) and (rt_input.tb == rt_input.tc) and !(rt_input.ta >= rt_input.tb)) or (!(rt_input.ta == rt_input.tc) and !(rt_input.tb == rt_input.tc) and (rt_input.ta == rt_input.tb) and (rt_input.ta >= 5)) or (!(rt_input.ta == rt_input.tc) and !(rt_input.tb == rt_input.tc) and (rt_input.ta == rt_input.tb) and !(rt_input.ta >= 5) and (rt_input.tc >= rt_input.tb) and (rt_input.tb > 1) and !(rt_input.tc >= 8) and (rt_input.tb > 3)) or (!(rt_input.ta == rt_input.tc) and !(rt_input.tb == rt_input.tc) and (rt_input.ta == rt_input.tb) and !(rt_input.ta >= 5) and (rt_input.tc >= rt_input.tb) and (rt_input.tb > 1) and !(rt_input.tc >= 8) and !(rt_input.tb > 3) and !(rt_input.tc > 5) and (rt_input.tb > 2)) or (!(rt_input.ta == rt_input.tc) and !(rt_input.tb == rt_input.tc) and (rt_input.ta == rt_input.tb) and !(rt_input.ta >= 5) and (rt_input.tc >= rt_input.tb) and (rt_input.tb > 1) and !(rt_input.tc >= 8) and !(rt_input.tb > 3) and !(rt_input.tc > 5) and !(rt_input.tb > 2) and (3 == rt_input.tc)) or (!(rt_input.ta == rt_input.tc) and !(rt_input.tb == rt_input.tc) and (rt_input.ta == rt_input.tb) and !(rt_input.ta >= 5) and !(rt_input.tc >= rt_input.tb)))

    (2)-1. Conversion Code
    (or (or (or (or (or (or (or (or (or (or (or (or (or (or 
    (and (= rt_input.ta rt_input.tc) (> rt_input.tc rt_input.tb)) 
    (and (and (and (and (and (and (and (and (and (= rt_input.ta rt_input.tc) (not (> rt_input.tc rt_input.tb))) (not (>= rt_input.ta rt_input.tb))) (> 5 rt_input.tc)) (not (>= rt_input.tb 8))) (>= 3 rt_input.ta)) (not (>= 1 rt_input.tc))) (not (> rt_input.tb 5))) (>= 2 rt_input.tc)) (= 3 rt_input.tb)) 
    )
    (and (and (and (and (and (and (and (and (= rt_input.ta rt_input.tc) (not (> rt_input.tc rt_input.tb))) (not (>= rt_input.ta rt_input.tb))) (> 5 rt_input.tc)) (not (>= rt_input.tb 8))) (>= 3 rt_input.ta)) (not (>= 1 rt_input.tc))) (not (> rt_input.tb 5))) (not (>= 2 rt_input.tc))) 
    )
    (and (and (and (and (and (= rt_input.ta rt_input.tc) (not (> rt_input.tc rt_input.tb))) (not (>= rt_input.ta rt_input.tb))) (> 5 rt_input.tc)) (not (>= rt_input.tb 8))) (not (>= 3 rt_input.ta))) 
    )
    (and (and (and (= rt_input.ta rt_input.tc) (not (> rt_input.tc rt_input.tb))) (not (>= rt_input.ta rt_input.tb))) (not (> 5 rt_input.tc))) 
    )
    (and (and (and (and (and (and (not (= rt_input.ta rt_input.tc)) (= rt_input.tb rt_input.tc)) (>= rt_input.ta rt_input.tb)) (> 5 rt_input.tc)) (>= 2 rt_input.tc)) (= 3 rt_input.ta)) (not (>= 1 rt_input.tb))) 
    )
    (and (and (and (and (and (not (= rt_input.ta rt_input.tc)) (= rt_input.tb rt_input.tc)) (>= rt_input.ta rt_input.tb)) (> 5 rt_input.tc)) (not (>= 2 rt_input.tc))) (>= 5 rt_input.ta)) 
    )
    (and (and (and (and (and (and (and (not (= rt_input.ta rt_input.tc)) (= rt_input.tb rt_input.tc)) (>= rt_input.ta rt_input.tb)) (> 5 rt_input.tc)) (not (>= 2 rt_input.tc))) (not (>= 5 rt_input.ta))) (not (>= 3 rt_input.tb))) (not (>= rt_input.ta 8))) 
    )
    (and (and (and (not (= rt_input.ta rt_input.tc)) (= rt_input.tb rt_input.tc)) (>= rt_input.ta rt_input.tb)) (not (> 5 rt_input.tc))) 
    )
    (and (and (not (= rt_input.ta rt_input.tc)) (= rt_input.tb rt_input.tc)) (not (>= rt_input.ta rt_input.tb))) 
    )
    (and (and (and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.tb rt_input.tc))) (= rt_input.ta rt_input.tb)) (>= rt_input.ta 5)) 
    )
    (and (and (and (and (and (and (and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.tb rt_input.tc))) (= rt_input.ta rt_input.tb)) (not (>= rt_input.ta 5))) (>= rt_input.tc rt_input.tb)) (> rt_input.tb 1)) (not (>= rt_input.tc 8))) (> rt_input.tb 3)) 
    )
    (and (and (and (and (and (and (and (and (and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.tb rt_input.tc))) (= rt_input.ta rt_input.tb)) (not (>= rt_input.ta 5))) (>= rt_input.tc rt_input.tb)) (> rt_input.tb 1)) (not (>= rt_input.tc 8))) (not (> rt_input.tb 3))) (not (> rt_input.tc 5))) (> rt_input.tb 2)) 
    )
    (and (and (and (and (and (and (and (and (and (and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.tb rt_input.tc))) (= rt_input.ta rt_input.tb)) (not (>= rt_input.ta 5))) (>= rt_input.tc rt_input.tb)) (> rt_input.tb 1)) (not (>= rt_input.tc 8))) (not (> rt_input.tb 3))) (not (> rt_input.tc 5))) (not (> rt_input.tb 2))) (= 3 rt_input.tc)) 
    )
    (and (and (and (and (not (= rt_input.ta rt_input.tc)) (not (= rt_input.tb rt_input.tc))) (= rt_input.ta rt_input.tb)) (not (>= rt_input.ta 5))) (not (>= rt_input.tc rt_input.tb)))
    )

    (3) Original Code : Scalene일 경우
    ((!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and (rt_input.ta - rt_input.tc <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and (1 == (9 - rt_input.ta))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and (rt_input.ta - rt_input.tc <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and !(1 == (9 - rt_input.ta)) and (5 > rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and (rt_input.ta - rt_input.tc <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and !(1 == (9 - rt_input.ta)) and !(5 > rt_input.tc) and !(3 >= rt_input.ta) and (9 > rt_input.tc) and (rt_input.ta <= 6) and (5 >= rt_input.ta) and (5 > rt_input.ta) and (5 == rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and (rt_input.ta - rt_input.tc <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and !(1 == (9 - rt_input.ta)) and !(5 > rt_input.tc) and !(3 >= rt_input.ta) and (9 > rt_input.tc) and (rt_input.ta <= 6) and (5 >= rt_input.ta) and !(5 > rt_input.ta) and (rt_input.tc <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and (rt_input.ta - rt_input.tc <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and !(1 == (9 - rt_input.ta)) and !(5 > rt_input.tc) and !(3 >= rt_input.ta) and (9 > rt_input.tc) and (rt_input.ta <= 6) and !(5 >= rt_input.ta) and !(rt_input.tc >= 8)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and (rt_input.ta - rt_input.tc <= 1) and (rt_input.tb > 1) and (rt_input.tc > rt_input.ta) and !(1 == (9 - rt_input.ta)) and !(5 > rt_input.tc) and !(3 >= rt_input.ta) and (9 > rt_input.tc) and !(rt_input.ta <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and (2 >= rt_input.tb) and (rt_input.ta - rt_input.tc <= 1) and (rt_input.tb > 1) and !(rt_input.tc > rt_input.ta)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and (1 == (rt_input.tb - rt_input.tc))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and (rt_input.tb >= 8)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and !(rt_input.tb >= 8) and (rt_input.tc >= 5) and !(3 == rt_input.tb) and (rt_input.tc > 5) and (rt_input.tb >= 5) and (rt_input.tc <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and !(rt_input.tb >= 8) and (rt_input.tc >= 5) and !(3 == rt_input.tb) and (rt_input.tc > 5) and (rt_input.tb >= 5) and !(rt_input.tc <= 6) and !(5 == rt_input.tb) and (9 > rt_input.tc) and (rt_input.tb <= 6) and !(rt_input.tc >= 8)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and !(rt_input.tb >= 8) and (rt_input.tc >= 5) and !(3 == rt_input.tb) and (rt_input.tc > 5) and (rt_input.tb >= 5) and !(rt_input.tc <= 6) and !(5 == rt_input.tb) and (9 > rt_input.tc) and !(rt_input.tb <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and !(rt_input.tb >= 8) and (rt_input.tc >= 5) and !(3 == rt_input.tb) and !(rt_input.tc > 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and (2 == rt_input.ta) and !(1 == (rt_input.tb - rt_input.tc)) and (rt_input.tc >= rt_input.tb) and !(rt_input.tb >= 8) and !(rt_input.tc >= 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and (rt_input.ta >= 5) and (5 > rt_input.tc) and (9 == rt_input.ta) and !(5 == rt_input.tb)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and (rt_input.ta >= 5) and (5 > rt_input.tc) and !(9 == rt_input.ta) and (rt_input.ta > 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and (rt_input.ta >= 5) and (5 > rt_input.tc) and !(9 == rt_input.ta) and !(rt_input.ta > 5) and !(9 == rt_input.tb)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and (rt_input.ta >= 5) and !(5 > rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and (1 == (rt_input.tb - rt_input.tc))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and (5 >= rt_input.tc) and (9 > rt_input.tb) and (rt_input.ta > 3)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and (5 >= rt_input.tc) and (9 > rt_input.tb) and !(rt_input.ta > 3) and !(rt_input.tb >= 8) and (5 > rt_input.tc) and (rt_input.tb <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and (5 >= rt_input.tc) and (9 > rt_input.tb) and !(rt_input.ta > 3) and !(rt_input.tb >= 8) and !(5 > rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and (1 == (9 - rt_input.tb))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and (9 == rt_input.tc) and (rt_input.tb <= 6) and !(3 == rt_input.ta) and (1 == (rt_input.tb - 5))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and (9 == rt_input.tc) and !(rt_input.tb <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and !(9 == rt_input.tc) and (3 >= rt_input.ta) and (1 == (rt_input.tb - 5))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and !(9 == rt_input.tc) and (3 >= rt_input.ta) and !(1 == (rt_input.tb - 5)) and (9 == rt_input.tb) and !(rt_input.tc <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and !(9 == rt_input.tc) and (3 >= rt_input.ta) and !(1 == (rt_input.tb - 5)) and !(9 == rt_input.tb) and (rt_input.tc >= 8) and !(5 >= rt_input.tb)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and !(9 == rt_input.tc) and (3 >= rt_input.ta) and !(1 == (rt_input.tb - 5)) and !(9 == rt_input.tb) and !(rt_input.tc >= 8)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and (rt_input.tb >= 5) and !(rt_input.ta >= 5) and !(1 == (rt_input.tb - rt_input.tc)) and !(5 >= rt_input.tc) and !(1 == (9 - rt_input.tb)) and !(9 == rt_input.tc) and !(3 >= rt_input.ta)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and (1 == (rt_input.ta - rt_input.tc))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and (9 == rt_input.ta) and !(5 >= rt_input.tc) and (rt_input.tb > 3)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and (9 == rt_input.ta) and !(5 >= rt_input.tc) and !(rt_input.tb > 3) and !(rt_input.tc <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and (5 >= rt_input.ta) and (rt_input.tc <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and (5 >= rt_input.ta) and !(rt_input.tc <= 6) and !(5 > rt_input.ta) and (rt_input.tc >= 8) and !(3 >= rt_input.tb) and (9 > rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and (5 >= rt_input.ta) and !(rt_input.tc <= 6) and !(5 > rt_input.ta) and !(rt_input.tc >= 8)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and !(5 >= rt_input.ta) and (rt_input.tb > 3)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and !(5 >= rt_input.ta) and !(rt_input.tb > 3) and (rt_input.tc > 5) and (rt_input.ta <= 6) and (9 > rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and !(5 >= rt_input.ta) and !(rt_input.tb > 3) and (rt_input.tc > 5) and !(rt_input.ta <= 6)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and !(5 >= rt_input.ta) and !(rt_input.tb > 3) and !(rt_input.tc > 5) and !(rt_input.ta >= 8) and (rt_input.tc >= 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and (rt_input.tc > 3) and !(2 == rt_input.ta) and !(rt_input.tb >= 5) and !(1 == (rt_input.ta - rt_input.tc)) and !(9 == rt_input.ta) and !(5 >= rt_input.ta) and !(rt_input.tb > 3) and !(rt_input.tc > 5) and !(rt_input.ta >= 8) and !(rt_input.tc >= 5) and (1 == (rt_input.ta - 5))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and (1 == (rt_input.tb - rt_input.ta)) and (rt_input.tc > 1)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and (1 == (rt_input.ta - rt_input.tb)) and !(1 >= rt_input.tc)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and (1 == (rt_input.ta - 5)) and !(9 == rt_input.tb)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and (5 >= rt_input.tb) and !(rt_input.ta >= 8) and (5 > rt_input.ta) and !(rt_input.tb >= 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and (5 >= rt_input.tb) and !(rt_input.ta >= 8) and !(5 > rt_input.ta) and !(5 > rt_input.tb)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and !(5 >= rt_input.tb) and (rt_input.ta > 5) and (9 > rt_input.ta)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and !(5 >= rt_input.tb) and (rt_input.ta > 5) and !(9 > rt_input.ta) and !(1 == (rt_input.tb - 5))) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and !(5 >= rt_input.tb) and !(rt_input.ta > 5) and !(9 == rt_input.tb) and (rt_input.ta >= 5)) or (!(rt_input.tb == rt_input.tc) and !(rt_input.ta == rt_input.tc) and !(rt_input.ta == rt_input.tb) and (rt_input.ta > 1) and !(2 >= rt_input.tb) and !(rt_input.tc > 3) and !(1 == (rt_input.tb - rt_input.ta)) and !(1 == (rt_input.ta - rt_input.tb)) and !(2 >= rt_input.tc) and !(1 == (rt_input.ta - 5)) and !(1 == (9 - rt_input.tb)) and !(5 >= rt_input.tb) and !(rt_input.ta > 5) and !(9 == rt_input.tb) and !(rt_input.ta >= 5) and (1 == (rt_input.tb - 5)) and !(2 >= rt_input.ta)))

    (4) Original Code : Equilateral일 경우
    ((rt_input.ta == rt_input.tb) and (rt_input.ta >= rt_input.tc) and !(rt_input.ta > rt_input.tc))

    (4)-1. Conversion Code
    (and (and (= rt_input.ta rt_input.tb) (>= rt_input.ta rt_input.tc)) (not (> rt_input.ta rt_input.tc)))

    (4)-2. result
    (define-fun simplify ((x Int) (y Int) (z Int)) Bool
    (and (= z x) (= y x)))

    real    0m0.877s
    user    0m0.856s
    sys     0m0.021s
        